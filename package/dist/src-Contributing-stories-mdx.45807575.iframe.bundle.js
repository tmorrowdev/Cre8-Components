/*! For license information please see src-Contributing-stories-mdx.45807575.iframe.bundle.js.LICENSE.txt */
(self.webpackChunk_leaf_leaf_design_tokens=self.webpackChunk_leaf_leaf_design_tokens||[]).push([[614],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{BN:()=>MDXContext,RP:()=>useMDXComponents,gz:()=>withMDXComponents,xA:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{W8:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.W8,oz:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oz});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./src/Contributing.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>Contributing_stories});__webpack_require__("./node_modules/react/index.js");var lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{title:"Getting Started/Contributing"}),"\n",(0,jsx_runtime.jsx)(dist.oz,{children:"# Contributing\n\nPlease reference our centralized [contributing documentation](https://confluence.sys.cigna.com/x/QR8fJg) that this project shares with other Council of Ricks projects.\n\n## Set up your dev environment\n\nSee [package.json](https://git.express-scripts.com/ExpressScripts/leaf-web-components/blob/develop/package.json) and [README.md](https://git.express-scripts.com/ExpressScripts/leaf-web-components/blob/develop/README.md) for full list of project dependencies.\n\nTo install locally, clone the repository and then run `yarn install`\n\n> **Note** This project runs Storybook 7+ to display documentation, which requires Node16. You will need to `nvm` switch to this before doing the storybook build if your local doesn't default to Node16.\n\n## Building the Tokens\n\nWe use [Style Dictionary](https://amzn.github.io/style-dictionary/#/) to build our design tokens.\n\nTo build the tokens locally, run `yarn build` in your terminal. This generates the files in the `lib` folder after removing any pre-existing files from it.\n\n### Package Distribution\n\nThe `lib` directory is what's published to artifactory to consume by projects using the design tokens.\n\nStyle Dictionary lets you define which code format you want for your tokens. Our current package distribution creates the following to be consumed, separated per brand:\n\n- `web`: css/scss files\n  - `css/fonts.css`: This file provides the `@font-face` declarations specific to each brand's font files.\n  - `assets/fonts`: Font files referenced within `fonts.css`\n- `react-native`: js files with js object.\n\n\n## How the build works\n\nThe `build` command will run the custom script `build.js`. The file contains a list of brands to loop through to build tokens.\n\nThe tokens are stored in different folders within the `tokens` directory, with separate directories per brand. These files are what are used by Style Dictionary as it builds out different file formats containing tokens to consume by developers.\n\nDuring the build:\n1. The script loops on all the possible combinations of platforms on a per-brand basis to generate a configuration file for Style Dictionary to use when it builds.\n1. This configuration object is created from the `getStyleDictionaryConfig` function within `build.js`.\n1. This config is passed to Style Dictionary's `buildPlatform()` function\n1. The generated files and folders are dropped into the `lib`  directory, after any existing files in that directory are removed.\n\nWe're currently developing with the usage of the [Token Studio](https://docs.tokens.studio/) plugin to generate JSON files straight from Figma. These JSON files are currently committed into the repo in the `tokens` directory, pushed up as branches via Token Studio.\n\n### Add once, alias frequently\n\nOne goal of the tokenization effort is to use aliases as much as possible. This helps to reduce maintenance by having a value exist in one place should the need for changes come up. An example of this is the definition of color related tokens.\n\nThe ideal format is that once a certain token value is defined, that instance is referenced in other tokens. Base tokens are defined within the JSON files, and those base tokens are referenced elsewhere. Style Dictionary reads the dot notation format of the base tokens aliases and outputs the correct references in the generated files at build time.\n\nDuring the build, these tokens may also be transformed based on build configurations (for platform, format, etc).\n\n### Naming conventions, transforms, and organization\n\nTransforms, formatting, and filtering within Style Dictionary are used to determine organizing related tokens into their final file.\n\nWhile Style Dictionary provides a number of pre-defined [transforms](https://amzn.github.io/style-dictionary/#/transforms?id=pre-defined-transforms) and [transformGroups](https://amzn.github.io/style-dictionary/#/transform_groups) for manipulating the final generated file output, we will add our own transforms as needed.\n\n### Token Injection/Overrides\nThe build script will append/replace root tokens from the `tokens_injected.json` file located in the `tokens/brand/[BRAND_NAME]` directories. This is used to inject `cssFontFace` platform `asset` tokens to allow for the wiring of font files to families and weights. In the future this pattern could be used to do the same with iconography or other linked assets in CSS. \n\n**note** `tokens_injected.json` is deep-merged into the brand token on build. This means that **_any_** token can be changed through this file. Since this file is not generated from Figma these overrides can produce deviation from the visual design that generated the tokens. Any use, outside of providing paths to assets (or other token related tasks not covered by Figma exports), should be temporary in nature if done at all. These changes will not be present in the `tokens_[BRAND].json` file, so be sure when troubleshooting to verify that problematic tokens were not added to this file. \n\n#### Platforms\n\nWe've defined the following `platform` configurations:\n\n- `importedScss`: Used to create `.scss` partials based on token category. \n  - Used to build the files referenced in `tokens-brand.scss` file generated by `web`\n- `importedCss`: Used to create `.css` partials based on token category.\n  - Contains CSS Custom Properties\n  - Files build to `css` directory within each brand contained by `web`\n- `web`: For use in web application projects.\n    - Files build to `web` directory, separated by brand\n      - `tokens-brand.scss`: File containing Sass imports built by `importedScss` via a custom format. Exclude typography tokens due to mixins presets\n     \n- `sassVarToCSSVar`: A backward compatible mapping of Sass Variables to CSS Custom Properties with the same naming convention. Created using a custom format.\n    - Files build to `support` directory, separated by brand\n    - Is an optional configuration for projects that currently use Sass variables & want to migrate to using CSS Custom Properties\n- `reactNative`: For use in React Native projects. Tokens formatted as a JS Object.\n  - Creates `tokens-brand.js` and its corresponding `tokens-brand.d.ts` file in the `react-native` directory, separated by brand.\n  - Creates `index.js` and its corresponding `index.d.ts` file in the `react-native` directory.\n\n**In progress**\n- `cssFontFace`: Used to generate `@font-face` declarations based on the `asset` JSON schema in token files\n\n#### Current custom formats\n\n- `font-face`: Generates a file that contains `@font-face` declarations from tokens with the `fontFiles` type. Based on a [Style Dictionary example](https://github.com/amzn/style-dictionary/tree/main/examples/advanced/font-face-rules)\n- `scss/brandWithGlobals`: Loops through the tokens and configuration to build a Sass file that does `@import`s of Sass partials named after token types.\n- `support-scss/variables`: Builds a Sass file that maps Sass variables to their CSS Custom Property equivalent.\n- `react-native/object`: Exports a flat object with key/value pairs of token and RN style value\n- `react-native/typescript-declaration`: Exports a .d.ts file for the object created with the above format, returning a `string`, `number`, `TextStyle` or `ViewStyle`\n-  `css/typography`: Takes the typography composite token from token studio export and breaks it up into its comprising attributes: `font-family`, `font-size`, `line-height`, `letter-spacing`, `font-weight`, `text-decoration`, and `text-transform` so that appending the name to the token type provides an abstraction layer for brand theming\n- `scss/mixinFormat`: Builds a typography mixin based on Design System definitions for tokens with the `typography` type. Maps to CSS Custom Properties definitions for dynamic theming purposes.\n\n[See more on creating formats on Style Dictionary's documentation](https://amzn.github.io/style-dictionary/#/formats)\n\n#### Current custom transforms\n\n**Note**: The ordering of transforms matter in Style Dictionary.\n\n- `attribute/font`: This adds necessary attributes specific to font file tokens to use when transforming them into `@font-face` declarations. Based on a [Style Dictionary example](https://github.com/amzn/style-dictionary/tree/main/examples/advanced/font-face-rules)\n- `size/convertPxToRem`: Figma includes the suffix of `px` by default for its font sizing and spacing related values. This transform removes the `px` if it exists, looks at the `basePxFontSize` setting in the config and uses that setting to convert those values to `rem` units instead for the final file.\n- `lineHeights/percentageToUnitless`: Figma can handle percent based line-heights, but doesn't account for unitless. Unitless values work better for development, so this transform makes the necessary calculation to transform the percentage line-heights into unitless values.\n- `name/leafFormat`, `name/leafFormatJs`: The JSON structure of the tokens includes `_base` definitions that are considered Tier One tokens used for defining and aliasing to other tokens. While we want references to these base tokens, we need the name structure changed to reference the token's `type` attribute for use in projects.\n- `rn/shadow`: converts a css shadow to React Native object shadow style.\n- `rn/typographyValue`: converts css to React Native object style for typography values\n- `rn/unitlessValues`: React Native doesn't deal with relative units (rem), percentages for many values, or px. This transform converts string values with units to numbers.\n- `web/hexrgba`: Converts Figma's usage of hex code in `rgba()` into comma separated `rgba()` format for web.\n\n[See more on Style Dictionary's documentation](https://amzn.github.io/style-dictionary/#/transforms?id=transforms).\n"})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Getting Started/Contributing",tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}};const Contributing_stories=componentMeta,__namedExportsOrder=["__page"]},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var f=__webpack_require__("./node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);