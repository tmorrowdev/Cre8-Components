{
  "version": "experimental",
  "tags": [
    {
      "name": "cre8-accordion-item",
      "path": "./../components/accordion-item/accordion-item.ts",
      "description": "\nThe accordion item component delivers large amounts of content in a small space\nthrough progressive disclosure. That is, the user gets key details about the\nunderlying content and can choose to expand that content within the constraints\nof the accordion item. Accordion Items work especially well on mobile interfaces or\nwhenever vertical space is at a premium.\n\n## HOW TO USE\nAvoid “nested” accordion items—that is, collapsible content within collapsible content.\nThis type of pattern goes against UX best practices.\n\nThe cre8 accordion item header allows for two sizes:\n'sm' [cre8-typography-title-default] or 'lg' [cre8-typography-title-large]\n\nA chevron is used to indicate the “expand/collapse” action, though the entire\nheader area is clickable for the same action.\n\n**NOTE**: The header of the accordion item uses h tags so be sure to choose the headingTagVariant that\nfits into the hierarchy of your html page layout. THIS WILL NOT CHANGE THE APPEARANCE OF THE HEADER.",
      "attributes": [
        {
          "name": "isActive",
          "description": "\nWhen true, the Accordion Item is opens, when false it closes;",
          "type": "boolean | undefined",
          "default": "false"
        },
        {
          "name": "iconBefore",
          "description": "\nControls the positioning of the dropdown icon in relation to the text, true puts the icon before the text\nand false/undefined default the icon to the opposite side of the accordion item",
          "type": "boolean | undefined"
        },
        {
          "name": "tertiaryIcon",
          "description": "\nControls the appearance  of dropdown icon as being an icon-only button. true renders the tertiary variant and\nfalse/undefined renders the default secondary appearance.",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "description": "\nUsers can choose between two header sizes:  'sm' [title-default] or 'lg' [title-large].",
          "type": "\"sm\" | \"lg\"",
          "default": "\"sm\""
        },
        {
          "name": "headingTagVariant",
          "description": "\nPurely meant to help the user structure the HTML page hierarchy. Does not change the\nheader size. Defaults to 'h3'",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "default": "\"h3\""
        },
        {
          "name": "heading",
          "description": "\nControls the text content of the Accordion Item heading.",
          "type": "string"
        },
        {
          "name": "brandHeader",
          "description": "\nControls whether the header takes on the theme's 'brand-strong' color",
          "type": "boolean | undefined"
        },
        {
          "name": "accordionItemId",
          "description": "\nOptional custom id for the accordion item, if one is not set, a random id is generated for you.",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "\nWhen true, the Accordion Item is opens, when false it closes;",
          "type": "boolean | undefined",
          "default": "false"
        },
        {
          "name": "iconBefore",
          "attribute": "iconBefore",
          "description": "\nControls the positioning of the dropdown icon in relation to the text, true puts the icon before the text\nand false/undefined default the icon to the opposite side of the accordion item",
          "type": "boolean | undefined"
        },
        {
          "name": "tertiaryIcon",
          "attribute": "tertiaryIcon",
          "description": "\nControls the appearance  of dropdown icon as being an icon-only button. true renders the tertiary variant and\nfalse/undefined renders the default secondary appearance.",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "\nUsers can choose between two header sizes:  'sm' [title-default] or 'lg' [title-large].",
          "type": "\"sm\" | \"lg\"",
          "default": "\"sm\""
        },
        {
          "name": "headingTagVariant",
          "attribute": "headingTagVariant",
          "description": "\nPurely meant to help the user structure the HTML page hierarchy. Does not change the\nheader size. Defaults to 'h3'",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "default": "\"h3\""
        },
        {
          "name": "heading",
          "attribute": "heading",
          "description": "\nControls the text content of the Accordion Item heading.",
          "type": "string"
        },
        {
          "name": "brandHeader",
          "attribute": "brandHeader",
          "description": "\nControls whether the header takes on the theme's 'brand-strong' color",
          "type": "boolean | undefined"
        },
        {
          "name": "accordionItemId",
          "attribute": "accordionItemId",
          "description": "\nOptional custom id for the accordion item, if one is not set, a random id is generated for you.",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The body of the accordion item will be any valid html\ninserted between the cre8-accordion-item opening and closing tags."
        }
      ],
      "cssParts": [
        {
          "name": "::part('header')",
          "description": "The container around the interactive header."
        },
        {
          "name": "::part('button')",
          "description": "The button containing the header text and the animated icon."
        },
        {
          "name": "::part('icon')",
          "description": "The animated icon that revolves on click."
        },
        {
          "name": "::part('body')",
          "description": "The container around the expanding body section."
        },
        {
          "name": "::part('body-inner')",
          "description": "The container around the slot into which any user provided HTML is inserted."
        }
      ]
    },
    {
      "name": "cre8-accordion",
      "path": "./../components/accordion/accordion.ts",
      "description": "The component is a vertically stacked list of headers that reveal or hide sections of related content on a page.\nThe header title gives the user a high level overview of the content allowing the user to decide\nwhich sections to expand for the information.\n\nAccordion contains Accordion Items as children. This component is the wrapper for grouping related accordion items.\n\nUsers can select different border types: default (no border), rectangle, rounded bottom, and rounded.",
      "attributes": [
        {
          "name": "borderType",
          "description": "borderType",
          "type": "\"rectangle\" | \"rounded-bottom\" | \"rounded\" | \"none\" | undefined"
        },
        {
          "name": "hasDivider",
          "description": "\nWhen it is true, the inner dividers are displayed;\nif it is false, the inner dividers are not displayed",
          "type": "boolean | undefined",
          "default": "false"
        }
      ],
      "properties": [
        {
          "name": "borderType",
          "attribute": "borderType",
          "description": "borderType",
          "type": "\"rectangle\" | \"rounded-bottom\" | \"rounded\" | \"none\" | undefined"
        },
        {
          "name": "hasDivider",
          "attribute": "hasDivider",
          "description": "\nWhen it is true, the inner dividers are displayed;\nif it is false, the inner dividers are not displayed",
          "type": "boolean | undefined",
          "default": "false"
        }
      ]
    },
    {
      "name": "cre8-alert",
      "path": "./../components/alert/alert.ts",
      "description": "The general purpose of an alert or notification is to draw the user’s attention\nand provide the user with timely, relevant information.\n\n## Alert Styles:\n- There are 6 statuses for 6 types of alerts: 'error', 'info', 'notification', 'neutral', 'warning', 'success'.\nEach alert will have different icon to be displayed in the alert.\n- Users can select two types of alert variants: 'standalone', or 'banner'.\n- User can also choose the alert should be emphasized or not. There are two options: subtle or strong.\n- User can add button or link in the alert.\nIf users choose to emphasize the alert (**strong**), user needs to used **\"inverted\"** prop in button or link.\n- User can choose whether the alert can be dismissed or not",
      "attributes": [
        {
          "name": "status",
          "description": "The alert type.",
          "type": "\"error\" | \"info\" | \"notification\" | \"neutral\" | \"warning\" | \"success\" | undefined",
          "default": "\"info\""
        },
        {
          "name": "variant",
          "description": "The alert variant.",
          "type": "\"standalone\" | \"banner\"",
          "default": "\"standalone\""
        },
        {
          "name": "emphasis",
          "type": "\"subtle\" | \"strong\"",
          "default": "\"subtle\""
        },
        {
          "name": "iconAlert",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "iconTitle",
          "description": "Icon title used for the icon alt text",
          "type": "string | undefined"
        },
        {
          "name": "headerText",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "ctaBody",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "dismissed",
          "description": "Dismissed property\n1) State that changes to true and is removed when the banner is dismissed",
          "type": "boolean | undefined"
        },
        {
          "name": "notDismissible",
          "description": "Dismissable property\n1) Adds the ability to close when toggled to true",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "status",
          "attribute": "status",
          "description": "The alert type.",
          "type": "\"error\" | \"info\" | \"notification\" | \"neutral\" | \"warning\" | \"success\" | undefined",
          "default": "\"info\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "The alert variant.",
          "type": "\"standalone\" | \"banner\"",
          "default": "\"standalone\""
        },
        {
          "name": "emphasis",
          "attribute": "emphasis",
          "type": "\"subtle\" | \"strong\"",
          "default": "\"subtle\""
        },
        {
          "name": "iconAlert",
          "attribute": "iconAlert",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "iconTitle",
          "attribute": "iconTitle",
          "description": "Icon title used for the icon alt text",
          "type": "string | undefined"
        },
        {
          "name": "headerText",
          "attribute": "headerText",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "ctaBody",
          "attribute": "ctaBody",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "dismissed",
          "attribute": "dismissed",
          "description": "Dismissed property\n1) State that changes to true and is removed when the banner is dismissed",
          "type": "boolean | undefined"
        },
        {
          "name": "notDismissible",
          "attribute": "notDismissible",
          "description": "Dismissable property\n1) Adds the ability to close when toggled to true",
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "cre8-badge",
      "path": "./../components/badge/badge.ts",
      "description": "Status badges are used most often in tables or fat rows in a list.\nThese Components serve a contextual purpose and don't provide any functionality.\nBadges should be organized inside a dedicated table row communicating status such as pending, approved or rejected.",
      "attributes": [
        {
          "name": "text",
          "description": "The badge text",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "status",
          "description": "Status (a color variant prop)\n- **neutral** (default) renders a badge with a neutral state treatment\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **error** renders a badge with error state treatment\n- **info** renders a badge with information state treatment\n- **attention** renders a badge with attention state treatment",
          "type": "string"
        },
        {
          "name": "variant",
          "description": "Background Style Variant\n\n- **dark|undefined** (default) renders a badge with a dark background\n- **light** renders a badge with a light background\n- **white** renders a badge with a white background",
          "type": "string"
        },
        {
          "name": "svg",
          "description": "SVG as a raw string\n- For badges with icons, the icon is defined by this prop\n- Pass in a raw svg as a String. We use raw string loader for this but any method of getting raw svgs will do\n- Import example:`import svgFeedback from '@cre8/cre8-icons/lib/icons/System/Regular/Feedback.svg?raw';`\n- [cre8-icons Github repo](https://git.express-scripts.com/ExpressScripts/cre8-icons) This is the Github\nrepo for cre8 icons, which includes a link to the storybook as well as relavant information for new icons",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "The badge text",
          "type": "string",
          "default": "\"undefined\""
        },
        {
          "name": "status",
          "attribute": "status",
          "description": "Status (a color variant prop)\n- **neutral** (default) renders a badge with a neutral state treatment\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **error** renders a badge with error state treatment\n- **info** renders a badge with information state treatment\n- **attention** renders a badge with attention state treatment",
          "type": "string"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Background Style Variant\n\n- **dark|undefined** (default) renders a badge with a dark background\n- **light** renders a badge with a light background\n- **white** renders a badge with a white background",
          "type": "string"
        },
        {
          "name": "svg",
          "attribute": "svg",
          "description": "SVG as a raw string\n- For badges with icons, the icon is defined by this prop\n- Pass in a raw svg as a String. We use raw string loader for this but any method of getting raw svgs will do\n- Import example:`import svgFeedback from '@cre8/cre8-icons/lib/icons/System/Regular/Feedback.svg?raw';`\n- [cre8-icons Github repo](https://git.express-scripts.com/ExpressScripts/cre8-icons) This is the Github\nrepo for cre8 icons, which includes a link to the storybook as well as relavant information for new icons",
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "cre8-band",
      "path": "./../components/band/band.ts",
      "attributes": [
        {
          "name": "variant",
          "description": "Gradient variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**1** renders the band with the set gradient background</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"branded\" | undefined"
        },
        {
          "name": "fullHeight",
          "description": "Full height variant\n1) Sets the height to 100%",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Gradient variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**1** renders the band with the set gradient background</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"branded\" | undefined"
        },
        {
          "name": "fullHeight",
          "attribute": "fullHeight",
          "description": "Full height variant\n1) Sets the height to 100%",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The band content"
        }
      ]
    },
    {
      "name": "cre8-breadcrumbs-item",
      "path": "./../components/breadcrumbs-item/breadcrumbs-item.ts",
      "slots": [
        {
          "name": "",
          "description": "The component content, the expected slotted content is a cre8 Link or a String for the \"terminal node\""
        }
      ]
    },
    {
      "name": "cre8-breadcrumbs",
      "path": "./../components/breadcrumbs/breadcrumbs.ts",
      "description": "The breadcrumbs component is a secondary navigation pattern that helps a user understand where the user is located.\nThe breadcrumbs component shows the users their current location relative to the information architecture\nIt enables the users to quickly move up to a parent level or previous location.\n\n## How to Use\n\n- Import 'Breadcrumbs' component.\n- Add the pages in the path of the breadcrumbs using `cre8-breadcrumbs-item`.\nAll the pages in the breadcrumbs component should be interactive.\n- All the page should link to their respective pages (except the current page) using `cre8-link`.\n- The current page is included in the breadcrumbs trail.\n- The current page is always the last text listed and is not an interactive link.",
      "attributes": [
        {
          "name": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"breadcrumbs\""
        }
      ],
      "properties": [
        {
          "name": "navAriaLabel",
          "attribute": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"breadcrumbs\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-button-group",
      "path": "./../components/button-group/button-group.ts",
      "attributes": [
        {
          "name": "orientation",
          "description": "Responsive Button Group (for modals)",
          "type": "\"responsive-full-width\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "orientation",
          "attribute": "orientation",
          "description": "Responsive Button Group (for modals)",
          "type": "\"responsive-full-width\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-button",
      "path": "./../components/button/button.ts",
      "description": "The size and state of buttons on the screen serve as visual cues for the user\nabout what they can do and what they should do next.\nThey indicate the availability and priority of the action on the page.\n\n- Buttons are a single call-to-action where a single click performs that action\n- Use buttons when you are performing an action which is almost always on the same page\n- Use a link instead of a button when you're navigating to another place\n\n## How to Use\n\nButtons are distinguished by three key properties:\n\n- **Visual Priority**: Style and size: Primary, Secondary, or Tertiary styles;\n  each with large and small variations\n- **State**: Interaction state: hover/click (press), focus, disabled,\n  and submitting/loading (only for large buttons)\n- **Brand**: Styles determined by the site or component theme\n\n### Usage Guidelines\n\nPrimary, Secondary and Tertiary styles emphasize or de-emphasize an action. They also define\nbackground, font style, and border colors. Large and small sizing assists with visual priority by defining button\nheights, left and right internal padding, and font-size.\n\n#### System Feedback\nEach button has a default and hover/click (press) state that give the user feedback\nthat they have successfully interacted with a button.\nButton presses should always be combined with other types of timely system feedback.\nExamples of system feedback may be a page refresh, exposing additional controls or content,\ndialogs, alerts and notifications.\nIf there is perceived a delay in system response, generally due to technical constraints,\nprovide a progress or loading indicator.\n\n#### Button Text\n\n- Button text should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- They should not include punctuation (exception: \"Loading...\").\n- They should not be used as an indicator of what happens on the next page, or as a substitute\nfor a progress meter.\n\n#### Button With Icon\n\nFor button with icon:\n- **iconRotateDegree** & **iconFlipDirection** props are optional.\n- They are used to set up the correct direction for icons, for example,\narrows, caret up or caret down.\n\n#### Button Styling\n\n- DO use only the styles of the brand you are working on.\n- DO NOT combine styles, even if the page is co-branded.\n\n#### Button Sizes\n- DO always pair like sizes together and maintain the hierarchy of Primary and Secondary/Tertiary.\n- DO NOT mix sizes of buttons when they are used together as a group.\n\n#### Input Pairing\n\nPrimary and Secondary buttons may be paired with input fields.\nOnly one Primary button may appear on each screen.\nUse the Secondary button when there are multiple in-context buttons\nand/or when there is an emphasized page level button.\nWhen used in a form context, the button's `type` needs to be `submit` to pass along form data.\n\n- DO use only large buttons with input fields.\n- DO NOT use small buttons with input fields.",
      "attributes": [
        {
          "name": "text",
          "description": "The button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
          "type": "string | undefined",
          "default": "\"Button\""
        },
        {
          "name": "variant",
          "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | undefined",
          "default": "\"primary\""
        },
        {
          "name": "disabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "neutral",
          "description": "This property is for a neutral button propery mainly used for the secondary or tertiary button variant.",
          "type": "boolean | undefined"
        },
        {
          "name": "inverse",
          "description": "Inverse attribute",
          "type": "boolean"
        },
        {
          "name": "href",
          "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
          "type": "string | undefined"
        },
        {
          "name": "target",
          "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\" | undefined"
        },
        {
          "name": "rel",
          "description": "Rel if this is an <a> element - this swaps <button> for <a>",
          "type": "string | undefined"
        },
        {
          "name": "iconName",
          "description": "Deprecated: iconName, use svg instead\nIcon name if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon-legacy>",
          "type": "string | undefined",
          "deprecated": true
        },
        {
          "name": "svg",
          "description": "svg as a raw string\n- For button with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>\n- Must include the icon's position with `iconPostion`.",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "size",
          "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** Shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **md** This is the default value for the size.\n- **lg** Increases the button typography and overall size from the default.",
          "type": "\"sm\" | \"lg\" | \"md\"",
          "default": "\"md\""
        },
        {
          "name": "hideText",
          "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
          "type": "boolean | undefined"
        },
        {
          "name": "fullWidth",
          "description": "Full width button",
          "type": "boolean"
        },
        {
          "name": "loading",
          "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
          "type": "boolean"
        },
        {
          "name": "loadingComplete",
          "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
          "type": "boolean"
        },
        {
          "name": "ariaLive",
          "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"assertive\""
        },
        {
          "name": "splitButtonType",
          "description": "These two subvariants of the split button style the two seperate buttons to style as a singular button",
          "type": "\"text\" | \"caret\" | undefined"
        },
        {
          "name": "buttonAriaExpanded",
          "description": "Button aria expanded attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "type",
          "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
          "type": "\"button\" | \"submit\" | \"reset\"",
          "default": "\"button\""
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "The button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
          "type": "string | undefined",
          "default": "\"Button\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | undefined",
          "default": "\"primary\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "neutral",
          "attribute": "neutral",
          "description": "This property is for a neutral button propery mainly used for the secondary or tertiary button variant.",
          "type": "boolean | undefined"
        },
        {
          "name": "inverse",
          "attribute": "inverse",
          "description": "Inverse attribute",
          "type": "boolean"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
          "type": "string | undefined"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\" | undefined"
        },
        {
          "name": "rel",
          "attribute": "rel",
          "description": "Rel if this is an <a> element - this swaps <button> for <a>",
          "type": "string | undefined"
        },
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "Deprecated: iconName, use svg instead\nIcon name if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon-legacy>",
          "type": "string | undefined",
          "deprecated": true
        },
        {
          "name": "svg",
          "attribute": "svg",
          "description": "svg as a raw string\n- For button with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>\n- Must include the icon's position with `iconPostion`.",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "attribute": "iconRotateDegree",
          "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "attribute": "iconFlipDirection",
          "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "attribute": "iconPosition",
          "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** Shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **md** This is the default value for the size.\n- **lg** Increases the button typography and overall size from the default.",
          "type": "\"sm\" | \"lg\" | \"md\"",
          "default": "\"md\""
        },
        {
          "name": "hideText",
          "attribute": "hideText",
          "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
          "type": "boolean | undefined"
        },
        {
          "name": "fullWidth",
          "attribute": "fullWidth",
          "description": "Full width button",
          "type": "boolean"
        },
        {
          "name": "loading",
          "attribute": "loading",
          "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
          "type": "boolean"
        },
        {
          "name": "loadingComplete",
          "attribute": "loadingComplete",
          "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
          "type": "boolean"
        },
        {
          "name": "ariaLive",
          "attribute": "ariaLive",
          "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"assertive\""
        },
        {
          "name": "splitButtonType",
          "attribute": "splitButtonType",
          "description": "These two subvariants of the split button style the two seperate buttons to style as a singular button",
          "type": "\"text\" | \"caret\" | undefined"
        },
        {
          "name": "buttonAriaExpanded",
          "attribute": "buttonAriaExpanded",
          "description": "Button aria expanded attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
          "type": "\"button\" | \"submit\" | \"reset\"",
          "default": "\"button\""
        },
        {
          "name": "field",
          "type": "HTMLButtonElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-card",
      "path": "./../components/card/card.ts",
      "description": "The card component acts a general container element sectioned off by slots: `header`, `body`, `footer`.\n\n# How to Use\n1. Wrap the card component tags around any html template code which has been properly imported into the file.\n2. Decide the layout that best fits the designs assigned to your work.\nGenerally, we recommend visual elements appear in the `header` (optional slot),\nwhile `body` remains reserved for custom html content that gives further context and meaning to the `header`.\n3. The card defaults to a column and includes a `horizontal` directional variant.\nIf you have a card where the layout of the content is more aligned horizontally,\nusing the `horizontal` variant will ease the construction of your component\n4. Finally, we typically recommend reserving the footer for any interactive elements\nsuch as buttons for navigating to further information.\n\n\nNOTE: Adjusting props not mentioned above may result in unpredictable states",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variants\n- **bare** renders a card without a border and without padding around the content\n- **horizontal** renders a card with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a card with header, body, footer oriented in a row rather than a column\n  without a border and without padding around the content",
          "type": "\"bare\" | \"horizontal\" | \"horizontal-bare\" | undefined"
        },
        {
          "name": "align",
          "description": "Alignment variant\n- **center** renders a card that has center aligned content/text",
          "type": "\"center\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n- **bare** renders a card without a border and without padding around the content\n- **horizontal** renders a card with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a card with header, body, footer oriented in a row rather than a column\n  without a border and without padding around the content",
          "type": "\"bare\" | \"horizontal\" | \"horizontal-bare\" | undefined"
        },
        {
          "name": "align",
          "attribute": "align",
          "description": "Alignment variant\n- **center** renders a card that has center aligned content/text",
          "type": "\"center\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "body",
          "description": "The card's body content"
        },
        {
          "name": "header",
          "description": "(Optional) Content in the card's header"
        },
        {
          "name": "footer",
          "description": "(Optional) Content in the card's footer"
        }
      ]
    },
    {
      "name": "cre8-checkbox-field-item",
      "path": "./../components/checkbox-field-item/checkbox-field-item.ts",
      "description": "Checkbox Field Item is the combination of a checkbox input, label and field note.\nCheckboxes can turn an option on or off.\n\nCheckboxes should be used when the user is allowed to select one, none or multiple options\nOR to \"opt-in\" (ex. I would like to receive the newsletter by email)\nor as a required acknowledgement(ex. I've read the Terms and Conditions).\nIf the user can only chose one option from many, use `radio-field-item`.\n\n## How to Use\n\n- A checkbox is independent of all other checkboxes in the list,\n  so checking one box should not uncheck the others in the group.\n- Place checkbox options one on top of another vertically. Do not display them in a row horizontally.\n- Avoid disabled and read-only states as much as possible.\n\n## Universal Form Field Rules\n- Unless indicated with the \"(Optional)\" label, all fields are assumed required.\n  Minimize the number of optional fields to keep forms as short as possible.\n- Always include a label written in sentence case.\n- Avoid using the read-only and disabled states as much as possible.",
      "attributes": [
        {
          "name": "label",
          "description": "The checkbox label",
          "type": "string | undefined"
        },
        {
          "name": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorText",
          "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
          "type": "string",
          "default": "\"Error\""
        },
        {
          "name": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string | undefined"
        },
        {
          "name": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successText",
          "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
          "type": "string",
          "default": "\"Success\""
        },
        {
          "name": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string | undefined"
        },
        {
          "name": "disabled",
          "description": "Disabled State",
          "type": "boolean"
        },
        {
          "name": "checked",
          "description": "Checked State",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "description": "Checkbox FieldId",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Checkbox FieldNote",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Checkbox fieldnote ariaDescribeBy",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string | undefined"
        },
        {
          "name": "name",
          "description": "Checkbox name",
          "type": "string"
        },
        {
          "name": "required",
          "description": "Required property",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIconName",
          "description": "Checkbox fieldnote icon name",
          "type": "string | undefined"
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "label",
          "attribute": "label",
          "description": "The checkbox label",
          "type": "string | undefined"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorText",
          "attribute": "errorText",
          "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
          "type": "string",
          "default": "\"Error\""
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string | undefined"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successText",
          "attribute": "successText",
          "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
          "type": "string",
          "default": "\"Success\""
        },
        {
          "name": "successNote",
          "attribute": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string | undefined"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Disabled State",
          "type": "boolean"
        },
        {
          "name": "checked",
          "attribute": "checked",
          "description": "Checked State",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Checkbox FieldId",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Checkbox FieldNote",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Checkbox fieldnote ariaDescribeBy",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "attribute": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string | undefined"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Checkbox name",
          "type": "string"
        },
        {
          "name": "required",
          "attribute": "required",
          "description": "Required property",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIconName",
          "attribute": "fieldNoteIconName",
          "description": "Checkbox fieldnote icon name",
          "type": "string | undefined"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "type": "\"checkbox\"",
          "default": "\"checkbox\""
        },
        {
          "name": "field",
          "description": "Get the input element within the shadow root and set it to this.field",
          "type": "HTMLInputElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "change"
        }
      ]
    },
    {
      "name": "cre8-checkbox-field",
      "path": "./../components/checkbox-field/checkbox-field.ts",
      "description": "Checkbox Field is the parent container for `checkbox-field-item`.\nIt is required to allow for grouping numerous checkboxes that need additional context (in the form of `<legend>`).\nIt also provides accessibility roles, aria attributes and field note messaging on the group.\n\nSee `checkbox-field-item` for more guidance on its usage.",
      "attributes": [
        {
          "name": "label",
          "description": "Checkbox container legend label",
          "type": "string | undefined"
        },
        {
          "name": "fieldNote",
          "description": "Checkbox container fieldnote",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Checkbox container fieldnote aria describe by",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteIconName",
          "description": "Checkbox container fieldnote icon name",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteKnockout",
          "description": "Checkbox container fieldnote knockout",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIsSuccess",
          "description": "Checkbox container fieldnote isSuccess",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIsError",
          "description": "Checkbox container fieldnote isError",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "label",
          "attribute": "label",
          "description": "Checkbox container legend label",
          "type": "string | undefined"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Checkbox container fieldnote",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Checkbox container fieldnote aria describe by",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteIconName",
          "attribute": "fieldNoteIconName",
          "description": "Checkbox container fieldnote icon name",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteKnockout",
          "attribute": "fieldNoteKnockout",
          "description": "Checkbox container fieldnote knockout",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIsSuccess",
          "attribute": "fieldNoteIsSuccess",
          "description": "Checkbox container fieldnote isSuccess",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIsError",
          "attribute": "fieldNoteIsError",
          "description": "Checkbox container fieldnote isError",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content, which should be a set of `checkbox-field-item`s"
        }
      ]
    },
    {
      "name": "cre8-danger-button",
      "path": "./../components/danger-button/danger-button.ts",
      "description": "The size and state of buttons on the screen serve as visual cues for the user\nabout what they can do and what they should do next.\nThey indicate the availability and priority of the action on the page.\n\n- Buttons are a single call-to-action where a single click performs that action\n- Use Danger Buttons when you are performing an action that is potentially dangerous,\nsuch as permanently deleting information\n- Use a link instead of a button when you're navigating to another place\n\n## How to Use\n\nDanger Buttons are distinguished by three key properties:\n\n- **Visual Priority**: Style and size: Primary, Secondary, or Tertiary styles;\n  each with large and small variations\n- **State**: Interaction state: hover/click (press), focus, disabled,\n  and submitting/loading (only for large buttons)\n- **Brand**: Styles determined by the site or component theme\n\n### Usage Guidelines\n\nPrimary, Secondary and Tertiary styles emphasize or de-emphasize an action. They also define\nbackground, font style, and border colors. Large and small sizing assists with visual priority by defining button\nheights, left and right internal padding, and font-size.\n\n#### System Feedback\nEach button has a default and hover/click (press) state that give the user feedback\nthat they have successfully interacted with a button.\nButton presses should always be combined with other types of timely system feedback.\nExamples of system feedback may be a page refresh, exposing additional controls or content,\ndialogs, alerts and notifications.\nIf there is perceived a delay in system response, generally due to technical constraints,\nprovide a progress or loading indicator.\n\n#### Button Text\n\n- Button text should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- They should not include punctuation (exception: \"Loading...\").\n- They should not be used as an indicator of what happens on the next page, or as a substitute\nfor a progress meter.\n\n#### Button Styling\n\n- DO use only the styles of the brand you are working on.\n- DO NOT combine styles, even if the page is co-branded.\n\n#### Button Sizes\n- DO always pair like sizes together and maintain the hierarchy of Primary and Secondary/Tertiary.\n- DO NOT mix sizes of buttons when they are used together as a group.\n\n#### Input Pairing\n\nPrimary and Secondary buttons may be paired with input fields.\nOnly one Primary button may appear on each screen.\nUse the Secondary button when there are multiple in-context buttons\nand/or when there is an emphasized page level button.\nWhen used in a form context, the button's `type` needs to be `submit` to pass along form data.\n\n- DO use only large buttons with input fields.\n- DO NOT use small buttons with input fields.",
      "attributes": [
        {
          "name": "text",
          "description": "\nThe button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
          "type": "string | undefined",
          "default": "\"Button\""
        },
        {
          "name": "variant",
          "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | undefined",
          "default": "\"primary\""
        },
        {
          "name": "disabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "href",
          "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
          "type": "string | undefined"
        },
        {
          "name": "target",
          "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\" | undefined"
        },
        {
          "name": "rel",
          "description": "Rel if this is an <a> element - this swaps <button> for <a>",
          "type": "string | undefined"
        },
        {
          "name": "svg",
          "description": "SVG raw string if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon>",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "description": "rotate is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "description": "flip is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "size",
          "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **lg** increases the button typography and overall size from the default.",
          "type": "\"sm\" | \"lg\" | undefined"
        },
        {
          "name": "hideText",
          "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
          "type": "boolean | undefined"
        },
        {
          "name": "fullWidth",
          "description": "Full width button",
          "type": "boolean"
        },
        {
          "name": "loading",
          "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
          "type": "boolean"
        },
        {
          "name": "loadingComplete",
          "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
          "type": "boolean"
        },
        {
          "name": "inverted",
          "description": "Inverted colors Danger Button (onDark)",
          "type": "boolean | undefined"
        },
        {
          "name": "ariaLive",
          "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"assertive\""
        },
        {
          "name": "buttonAriaExpanded",
          "description": "Button aria expanded attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "type",
          "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
          "type": "\"button\" | \"submit\" | \"reset\"",
          "default": "\"button\""
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "\nThe button text. Should be as short and simple as possible, ideally a maximum of 3 words.\n- Use Title Case for readability.\n- Should not include punctuation (exception: \"Loading...\").\n- Should not be used as an indicator of what happens on the next page, or as a substitute for a progress meter.",
          "type": "string | undefined",
          "default": "\"Button\""
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n- **primary** renders the button used for primary actions. Presents highest visual priority.\n  When grouped with other buttons, only one primary is allowed\n- **secondary** renders a secondary button. Presents a lower visual priority\n- **tertiary** renders a tertiary button. Presents the lowest visual priority.\n  Should be used in limited amounts - consider if a link (`<a>`) would be more appropriate",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | undefined",
          "default": "\"primary\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Disabled attribute",
          "type": "boolean"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "\nProvide this property if you intend to use button styles for an anchor tag (`<a>`).\nThis changes the component markup from `<button>` usage to `<a>` instead.",
          "type": "string | undefined"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for a link if providing `href` to style a link as a button\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\" | undefined"
        },
        {
          "name": "rel",
          "attribute": "rel",
          "description": "Rel if this is an <a> element - this swaps <button> for <a>",
          "type": "string | undefined"
        },
        {
          "name": "svg",
          "attribute": "svg",
          "description": "SVG raw string if including an icon within a button.\nMust include the icon's position with `iconPostion`. This prop is used for <cre8-icon>",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "attribute": "iconRotateDegree",
          "description": "rotate is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "attribute": "iconFlipDirection",
          "description": "flip is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "attribute": "iconPosition",
          "description": "Icon position. Must include the name of the icon with `iconName`\n\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size variants add another way to increase or decrease visual priority of a button.\n- **sm** shrinks the button typography and overall size from the default. Use when vertical space is constrained.\n- **lg** increases the button typography and overall size from the default.",
          "type": "\"sm\" | \"lg\" | undefined"
        },
        {
          "name": "hideText",
          "attribute": "hideText",
          "description": "Visually hide button text. Text is still accessible to assistive technology.\nUse this for icon-only buttons for accessibility",
          "type": "boolean | undefined"
        },
        {
          "name": "fullWidth",
          "attribute": "fullWidth",
          "description": "Full width button",
          "type": "boolean"
        },
        {
          "name": "loading",
          "attribute": "loading",
          "description": "* Changes styling to an active state with a spinning icon.\n* Adds accessibility treatment by:\n  * announcing via voiceover when the loading success/error state via a aria-live region\n  * setting `aria-disabled`\n* Disables click events / form submitting while allowing focus (for accessibility)",
          "type": "boolean"
        },
        {
          "name": "loadingComplete",
          "attribute": "loadingComplete",
          "description": "* Variant of the loading button that:\n  * Removes loading spinner\n  * Informs the SR user that the loading status is now complete, with visually hidden text in the live area",
          "type": "boolean"
        },
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted colors Danger Button (onDark)",
          "type": "boolean | undefined"
        },
        {
          "name": "ariaLive",
          "attribute": "ariaLive",
          "description": "Controls whether your loading status update to voiceover users will occur\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"assertive\""
        },
        {
          "name": "buttonAriaExpanded",
          "attribute": "buttonAriaExpanded",
          "description": "Button aria expanded attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type of button.\n- **button** (default) button has no default behavior and does nothing unless provided some sort\nof client-side trigger\n- **submit** button for submitting form data to a server",
          "type": "\"button\" | \"submit\" | \"reset\"",
          "default": "\"button\""
        },
        {
          "name": "field",
          "type": "HTMLButtonElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-date-picker",
      "path": "./../components/date-picker/date-picker.ts",
      "description": "The Date Picker component renders a form group with label, control, help text and validation styling much\nlike the Field component but exclusively for type=date.\ncre8DatePicker inherts the cre8Field component.",
      "attributes": [
        {
          "name": "hasShortcuts",
          "description": "Quick Shortcuts Variant",
          "type": "boolean"
        },
        {
          "name": "autocomplete",
          "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
          "type": "string"
        },
        {
          "name": "pattern",
          "description": "Pattern attribute defines a regular expression to validate against input",
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "The placeholder text that appears inside the input",
          "type": "string"
        },
        {
          "name": "label",
          "description": "The required label that appears above the input",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "name",
          "description": "The name property on the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "The text that displays below in text field input",
          "type": "string"
        },
        {
          "name": "ariaLive",
          "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"polite\""
        },
        {
          "name": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "required",
          "description": "The required attribute on the input",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "The disabled attribute on the input",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorText",
          "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
          "type": "string",
          "default": "\"Error\""
        },
        {
          "name": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "max",
          "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "min",
          "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "maxlength",
          "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successText",
          "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
          "type": "string",
          "default": "\"Success\""
        },
        {
          "name": "readonly",
          "description": "Readonly attribute",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "type",
          "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
          "type": "string",
          "default": "\"text\""
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "showCalendar",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "hasShortcuts",
          "attribute": "hasShortcuts",
          "description": "Quick Shortcuts Variant",
          "type": "boolean"
        },
        {
          "name": "autocomplete",
          "attribute": "autocomplete",
          "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
          "type": "string"
        },
        {
          "name": "pattern",
          "attribute": "pattern",
          "description": "Pattern attribute defines a regular expression to validate against input",
          "type": "string"
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "The placeholder text that appears inside the input",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The required label that appears above the input",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The name property on the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "The text that displays below in text field input",
          "type": "string"
        },
        {
          "name": "ariaLive",
          "attribute": "ariaLive",
          "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"polite\""
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "required",
          "attribute": "required",
          "description": "The required attribute on the input",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "The disabled attribute on the input",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorText",
          "attribute": "errorText",
          "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
          "type": "string",
          "default": "\"Error\""
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "max",
          "attribute": "max",
          "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "min",
          "attribute": "min",
          "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "maxlength",
          "attribute": "maxlength",
          "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "attribute": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successText",
          "attribute": "successText",
          "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
          "type": "string",
          "default": "\"Success\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "description": "Readonly attribute",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "attribute": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
          "type": "string",
          "default": "\"text\""
        },
        {
          "name": "field",
          "type": "HTMLInputElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-divider",
      "path": "./../components/divider/divider.ts",
      "description": "The divider component is a separator between sections of content or groups of items.\nIt often contains a horizontal or vertical line.",
      "attributes": [
        {
          "name": "variant",
          "description": "Divider variants\n- By default, the component renders the horizontal divider\n- **vertical** renders the vertical divider",
          "type": "\"horizontal\" | \"vertical\"",
          "default": "\"horizontal\""
        },
        {
          "name": "status",
          "description": "Status (a color variant prop)\n- By default, the divider has gray color.\n- **brand**, the divider has blue color.\n- **knockout**, the divider has white color.",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Divider variants\n- By default, the component renders the horizontal divider\n- **vertical** renders the vertical divider",
          "type": "\"horizontal\" | \"vertical\"",
          "default": "\"horizontal\""
        },
        {
          "name": "status",
          "attribute": "status",
          "description": "Status (a color variant prop)\n- By default, the divider has gray color.\n- **brand**, the divider has blue color.\n- **knockout**, the divider has white color.",
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "cre8-dropdown-item",
      "path": "./../components/dropdown-item/dropdown-item.ts",
      "description": "The Dropdown item component is designed to be used with Dropdown component, each item represents a\nselectable option or action within the dropdown menu. It can be configured to trigger actions, navigate\nto links, initiate commands when clicked.",
      "attributes": [
        {
          "name": "ariaLabel",
          "type": "string",
          "default": "\"\""
        }
      ],
      "properties": [
        {
          "name": "ariaLabel",
          "attribute": "ariaLabel",
          "type": "string",
          "default": "\"\""
        }
      ],
      "events": [
        {
          "name": "dropdown-item-selected"
        }
      ]
    },
    {
      "name": "cre8-dropdown",
      "path": "./../components/dropdown/dropdown.ts",
      "description": "The Dropdown menu itself is a container that can host multiple interactive items, commonly formatted as a list",
      "attributes": [
        {
          "name": "buttonText",
          "description": "Dropdown header",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "maxHeight",
          "description": "Enables scrolling once content reached to specified height, the height should mention in px units, ex: 100px",
          "type": "string | undefined"
        },
        {
          "name": "dropdownWithLink",
          "description": "button text represents as a link",
          "type": "boolean",
          "default": "false"
        }
      ],
      "properties": [
        {
          "name": "open",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "buttonText",
          "attribute": "buttonText",
          "description": "Dropdown header",
          "type": "string",
          "default": "\"\""
        },
        {
          "name": "maxHeight",
          "attribute": "maxHeight",
          "description": "Enables scrolling once content reached to specified height, the height should mention in px units, ex: 100px",
          "type": "string | undefined"
        },
        {
          "name": "dropdownContent",
          "type": "HTMLElement"
        },
        {
          "name": "dropdownWithLink",
          "attribute": "dropdownWithLink",
          "description": "button text represents as a link",
          "type": "boolean",
          "default": "false"
        }
      ]
    },
    {
      "name": "cre8-feature",
      "path": "./../components/feature/feature.ts",
      "attributes": [
        {
          "name": "imgSrc",
          "description": "Image source",
          "type": "string | undefined"
        },
        {
          "name": "imgAlt",
          "description": "Image alt text",
          "type": "string | undefined"
        },
        {
          "name": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "imgSrc",
          "attribute": "imgSrc",
          "description": "Image source",
          "type": "string | undefined"
        },
        {
          "name": "imgAlt",
          "attribute": "imgAlt",
          "description": "Image alt text",
          "type": "string | undefined"
        },
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-field-note",
      "path": "./../components/field-note/field-note.ts",
      "description": "Field Note gives direction on how to fill out a form field and to alert users of form errors and successes.\nIt’s used below an input field and never on its own.",
      "attributes": [
        {
          "name": "isError",
          "description": "Changes the component's treatment to represent an error",
          "type": "boolean"
        },
        {
          "name": "isSuccess",
          "description": "Changes the component's treatment to represent a success",
          "type": "boolean"
        },
        {
          "name": "iconName",
          "description": "DEPRECATED: Icon name used for the icon before to the field note",
          "type": "string | undefined",
          "deprecated": true
        }
      ],
      "properties": [
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Changes the component's treatment to represent an error",
          "type": "boolean"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Changes the component's treatment to represent a success",
          "type": "boolean"
        },
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "DEPRECATED: Icon name used for the icon before to the field note",
          "type": "string | undefined",
          "deprecated": true
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The note content"
        }
      ]
    },
    {
      "name": "cre8-field",
      "path": "./../components/field/field.ts",
      "description": "The Field component renders a form group with label, control, help text and validation styling. There are\nconvenience variants of Field to support HTML5 input types and static content.",
      "attributes": [
        {
          "name": "autocomplete",
          "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
          "type": "string"
        },
        {
          "name": "pattern",
          "description": "Pattern attribute defines a regular expression to validate against input",
          "type": "string"
        },
        {
          "name": "placeholder",
          "description": "The placeholder text that appears inside the input",
          "type": "string"
        },
        {
          "name": "label",
          "description": "The required label that appears above the input",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "name",
          "description": "The name property on the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "The text that displays below in text field input",
          "type": "string"
        },
        {
          "name": "ariaLive",
          "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"polite\""
        },
        {
          "name": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "required",
          "description": "The required attribute on the input",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "The disabled attribute on the input",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorText",
          "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
          "type": "string",
          "default": "\"Error\""
        },
        {
          "name": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "max",
          "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "min",
          "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "maxlength",
          "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successText",
          "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
          "type": "string",
          "default": "\"Success\""
        },
        {
          "name": "readonly",
          "description": "Readonly attribute",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "type",
          "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
          "type": "string",
          "default": "\"text\""
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "autocomplete",
          "attribute": "autocomplete",
          "description": "Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)",
          "type": "string"
        },
        {
          "name": "pattern",
          "attribute": "pattern",
          "description": "Pattern attribute defines a regular expression to validate against input",
          "type": "string"
        },
        {
          "name": "placeholder",
          "attribute": "placeholder",
          "description": "The placeholder text that appears inside the input",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The required label that appears above the input",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The name property on the input",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the field\n<br/><br/> _*This property is dynamically set_",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "The text that displays below in text field input",
          "type": "string"
        },
        {
          "name": "ariaLive",
          "attribute": "ariaLive",
          "description": "Controls how the voiceover will experience the new information when field note changes,\nimmediately (used for more urgently needed updates) using `assertive` or at the next convenient\npause in their navigation using `polite`.",
          "type": "\"polite\" | \"assertive\"",
          "default": "\"polite\""
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "required",
          "attribute": "required",
          "description": "The required attribute on the input",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "The disabled attribute on the input",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorText",
          "attribute": "errorText",
          "description": "Visually hidden text that always signifies that this is an error for screen reader usage",
          "type": "string",
          "default": "\"Error\""
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "max",
          "attribute": "max",
          "description": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "min",
          "attribute": "min",
          "description": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.",
          "type": "string | number"
        },
        {
          "name": "maxlength",
          "attribute": "maxlength",
          "description": "The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the \"required\" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn't render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "attribute": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successText",
          "attribute": "successText",
          "description": "Visually hidden text that always signifies that this is successful for screen reader usage",
          "type": "string",
          "default": "\"Success\""
        },
        {
          "name": "readonly",
          "attribute": "readonly",
          "description": "Readonly attribute",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "attribute": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only",
          "type": "string",
          "default": "\"text\""
        },
        {
          "name": "field",
          "type": "HTMLInputElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-footer",
      "path": "./../components/footer/footer.ts",
      "slots": [
        {
          "name": "",
          "description": "The footer content"
        },
        {
          "name": "top",
          "description": "The top content (above the default slot)"
        },
        {
          "name": "bottom",
          "description": "The bottom content (below the default slot)"
        }
      ]
    },
    {
      "name": "cre8-global-nav-item",
      "path": "./../components/global-nav-item/global-nav-item.ts",
      "attributes": [
        {
          "name": "text",
          "description": "Primary nav item text",
          "type": "string",
          "default": "\"Nav item\""
        },
        {
          "name": "href",
          "description": "Primary nav item href",
          "type": "string",
          "default": "\"#\""
        },
        {
          "name": "iconName",
          "description": "Icon name",
          "type": "string | undefined",
          "default": "\"keyboard-arrow-down\""
        },
        {
          "name": "megaMenu",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "Primary nav item text",
          "type": "string",
          "default": "\"Nav item\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Primary nav item href",
          "type": "string",
          "default": "\"#\""
        },
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "Icon name",
          "type": "string | undefined",
          "default": "\"keyboard-arrow-down\""
        },
        {
          "name": "megaMenu",
          "attribute": "megaMenu",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "boolean | undefined"
        },
        {
          "name": "isActive",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The label for the navigation item"
        }
      ]
    },
    {
      "name": "cre8-global-nav",
      "path": "./../components/global-nav/global-nav.ts",
      "attributes": [
        {
          "name": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "behavior",
          "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"side-by-side\" | undefined"
        },
        {
          "name": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"global\""
        }
      ],
      "properties": [
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"side-by-side\" | undefined"
        },
        {
          "name": "navAriaLabel",
          "attribute": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"global\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The primary navigation items"
        }
      ]
    },
    {
      "name": "cre8-grid-item",
      "path": "./../components/grid-item/grid-item.ts",
      "slots": [
        {
          "name": "",
          "description": "The content of the grid item"
        }
      ]
    },
    {
      "name": "cre8-grid",
      "path": "./../components/grid/grid.ts",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variant\n- **side-by-side** yields a grid whose grid items display side-by-side (2 per row) on all screen sizes\n- **2up** yields a grid whose grid items are stacked on small screens\n  but display side-by-side when enough screen real estate is available to do so\n- **3up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern and then transforms again to a 3-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens\n  and transforms to a 3-across pattern on larger screens\n- **4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, transforms again to a 3-across pattern,\n  and ultimately transforms to a 4-across pattern\n- **1-2-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 4-across pattern on medium/large screens",
          "type": "\"side-by-side\" | \"2up\" | \"3up\" | \"1-3up\" | \"4up\" | \"1-4up\" | \"1-2-4up\" | \"2-4-6up\" | undefined"
        },
        {
          "name": "gap",
          "description": "Style variant\n- **none** yields a grid whose grid items are spaced without any gutter in between\n- **sm** yields a grid whose grid items are spaced with a gap smaller than the default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
          "type": "\"sm\" | \"lg\" | \"none\" | undefined"
        },
        {
          "name": "break",
          "description": "Break variant\n- **faster** breaks the grid at a smaller width than the default.\n  Example: 2up grid breaks to 2 per row at smaller width than default\n- **slower** breaks the grid at a larger width than the default.\n  Example: 2up grid breaks to 2 per row at larger width than default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
          "type": "\"faster\" | \"slower\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n- **side-by-side** yields a grid whose grid items display side-by-side (2 per row) on all screen sizes\n- **2up** yields a grid whose grid items are stacked on small screens\n  but display side-by-side when enough screen real estate is available to do so\n- **3up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern and then transforms again to a 3-across pattern\n- **1-3up** yields a grid whose grid items are stacked on small screens\n  and transforms to a 3-across pattern on larger screens\n- **4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, transforms again to a 3-across pattern,\n  and ultimately transforms to a 4-across pattern\n- **1-2-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 2-across pattern, and ultimately transforms to a 4-across pattern\n- **1-4up** yields a grid whose grid items are stacked on small screens,\n  transforms to a 4-across pattern on medium/large screens",
          "type": "\"side-by-side\" | \"2up\" | \"3up\" | \"1-3up\" | \"4up\" | \"1-4up\" | \"1-2-4up\" | \"2-4-6up\" | undefined"
        },
        {
          "name": "gap",
          "attribute": "gap",
          "description": "Style variant\n- **none** yields a grid whose grid items are spaced without any gutter in between\n- **sm** yields a grid whose grid items are spaced with a gap smaller than the default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
          "type": "\"sm\" | \"lg\" | \"none\" | undefined"
        },
        {
          "name": "break",
          "attribute": "break",
          "description": "Break variant\n- **faster** breaks the grid at a smaller width than the default.\n  Example: 2up grid breaks to 2 per row at smaller width than default\n- **slower** breaks the grid at a larger width than the default.\n  Example: 2up grid breaks to 2 per row at larger width than default\n- **lg** yields a grid whose grid items are spaced with a gap larger than the default",
          "type": "\"faster\" | \"slower\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The grid items"
        }
      ]
    },
    {
      "name": "cre8-header",
      "path": "./../components/header/header.ts",
      "properties": [
        {
          "name": "isActive",
          "description": "Is active state\n1) Set to true when small screen menu is open",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The header content"
        }
      ]
    },
    {
      "name": "cre8-heading",
      "path": "./../components/heading/heading.ts",
      "description": "HTML headings are titles or subtitles that you want to display on a webpage. The H1 is the most important and H6\nis the least important in the content hierarchy.\n\n# How to Use\n1. The cre8-heading tag wraps around one of the six native HTML \"h\" tags, depending on your chosen variation.\n2. There are two main use cases for using this component:\n  text passage headings and Components with a title (i.e. modal, card or alert)\n3. There will be instances when the design requires the heading text to have the brand color applied\n  in which case you should set the [brandColor](?path=/story/cre8-components-heading--brand-color)\n  attribute to true on the cre8-heading tag.\n4. For dark backgrounds, add the [inverted](?path=/story/cre8-components-heading--inverted)\n  attribute to the tag for white text.",
      "attributes": [
        {
          "name": "type",
          "description": "Heading type\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**display-default** renders a heading with the heading display-default preset treatment</li>\n<li>**display-small** renders a heading with the heading display-small preset treatment</li>\n<li>**headline-large** renders a heading with the heading headline-large preset treatment</li>\n<li>**headline-default** renders a heading with the heading headline-default preset treatment</li>\n<li>**headline-small** renders a heading with the heading headline-small preset treatment</li>\n<li>**title-xlarge** renders a heading with the heading title-xlarge preset treatment</li>\n<li>**title-large** renders a heading with the heading title-large preset treatment</li>\n<li>**title-default** renders a heading with the heading title-default preset treatment</li>\n<li>**title-small** renders a heading with the heading title-small preset treatment</li>\n<li>**label-large** renders a heading with the label-large preset treatment</li>\n<li>**label** renders a heading with the label preset treatment</li>\n<li>**label-small** renders a heading with the label-small preset treatment</li>\n<li>**meta-large** renders a heading with the meta-large preset treatment</li>\n<li>**meta-default** renders a heading with the meta-default preset treatment</li>\n<li>**meta-small** renders a heading with the meta-small preset treatment</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"display-default\" | \"display-small\" | \"headline-large\" | \"headline-default\" | \"headline-small\" | \"title-xlarge\" | \"title-large\" | \"title-default\" | \"title-small\" | \"label-large\" | ... 5 more ... | undefined"
        },
        {
          "name": "tagVariant",
          "description": "Dynamic tag name for the component\n1) This is needed to use proper semantic heading treatments depending on where the banner lives on the page\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**h1** renders an `h1` tag</li>\n<li>**h2** renders an `h2` tag. This is the default</li>\n<li>**h3** renders an `h3` tag</li>\n<li>**h4** renders an `h4` tag</li>\n<li>**h5** renders an `h5` tag</li>\n<li>**h6** renders an `h6` tag</li>\n</ul>\n</cre8-text-passage>",
          "type": "string",
          "default": "\"h5\""
        },
        {
          "name": "inverted",
          "description": "Invert the color of the font from dark to light. An inverted `heading` should be used on a dark background.",
          "type": "boolean"
        },
        {
          "name": "brandColor",
          "description": "Apply the brand color to the heading text.",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "type",
          "attribute": "type",
          "description": "Heading type\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**display-default** renders a heading with the heading display-default preset treatment</li>\n<li>**display-small** renders a heading with the heading display-small preset treatment</li>\n<li>**headline-large** renders a heading with the heading headline-large preset treatment</li>\n<li>**headline-default** renders a heading with the heading headline-default preset treatment</li>\n<li>**headline-small** renders a heading with the heading headline-small preset treatment</li>\n<li>**title-xlarge** renders a heading with the heading title-xlarge preset treatment</li>\n<li>**title-large** renders a heading with the heading title-large preset treatment</li>\n<li>**title-default** renders a heading with the heading title-default preset treatment</li>\n<li>**title-small** renders a heading with the heading title-small preset treatment</li>\n<li>**label-large** renders a heading with the label-large preset treatment</li>\n<li>**label** renders a heading with the label preset treatment</li>\n<li>**label-small** renders a heading with the label-small preset treatment</li>\n<li>**meta-large** renders a heading with the meta-large preset treatment</li>\n<li>**meta-default** renders a heading with the meta-default preset treatment</li>\n<li>**meta-small** renders a heading with the meta-small preset treatment</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"display-default\" | \"display-small\" | \"headline-large\" | \"headline-default\" | \"headline-small\" | \"title-xlarge\" | \"title-large\" | \"title-default\" | \"title-small\" | \"label-large\" | ... 5 more ... | undefined"
        },
        {
          "name": "tagVariant",
          "attribute": "tagVariant",
          "description": "Dynamic tag name for the component\n1) This is needed to use proper semantic heading treatments depending on where the banner lives on the page\n<cre8-text-passage size=\"small\">\n<ul>\n<li>**h1** renders an `h1` tag</li>\n<li>**h2** renders an `h2` tag. This is the default</li>\n<li>**h3** renders an `h3` tag</li>\n<li>**h4** renders an `h4` tag</li>\n<li>**h5** renders an `h5` tag</li>\n<li>**h6** renders an `h6` tag</li>\n</ul>\n</cre8-text-passage>",
          "type": "string",
          "default": "\"h5\""
        },
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Invert the color of the font from dark to light. An inverted `heading` should be used on a dark background.",
          "type": "boolean"
        },
        {
          "name": "brandColor",
          "attribute": "brandColor",
          "description": "Apply the brand color to the heading text.",
          "type": "boolean"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The heading text content"
        }
      ]
    },
    {
      "name": "cre8-hero",
      "path": "./../components/hero/hero.ts",
      "attributes": [
        {
          "name": "imgSrc",
          "description": "Image source",
          "type": "string | undefined"
        },
        {
          "name": "imgAlt",
          "description": "Image alt text",
          "type": "string | undefined"
        },
        {
          "name": "align",
          "description": "Position variant. Bottom left is the default position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**top-left** renders content in the top left corner of the image</li>\n<li>**left** renders content in the left, center part of the image</li>\n<li>**top-center** renders content in the top, center part of the image</li>\n<li>**center** renders content center of the image</li>\n<li>**bottom-center** renders content bottom center of the image</li>\n<li>**top-right** renders content top-right of the image</li>\n<li>**right** renders content right of the image</li>\n<li>**bottom-right** renders content bottom, right part of the image</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"center\" | \"top-left\" | \"left\" | \"top-center\" | \"bottom-center\" | \"top-right\" | \"right\" | \"bottom-right\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "imgSrc",
          "attribute": "imgSrc",
          "description": "Image source",
          "type": "string | undefined"
        },
        {
          "name": "imgAlt",
          "attribute": "imgAlt",
          "description": "Image alt text",
          "type": "string | undefined"
        },
        {
          "name": "align",
          "attribute": "align",
          "description": "Position variant. Bottom left is the default position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**top-left** renders content in the top left corner of the image</li>\n<li>**left** renders content in the left, center part of the image</li>\n<li>**top-center** renders content in the top, center part of the image</li>\n<li>**center** renders content center of the image</li>\n<li>**bottom-center** renders content bottom center of the image</li>\n<li>**top-right** renders content top-right of the image</li>\n<li>**right** renders content right of the image</li>\n<li>**bottom-right** renders content bottom, right part of the image</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"center\" | \"top-left\" | \"left\" | \"top-center\" | \"bottom-center\" | \"top-right\" | \"right\" | \"bottom-right\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-icon-legacy",
      "path": "./../components/icon/icon.ts",
      "description": "\n<cre8-icon> is a web component, which can be used with any frontend framework and use any svg.\nIt takes raw svgs as props and renders them.\n\n**'cre8-icon-legacy'** will be **deprecated** in Web Components v0.5.0\n\n- [List of new figma icons](https://www.figma.com/file/j1a0rBkoH65XiGKfq7ppWa/Iconography?type=design&node-id=2037-5773&mode=design&t=6ZzC6KH3Gkxf3fj5-4)\n- The new `cre8-icon` from the cre8-icon package: https://static-dev.esi-memberweb-dev.aws.evernorthcloud.com/cre8-icons/.\n\n##Usability Considerations\n- If the icon is decorative: set `aria-hidden` to true.\n- If the icon is interactive (not decorative): set `aria-hidden` to false and add the `aria-label`\n- If the icon is key to functionality from a screen reader perspective, it is required to add `aria-label`\nwhich will describe the icon.\nFor example, if the icon is a close button, setting `aria-label=\"Close\"`will give\nthe SVG an aria-label to make it sufficiently accessible.\n\n[More information on Accessibility with cre8-icons](https://static-dev.esi-memberweb-dev.aws.evernorthcloud.com/cre8-icons/?path=/story/getting-started-accessibility--page)\n\n##How to use\ncre8 Web Components (cre8-wc) includes the `@cre8/cre8-icons` package.\nIf you need to install a newer version than what's included, please see\nthe [installation instructions for cre8-icons](https://git.express-scripts.com/ExpressScripts/cre8-icons#installation).\n- Import the component (this is the icon container): `import '@cre8/cre8-icons';`\n- Import an svg as a string: `import svgInfo from '!!raw-loader!@cre8/cre8-icons/lib/icons/System/Regular/Info.svg';`\n\nYour import paths may be different depending on your project's build configuration.\nPlease see [Importing Icons](https://static-dev.esi-memberweb-dev.aws.evernorthcloud.com/cre8-icons/?path=/story/icon-sets-importing-icons--page)\nof the `@cre8/cre8-icons` documentation for more information.",
      "attributes": [
        {
          "name": "focusable",
          "description": "Focusable",
          "type": "boolean | undefined"
        },
        {
          "name": "name",
          "description": "Icon name (this method of passing in svgs is to be deprecated)",
          "type": "string"
        },
        {
          "name": "iconUrl",
          "description": "Icon path\n1) This points to the file where the icon sprite lives\n2) This method of pathing will soon be depricated",
          "type": "string | undefined",
          "default": "\"iconSprite\""
        },
        {
          "name": "iconTitle",
          "description": "Icon Title, this string is used for the aira-label of the svg",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "focusable",
          "attribute": "focusable",
          "description": "Focusable",
          "type": "boolean | undefined"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Icon name (this method of passing in svgs is to be deprecated)",
          "type": "string"
        },
        {
          "name": "iconUrl",
          "attribute": "iconUrl",
          "description": "Icon path\n1) This points to the file where the icon sprite lives\n2) This method of pathing will soon be depricated",
          "type": "string | undefined",
          "default": "\"iconSprite\""
        },
        {
          "name": "iconTitle",
          "attribute": "iconTitle",
          "description": "Icon Title, this string is used for the aira-label of the svg",
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "cre8-inline-alert",
      "path": "./../components/inline-alert/inline-alert.ts",
      "description": "In cases when it is necessary to alert the user but a less strong message that cannot be dismissed is desired,\nuse an in-line contextual alert message as the least \"severe\" message type.\nThese can be displayed anywhere on the page, but should never cover content.\nInline alerts do not include a title or close capability and are considered minimally intrusive user messaging.",
      "attributes": [
        {
          "name": "iconName",
          "description": "DEPRECATED: Icon name used for the icon before to the field note",
          "type": "string | undefined",
          "deprecated": true
        },
        {
          "name": "fullWidth",
          "description": "Full width Inline Alert",
          "type": "boolean"
        },
        {
          "name": "iconTitle",
          "description": "Icon title used for the icon alt text",
          "type": "string | undefined"
        },
        {
          "name": "variant",
          "description": "Variant\n- **subtle** (default) renders an alert message in a padded container with a with a border and background color\n- **transparent** renders an alert message with no padded container, border, or background color",
          "type": "\"subtle\" | \"transparent\"",
          "default": "\"subtle\""
        },
        {
          "name": "status",
          "description": "Status\n- **default** renders an inline alert with the brand colors\n- **error** renders an inline alert with an error state\n- **warning** renders an inline alert with a warning state\n- **success** renders an inline alert with a success state\n- **attention** renders an inline alert with an attention state\n- **neutral** renders an inline alert with a nuetral state",
          "type": "\"error\" | \"info\" | \"neutral\" | \"warning\" | \"success\" | \"attention\" | \"help\" | undefined",
          "default": "\"info\""
        }
      ],
      "properties": [
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "DEPRECATED: Icon name used for the icon before to the field note",
          "type": "string | undefined",
          "deprecated": true
        },
        {
          "name": "fullWidth",
          "attribute": "fullWidth",
          "description": "Full width Inline Alert",
          "type": "boolean"
        },
        {
          "name": "iconTitle",
          "attribute": "iconTitle",
          "description": "Icon title used for the icon alt text",
          "type": "string | undefined"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Variant\n- **subtle** (default) renders an alert message in a padded container with a with a border and background color\n- **transparent** renders an alert message with no padded container, border, or background color",
          "type": "\"subtle\" | \"transparent\"",
          "default": "\"subtle\""
        },
        {
          "name": "status",
          "attribute": "status",
          "description": "Status\n- **default** renders an inline alert with the brand colors\n- **error** renders an inline alert with an error state\n- **warning** renders an inline alert with a warning state\n- **success** renders an inline alert with a success state\n- **attention** renders an inline alert with an attention state\n- **neutral** renders an inline alert with a nuetral state",
          "type": "\"error\" | \"info\" | \"neutral\" | \"warning\" | \"success\" | \"attention\" | \"help\" | undefined",
          "default": "\"info\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-layout-container",
      "path": "./../components/layout-container/layout-container.ts",
      "attributes": [
        {
          "name": "fullHeight",
          "description": "Full height variant\n1) Sets the height to 100%",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "fullHeight",
          "attribute": "fullHeight",
          "description": "Full height variant\n1) Sets the height to 100%",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The contents of the layout container"
        }
      ]
    },
    {
      "name": "cre8-layout-section",
      "path": "./../components/layout-section/layout-section.ts",
      "attributes": [
        {
          "name": "behavior",
          "description": "Behavioral variants\n- **sticky** allows the layout section to stick to the screen until the\n  section reaches the bottom of the layout or the next layout section.",
          "type": "\"sticky\" | undefined"
        },
        {
          "name": "top",
          "description": "Top style\n1) Used to create dynamic sticky containers that can be adjusted based on the content",
          "type": "string | undefined",
          "default": "\"1rem\""
        }
      ],
      "properties": [
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavioral variants\n- **sticky** allows the layout section to stick to the screen until the\n  section reaches the bottom of the layout or the next layout section.",
          "type": "\"sticky\" | undefined"
        },
        {
          "name": "top",
          "attribute": "top",
          "description": "Top style\n1) Used to create dynamic sticky containers that can be adjusted based on the content",
          "type": "string | undefined",
          "default": "\"1rem\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The content of the layout section"
        }
      ]
    },
    {
      "name": "cre8-layout",
      "path": "./../components/layout/layout.ts",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>Default is a right sidebar</li>\n<li>**left-sidebar** formats the first `layout-section` component as a left sidebar</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"left-sidebar\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>Default is a right sidebar</li>\n<li>**left-sidebar** formats the first `layout-section` component as a left sidebar</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"left-sidebar\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The layout content"
        }
      ]
    },
    {
      "name": "cre8-linelength-container",
      "path": "./../components/linelength-container/linelength-container.ts",
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-link-list-item",
      "path": "./../components/link-list-item/link-list-item.ts",
      "attributes": [
        {
          "name": "text",
          "description": "The link text",
          "type": "string | undefined"
        },
        {
          "name": "isActive",
          "description": "Active link",
          "type": "boolean | undefined"
        },
        {
          "name": "href",
          "description": "The link URL",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "The link text",
          "type": "string | undefined"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Active link",
          "type": "boolean | undefined"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "The link URL",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The default slot to put badges or other Components"
        }
      ]
    },
    {
      "name": "cre8-link-list",
      "path": "./../components/link-list/link-list.ts",
      "attributes": [
        {
          "name": "behavior",
          "description": "Behavioral variant\n- **responsive** renders a horizontal wrapping link list that converts to a stacked link list on large screens\n- **horizontal** renders a horizontal wrapping link list on all screens",
          "type": "\"horizontal\" | \"responsive\" | undefined"
        },
        {
          "name": "inverted",
          "description": "Inverted variant\n1. Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "description": "Size variants\n- **sm** renders a link list with a smaller typography",
          "type": "\"sm\" | undefined"
        },
        {
          "name": "spacing",
          "description": "Spacing between link list items\n- **condensed** renders a link list with a more compact display",
          "type": "\"condensed\" | undefined"
        },
        {
          "name": "variant",
          "description": "Style variants\n- **secondary** renders a link list with a more subtle visual treatment\n- **display** renders a link list with a display treatment (e.g. article title)",
          "type": "\"secondary\" | \"display\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavioral variant\n- **responsive** renders a horizontal wrapping link list that converts to a stacked link list on large screens\n- **horizontal** renders a horizontal wrapping link list on all screens",
          "type": "\"horizontal\" | \"responsive\" | undefined"
        },
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1. Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size variants\n- **sm** renders a link list with a smaller typography",
          "type": "\"sm\" | undefined"
        },
        {
          "name": "spacing",
          "attribute": "spacing",
          "description": "Spacing between link list items\n- **condensed** renders a link list with a more compact display",
          "type": "\"condensed\" | undefined"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n- **secondary** renders a link list with a more subtle visual treatment\n- **display** renders a link list with a display treatment (e.g. article title)",
          "type": "\"secondary\" | \"display\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The link list items"
        }
      ]
    },
    {
      "name": "cre8-link",
      "path": "./../components/link/link.ts",
      "description": "Link Component are strictly used in the case where the component will take\nthe user away from the current page to a new url.\nIn this vein, this component should ONLY be used in situations an anchor tag would be used (an href is required)\nThis goes for the variations as well such as the Call To Action Link\n\n**Note**\n\nFor link with icon:\n- **iconRotateDegree** & **iconFlipDirection** props are optional.\n- They are used to set up the correct direction for icons, for example,\narrows, caret up or caret down.",
      "attributes": [
        {
          "name": "href",
          "description": "Href attribute of the anchor tag",
          "type": "string"
        },
        {
          "name": "rel",
          "description": "Rel attribute of the anchor tag",
          "type": "string | undefined"
        },
        {
          "name": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\" | undefined"
        },
        {
          "name": "iconName",
          "description": "DEPRECATED: Icon name, use svg instead",
          "type": "string | undefined",
          "deprecated": true
        },
        {
          "name": "svg",
          "description": "svg as a raw string\n- For links with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "description": "Icon position\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "ctaIcon",
          "description": "Call To Action Icon",
          "type": "string",
          "default": "\"arrow-forward\""
        },
        {
          "name": "ctaLink",
          "description": "Call To Action Link",
          "type": "boolean | undefined"
        },
        {
          "name": "noUnderline",
          "description": "Link with no underline",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "description": "Size variant (default is medium)\n- **sm** shrinks the link typography and overall size\n- **lg** increases the link typography size and overall size",
          "type": "\"sm\" | \"lg\" | undefined"
        },
        {
          "name": "inverted",
          "description": "Inverted colors Link (onDark)",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "href",
          "attribute": "href",
          "description": "Href attribute of the anchor tag",
          "type": "string"
        },
        {
          "name": "rel",
          "attribute": "rel",
          "description": "Rel attribute of the anchor tag",
          "type": "string | undefined"
        },
        {
          "name": "target",
          "attribute": "target",
          "description": "Target attribute for a link (i.e. set to _blank to open in new tab)\n- **_blank** yields a link that opens in a new tab\n- **_self** yields a link that loads the URL into the same browsing context as the current one.\n  This is the default behavior\n- **_parent** yields a link that loads the URL into the parent browsing context of the current one.\n  If there is no parent, this behaves the same way as _self\n- **_top** yields a link that loads the URL into the top-level browsing context.\n  If there is no parent, this behaves the same way as _self.",
          "type": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\" | undefined"
        },
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "DEPRECATED: Icon name, use svg instead",
          "type": "string | undefined",
          "deprecated": true
        },
        {
          "name": "svg",
          "attribute": "svg",
          "description": "svg as a raw string\n- For links with icon, the icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "attribute": "iconRotateDegree",
          "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "attribute": "iconFlipDirection",
          "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "attribute": "iconPosition",
          "description": "Icon position\n- **before** places the icon before the button text\n- **after** places the icon after the button text",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "ctaIcon",
          "attribute": "ctaIcon",
          "description": "Call To Action Icon",
          "type": "string",
          "default": "\"arrow-forward\""
        },
        {
          "name": "ctaLink",
          "attribute": "ctaLink",
          "description": "Call To Action Link",
          "type": "boolean | undefined"
        },
        {
          "name": "noUnderline",
          "attribute": "noUnderline",
          "description": "Link with no underline",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size variant (default is medium)\n- **sm** shrinks the link typography and overall size\n- **lg** increases the link typography size and overall size",
          "type": "\"sm\" | \"lg\" | undefined"
        },
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted colors Link (onDark)",
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "cre8-list-item",
      "path": "./../components/list-item/list-item.ts",
      "slots": [
        {
          "name": "",
          "description": "The content of the list item"
        }
      ]
    },
    {
      "name": "cre8-list",
      "path": "./../components/list/list.ts",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** removes any lines from in between list items</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"bare\" | undefined"
        },
        {
          "name": "spacing",
          "description": "Spacing variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**padded** applies more padding in between list items compared to the default</li>\n<li>**condensed** reduces padding in between list items compared to the default</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"condensed\" | \"padded\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** removes any lines from in between list items</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"bare\" | undefined"
        },
        {
          "name": "spacing",
          "attribute": "spacing",
          "description": "Spacing variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**padded** applies more padding in between list items compared to the default</li>\n<li>**condensed** reduces padding in between list items compared to the default</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"condensed\" | \"padded\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The list items"
        }
      ]
    },
    {
      "name": "cre8-loading-spinner",
      "path": "./../components/loading-spinner/loading-spinner.ts",
      "description": "A loading spinner notifies the user that their request is being processed while the front end is retrieving data\nor performing slow computations.\n\nProviding visibility of a system's status is one of the most important rules of UI design. When the user has to\nguess or assume that the system is responding to their input, they may send a command such as submit multiple\ntimes, while also being anxious that the application is frozen or not working.\n\nWhile it is most ideal to improve system performance such that there is no perceptible delay, in some cases this\nis not possible. In these cases, the immediate response should be a progress indicator to give a visual indication\nthat their command was received and that the application is working.\n\nThe length of time for the system response is a good general guideline for which progress indicator to use.\n\n## Determinable vs indeterminate progress\n\nA progress meter provides feedback that the system is working and gives the user an indication of how much time\nthey will wait. This indicator should be used when the system response time is longer and determinable. See\nProgressMeter component for further examples and accessibility considerations.\n\n## How to Use\n\nThe loading-spinner component can be used to indicate loading state on the component level all the way up to the\npage level. There are two loading styles: determinate (loading progress represents percentage of total load time)\nand indeterminate (a spinning animation that persists while loading continues)\n\n1. Choose determinate or indeterminate. UX best practices leans more towards recommending the indeterminate\nprogress indicator if load time is unknown, while determinate is less user friendly unless the label indicates\nthe percentage loaded as well.\n2. Choose a size and use it according to context, guidance should be given by your design or content team.\n3. A common label to use is `Loading…`, guidance should be given by your design content team.\n4. If you choose to use the determinate loader then you must also control the progress attribute's value which\ncontrols the percentage of the circle that shows (values 0-100 accepted);\n5. For dark backgrounds, add the `inverse` attribute to the `<cre8-loading-spinner>` tag.\n6. For accessibility reasons, always include a label input unless explicitly informed to do otherwise by design or\naccessibility teams.\n7. The lg variant is usually suitable for containers or block level loading placeholders while the sm size is\nmeant for more inline loading states.",
      "attributes": [
        {
          "name": "determinate",
          "description": "Mode of the spinner, defaults to indeterminate.\nIf true, renders a standard progress indicator, fills via the progress property from 0% to 100%.\nIf false or undefined, renders indeterminate spinner which animates in a spinning motion until component is\ndestroyed.",
          "type": "boolean | undefined"
        },
        {
          "name": "inverse",
          "description": "Inverse property used for dark backgrounds.",
          "type": "boolean | undefined"
        },
        {
          "name": "neutral",
          "description": "Neutral property used for secondary neutral loading button.",
          "type": "boolean | undefined"
        },
        {
          "name": "buttonVariant",
          "description": "Property that specifies which button variant is using the loading spinner",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | undefined"
        },
        {
          "name": "label",
          "description": "Label to show along with progress indicator.\nThis is required to meet accessibility requirements for this component.",
          "type": "string | undefined"
        },
        {
          "name": "progress",
          "description": "Progress to display, between 0 and 100. Requires determinate property to be set to true.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "size",
          "description": "Size of the progress indicator and position of the label, if a label has been defined using the label property.\n- **large** renders a large progress indicator at 72px in width/height with the label below.\n- **small** renders a small progress indicator at 24px in width/height with the label to the right.",
          "type": "\"large\" | \"small\" | undefined",
          "default": "\"large\""
        }
      ],
      "properties": [
        {
          "name": "styles",
          "type": "CSSResult",
          "default": "\"unsafeCSS(styles)\""
        },
        {
          "name": "determinate",
          "attribute": "determinate",
          "description": "Mode of the spinner, defaults to indeterminate.\nIf true, renders a standard progress indicator, fills via the progress property from 0% to 100%.\nIf false or undefined, renders indeterminate spinner which animates in a spinning motion until component is\ndestroyed.",
          "type": "boolean | undefined"
        },
        {
          "name": "inverse",
          "attribute": "inverse",
          "description": "Inverse property used for dark backgrounds.",
          "type": "boolean | undefined"
        },
        {
          "name": "neutral",
          "attribute": "neutral",
          "description": "Neutral property used for secondary neutral loading button.",
          "type": "boolean | undefined"
        },
        {
          "name": "buttonVariant",
          "attribute": "buttonVariant",
          "description": "Property that specifies which button variant is using the loading spinner",
          "type": "\"primary\" | \"secondary\" | \"tertiary\" | undefined"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Label to show along with progress indicator.\nThis is required to meet accessibility requirements for this component.",
          "type": "string | undefined"
        },
        {
          "name": "progress",
          "attribute": "progress",
          "description": "Progress to display, between 0 and 100. Requires determinate property to be set to true.",
          "type": "number",
          "default": "0"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size of the progress indicator and position of the label, if a label has been defined using the label property.\n- **large** renders a large progress indicator at 72px in width/height with the label below.\n- **small** renders a small progress indicator at 24px in width/height with the label to the right.",
          "type": "\"large\" | \"small\" | undefined",
          "default": "\"large\""
        }
      ]
    },
    {
      "name": "cre8-logo",
      "path": "./../components/logo/logo.ts",
      "attributes": [
        {
          "name": "href",
          "description": "Logo link",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "href",
          "attribute": "href",
          "description": "Logo link",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The logo element"
        }
      ]
    },
    {
      "name": "cre8-main",
      "path": "./../components/main/main.ts",
      "attributes": [
        {
          "name": "fullHeight",
          "description": "Full height variant\n1) Sets the height to 100%",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "fullHeight",
          "attribute": "fullHeight",
          "description": "Full height variant\n1) Sets the height to 100%",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The main content"
        }
      ]
    },
    {
      "name": "cre8-modal",
      "path": "./../components/modal/modal.ts",
      "description": "Modal component should be used in all modal situations.\nIt is natuarally composable and can even have a custom header and remove the close button.\n(note: adding `slot=\"header\"` will insert the given element into the header section of the modal,\nsame for `slot=\"footer\"` and no given slot name will inset it into the body)\n\nIf it is desired to create a utility modal. cre8Modal requires a status value (see props table below,\nand a UtilityModalTitle since all utility modals have a cre8-heading)",
      "attributes": [
        {
          "name": "isActive",
          "description": "Is Active attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "status",
          "description": "Status Types\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**default (no value)** renders a default modal</li>\n<li>**error** renders an error modal</li>\n<li>**warning** renders a warning modal</li>\n<li>**success** renders a success modal</li>\n<li>**info** renders an info modal</li>\n<li>**help** renders an help modal</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"error\" | \"info\" | \"warning\" | \"success\" | \"help\" | undefined"
        },
        {
          "name": "utilityModalTitle",
          "description": "Utility Modal Heading (String)",
          "type": "string"
        },
        {
          "name": "notDismissible",
          "description": "Not dismissible modal",
          "type": "boolean | undefined"
        },
        {
          "name": "closeButtonText",
          "description": "Close Button Text",
          "type": "string",
          "default": "\"close\""
        },
        {
          "name": "closeButtonIcon",
          "description": "Close Button Icon",
          "type": "string",
          "default": "\"close\""
        },
        {
          "name": "ariaLabel",
          "description": "Modal Aria Label - This is required for accessibility and provides context of the entire modal!",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Is Active attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "status",
          "attribute": "status",
          "description": "Status Types\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**default (no value)** renders a default modal</li>\n<li>**error** renders an error modal</li>\n<li>**warning** renders a warning modal</li>\n<li>**success** renders a success modal</li>\n<li>**info** renders an info modal</li>\n<li>**help** renders an help modal</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"error\" | \"info\" | \"warning\" | \"success\" | \"help\" | undefined"
        },
        {
          "name": "utilityModalTitle",
          "attribute": "utilityModalTitle",
          "description": "Utility Modal Heading (String)",
          "type": "string"
        },
        {
          "name": "notDismissible",
          "attribute": "notDismissible",
          "description": "Not dismissible modal",
          "type": "boolean | undefined"
        },
        {
          "name": "closeButtonText",
          "attribute": "closeButtonText",
          "description": "Close Button Text",
          "type": "string",
          "default": "\"close\""
        },
        {
          "name": "closeButtonIcon",
          "attribute": "closeButtonIcon",
          "description": "Close Button Icon",
          "type": "string",
          "default": "\"close\""
        },
        {
          "name": "ariaLabel",
          "attribute": "ariaLabel",
          "description": "Modal Aria Label - This is required for accessibility and provides context of the entire modal!",
          "type": "string"
        },
        {
          "name": "mapStatusToIconModal",
          "description": "Maps modal icons and modal status variants to what the alt text of the related icon should be\nsee: (https://digital.cigna.com/patterns-and-Components/informational-display/alerts-and-notifications#query=alerts)\nthis provides the recommendated alt text of different statuses",
          "type": "(status: string) => TemplateResult<1> | null",
          "default": "\"(status: string) => {\\n    switch (status) {\\n        case 'error':\\n            return html`<cre8-icon class=\\\"cre8-modal-icon\\\" svg='${svgError}' aria-hidden='true'></cre8-icon>`;\\n        case 'success':\\n            return html`<cre8-icon class=\\\"cre8-modal-icon\\\" svg='${svgCheckCircle}' aria-hidden='true'></cre8-icon>`;\\n        case 'warning':\\n            return html`<cre8-icon class=\\\"cre8-modal-icon\\\" svg='${svgWarningFilled}' aria-hidden='true'></cre8-icon>`;\\n        case 'help':\\n            return html`<cre8-icon class=\\\"cre8-modal-icon\\\" svg='${svgHelp}' aria-hidden='true'></cre8-icon>`;\\n        case 'info':\\n            return html`<cre8-icon class=\\\"cre8-modal-icon\\\" svg='${svgInfoFilled}' aria-hidden='true'></cre8-icon>`;\\n        default:\\n            return null;\\n    }\\n}\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-multi-select",
      "path": "./../components/multi-select/multi-select.ts",
      "description": "Multiselect is used when multiple options can be chosen from a static dropdown\nThis component has a list of items in the dropdown that can be added as \"selected tags\"\nThe checkbox will always reflect the selected nature of the item and is not removed\nfrom the dropdown when clicked, the tags will be added and removed based on their state.\n\nEvent `selectedItemsChange` emits whenever a tag is added or remove from the list and the\ncurrent list after the change is given in the detail.",
      "attributes": [
        {
          "name": "items",
          "description": "The list of string items the user can choose in the dropdown\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
          "type": "string[]",
          "default": "[]"
        },
        {
          "name": "preselectedItems",
          "description": "The list of string items that are initially in the selected list of tags\nNote: This list MUST be a subset of the array of items to function.\ni.e. if items=['cat', 'dog', 'bird'], preselectedItems=['cat'] is valid\nwhile preselectedItems=['cat', 'goat'] is not and will break the component.\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
          "type": "string[]"
        },
        {
          "name": "label",
          "description": "The required label that appears above the multiselect",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the select",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Optional field note text can be added to provide additional field guidance.",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "disabled",
          "description": "The disabled attribute on the select",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "items",
          "attribute": "items",
          "description": "The list of string items the user can choose in the dropdown\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
          "type": "string[]",
          "default": "[]"
        },
        {
          "name": "selectedTagItems",
          "type": "string[]",
          "default": "[]"
        },
        {
          "name": "preselectedItems",
          "attribute": "preselectedItems",
          "description": "The list of string items that are initially in the selected list of tags\nNote: This list MUST be a subset of the array of items to function.\ni.e. if items=['cat', 'dog', 'bird'], preselectedItems=['cat'] is valid\nwhile preselectedItems=['cat', 'goat'] is not and will break the component.\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)",
          "type": "string[]"
        },
        {
          "name": "dropdownOpen",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The required label that appears above the multiselect",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the select",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Optional field note text can be added to provide additional field guidance.",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "attribute": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "The disabled attribute on the select",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "attribute": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "selectedItemsChange"
        }
      ]
    },
    {
      "name": "cre8-nav-container",
      "path": "./../components/nav-container/nav-container.ts",
      "slots": [
        {
          "name": "",
          "description": "The navigation container content"
        }
      ]
    },
    {
      "name": "cre8-page-header",
      "path": "./../components/page-header/page-header.ts",
      "attributes": [
        {
          "name": "heading",
          "description": "Page header title",
          "type": "string",
          "default": "\"Page header title\""
        }
      ],
      "properties": [
        {
          "name": "heading",
          "attribute": "heading",
          "description": "Page header title",
          "type": "string",
          "default": "\"Page header title\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The page header content"
        }
      ]
    },
    {
      "name": "cre8-pagination",
      "path": "./../components/pagination/pagination.ts",
      "description": "The Pagination component is used to split up a large amount of results\n by showing only a certain amount on each page. You can cycle through\n the pages using Page Numbers, Next and Previous Buttons, or optional\n First Page and Last Page Buttons. This component is also used by Table\n to cycle through rows of results. Pagination has 3 display options:\n\n**default**:  Can contain up to seven Page Numbers (ellipses included)\n at a time flanked by Next and Previous Buttons. When there are more than\n seven pages, numbers start getting replaced by ellipses. Use this option\n when you have a lot of horizontal space in a layout. It should not be used\n for mobile web layouts since its buttons are smaller than the minimum touch target of 44px.\n The component has built in responsivity to mobile page size so you dont have tohandle this\n seperately\n\n\n**compact** : Best used as a summary of where you are among pages or table rows flanked by\nPrevious and Next Buttons. Use this option when you have limited horizontal space but still\nneed to show where users are among results. Great for mobile layouts.\n\n\n**icon-only** : Use this option in very tight spaces when it’s not required to show users\nwhere they are among results. Great for mobile layouts.\n\n\n## HOW TO USE\n\nSelect an option from the “display” dropdown depending on layout width\nSelect where your current page is from the “Page” dropdown\nTo show less pages when using Full Numbers, use the \"visiblePages” toggles\nTo hide the First Page and Last Page Buttons, turn on the “hideFirstLastButton” toggle\nTo change the states of page numbers or buttons, interact with the buttond to invoke each “State”\nWhen using Compact Numbers, you can choose between “compact” and “icon-only” formats\n\n\n## ACCESSIBILITY NOTE\n\nTo best orient people using screen readers, push focus to the top of\nthe list of results after any of the pagination buttons have been triggered,\n**except for the currently selected one**. Focus target could be a visual results heading,\nor the top heading of the results container of the page selected\nvia a programmatic selector, e.g. < section id=“results” aria-label=\"results-section\" > or\n< div role= “group” aria-label=“results” >.",
      "attributes": [
        {
          "name": "totalResults",
          "description": "Input the total number of elements are returned from consuming app e.g. search results",
          "type": "number"
        },
        {
          "name": "pageSize",
          "description": "how many elements will displayVariant per page, indicated by business to typically be 20",
          "type": "number"
        },
        {
          "name": "visiblePages",
          "description": "Controls how many page buttons are displayVarianted on the page\nat once, if container size permits. recommended max = 5 pages",
          "type": "number | undefined",
          "default": "5"
        },
        {
          "name": "display",
          "description": "(optional) prop that allows for a compact and icon-only variant both\nfor mobile screen-sizes and for use in certain contexts as guided by design,\nthe component size will show 'default' in the absence of a value on desktop and\n'compact' on smaller views.",
          "type": "\"compact\" | \"icon-only\" | \"default\" | undefined"
        },
        {
          "name": "hideLastAndFirstButtons",
          "type": "boolean | undefined"
        },
        {
          "name": "currentPage",
          "type": "number"
        }
      ],
      "properties": [
        {
          "name": "elementDefinitions",
          "type": "{ 'cre8-button': typeof cre8Button; }",
          "default": "{\"cre8-button\":\"cre8Button\"}"
        },
        {
          "name": "totalResults",
          "attribute": "totalResults",
          "description": "Input the total number of elements are returned from consuming app e.g. search results",
          "type": "number"
        },
        {
          "name": "pageSize",
          "attribute": "pageSize",
          "description": "how many elements will displayVariant per page, indicated by business to typically be 20",
          "type": "number"
        },
        {
          "name": "visiblePages",
          "attribute": "visiblePages",
          "description": "Controls how many page buttons are displayVarianted on the page\nat once, if container size permits. recommended max = 5 pages",
          "type": "number | undefined",
          "default": "5"
        },
        {
          "name": "display",
          "attribute": "display",
          "description": "(optional) prop that allows for a compact and icon-only variant both\nfor mobile screen-sizes and for use in certain contexts as guided by design,\nthe component size will show 'default' in the absence of a value on desktop and\n'compact' on smaller views.",
          "type": "\"compact\" | \"icon-only\" | \"default\" | undefined"
        },
        {
          "name": "windowWidth",
          "type": "number"
        },
        {
          "name": "buttons",
          "type": "cre8Button[]"
        },
        {
          "name": "hideLastAndFirstButtons",
          "attribute": "hideLastAndFirstButtons",
          "type": "boolean | undefined"
        },
        {
          "name": "currentPage",
          "attribute": "currentPage",
          "type": "number"
        },
        {
          "name": "maxVisiblePages",
          "type": "number | undefined"
        }
      ],
      "events": [
        {
          "name": "pagination.click"
        }
      ],
      "cssProperties": [
        {
          "name": "--pagination-display",
          "description": "controls the display css property"
        },
        {
          "name": "--pagination-justify-content",
          "description": "controls horizontal alignment of pagination"
        },
        {
          "name": "--pagination-align-items",
          "description": "controls vertical alignment of pagination"
        }
      ],
      "cssParts": [
        {
          "name": "icon",
          "description": "distinguishes the page buttons from the icon buttons"
        }
      ]
    },
    {
      "name": "cre8-percent-bar",
      "path": "./../components/percent-bar/percent-bar.ts",
      "description": "The percent bar visually indicates a user's current progress and has a few features: a basic display bar with\na percentage, an actionable icon that allows a user to revisit a prior step and an actionable link that\nallows a user save their progress before exiting.",
      "attributes": [
        {
          "name": "value",
          "description": "The current step the user is on.",
          "type": "number"
        },
        {
          "name": "max",
          "description": "The total number of steps in the multistep process.",
          "type": "number"
        },
        {
          "name": "disableActionLeft",
          "description": "The action-left icon-only tertiary button in the percent bar controls can be disabled.",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "value",
          "attribute": "value",
          "description": "The current step the user is on.",
          "type": "number"
        },
        {
          "name": "max",
          "attribute": "max",
          "description": "The total number of steps in the multistep process.",
          "type": "number"
        },
        {
          "name": "disableActionLeft",
          "attribute": "disableActionLeft",
          "description": "The action-left icon-only tertiary button in the percent bar controls can be disabled.",
          "type": "boolean | undefined"
        }
      ],
      "events": [
        {
          "name": "leftActionButtonClick"
        }
      ]
    },
    {
      "name": "cre8-popover",
      "path": "./../components/popover/popover.ts",
      "description": "The Popover is for progressive disclosure of relevant content often hidden behind a help or info icon.\nIts content should be no longer than 3-4 lines in addition to a line of heading text and an optional button.",
      "attributes": [
        {
          "name": "heading",
          "description": "The heading text that appears at the top of the popover panel. Should only be 2-3 lines max.",
          "type": "string | undefined"
        },
        {
          "name": "position",
          "description": "Positions the popover panel absolutely to the trigger\n- **default** positions the popover panel below the trigger\n- **top** positions the popover panel below the trigger\n- **left** positions the popover panel below the trigger\n- **right** positions the popover panel below the trigger",
          "type": "string | undefined"
        },
        {
          "name": "isVisibleOnScroll",
          "description": "Set to prevent the popover panel from hiding on scroll",
          "type": "boolean | undefined"
        },
        {
          "name": "isDynamic",
          "description": "The dynamic state for the popover\n- If true, the popover panel placement is determined by its position in the viewport\n- If false, the popover panel placement will be placed according to the position value",
          "type": "boolean | undefined"
        },
        {
          "name": "isActiveDynamic",
          "description": "The dynamic active state\n_This property is dynamically set_",
          "type": "boolean | undefined"
        },
        {
          "name": "isActive",
          "description": "The active state for the popover\n- If true, the popover panel is visible\n- If false, the popover panel is hidden\n\n_This property is dynamically set_",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "heading",
          "attribute": "heading",
          "description": "The heading text that appears at the top of the popover panel. Should only be 2-3 lines max.",
          "type": "string | undefined"
        },
        {
          "name": "position",
          "attribute": "position",
          "description": "Positions the popover panel absolutely to the trigger\n- **default** positions the popover panel below the trigger\n- **top** positions the popover panel below the trigger\n- **left** positions the popover panel below the trigger\n- **right** positions the popover panel below the trigger",
          "type": "string | undefined"
        },
        {
          "name": "isVisibleOnScroll",
          "attribute": "isVisibleOnScroll",
          "description": "Set to prevent the popover panel from hiding on scroll",
          "type": "boolean | undefined"
        },
        {
          "name": "isDynamic",
          "attribute": "isDynamic",
          "description": "The dynamic state for the popover\n- If true, the popover panel placement is determined by its position in the viewport\n- If false, the popover panel placement will be placed according to the position value",
          "type": "boolean | undefined"
        },
        {
          "name": "isActiveDynamic",
          "attribute": "isActiveDynamic",
          "description": "The dynamic active state\n_This property is dynamically set_",
          "type": "boolean | undefined"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "The active state for the popover\n- If true, the popover panel is visible\n- If false, the popover panel is hidden\n\n_This property is dynamically set_",
          "type": "boolean | undefined"
        },
        {
          "name": "isRTL",
          "description": "Query the document direction value\n<br/><br/> _*This property is dynamically set_",
          "type": "boolean"
        },
        {
          "name": "handleOnClickOutside",
          "description": "Handle click outside the component\n1. Close the show/hide popover panel on click outside\n2. If the popover panel is already closed then we don't care about outside clicks and we can bail early\n3. By the time a user clicks on the page the shadowRoot will almost certainly be\ndefined, but TypeScript isn't that trusting and sees this.shadowRoot as possibly\nundefined. To work around that we'll check that we have a shadowRoot (and a\nrendered .host) element here to appease the TypeScript compiler. This should never\nactually be shown or run for a human end user.\n4. Check to see if we clicked inside the active panel\n5. If the panel is active and we've clicked outside of the panel then it should be closed.",
          "type": "(e: MouseEvent) => void",
          "default": "\"(e: MouseEvent) => {\\n    /* 2 */\\n      if (!this.isActive) {\\n          return;\\n      }\\n\\n    /* 3 */\\n      if (!this.shadowRoot?.host) {\\n          throw Error('Could not determine panel context during click handler');\\n      }\\n\\n    /* 4 */\\n      const didClickInside = e.composedPath().includes(this.shadowRoot.host);\\n\\n    /* 5 */\\n      if (!(e.target === document.querySelector('html') && e.clientX >= document.documentElement.offsetWidth)) {\\n          if (this.isActive && !didClickInside) {\\n              this._toggleActive();\\n          }\\n      }\\n  }\""
        },
        {
          "name": "removeActiveOnScroll",
          "description": "Remove Active State on Scroll\n1. If a scroll event is fired and visibileOnScroll is not true, remove the active state\n2. If the popover height is less than the window height, then allow the active to remove on scroll",
          "type": "() => void",
          "default": "\"() => {\\n    /* 1 */\\n      if (this.isActive && !this.isVisibleOnScroll) {\\n      /* 2 */\\n          const popoverPanel = this._cre8PopoverPanel.getBoundingClientRect();\\n          const popoverTrigger = this._cre8Popover;\\n          const popoverHeight = popoverTrigger.clientHeight + popoverPanel.height + popoverPanel.top;\\n\\n          if (popoverHeight < window.innerHeight) {\\n              this._toggleActive();\\n          }\\n      }\\n  }\""
        },
        {
          "name": "removeActive",
          "description": "Remove Active State\n1. If a specific event is fired, remove the active state.",
          "type": "() => void",
          "default": "\"() => {\\n      if (this.isActive) {\\n          this._toggleActive();\\n      }\\n  }\""
        }
      ],
      "events": [
        {
          "name": "open"
        },
        {
          "name": "close"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-primary-nav-item",
      "path": "./../components/primary-nav-item/primary-nav-item.ts",
      "attributes": [
        {
          "name": "text",
          "description": "Primary nav item text",
          "type": "string",
          "default": "\"Nav item\""
        },
        {
          "name": "href",
          "description": "Primary nav item href",
          "type": "string",
          "default": "\"#\""
        },
        {
          "name": "iconName",
          "description": "Icon name",
          "type": "string | undefined",
          "default": "\"caret-down\""
        },
        {
          "name": "megaMenu",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "Primary nav item text",
          "type": "string",
          "default": "\"Nav item\""
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "Primary nav item href",
          "type": "string",
          "default": "\"#\""
        },
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "Icon name",
          "type": "string | undefined",
          "default": "\"caret-down\""
        },
        {
          "name": "megaMenu",
          "attribute": "megaMenu",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "boolean | undefined"
        },
        {
          "name": "isActive",
          "description": "Append to the class name. Used for passing in utility classes",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The label for the navigation item"
        }
      ]
    },
    {
      "name": "cre8-primary-nav",
      "path": "./../components/primary-nav/primary-nav.ts",
      "attributes": [
        {
          "name": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "behavior",
          "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"side-by-side\" | undefined"
        },
        {
          "name": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"main\""
        }
      ],
      "properties": [
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavior variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**side-by-side** keeps the primary nav item always in a horizontal pattern</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"side-by-side\" | undefined"
        },
        {
          "name": "navAriaLabel",
          "attribute": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"main\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The primary navigation items"
        }
      ]
    },
    {
      "name": "cre8-progress-meter",
      "path": "./../components/progress-meter/progress-meter.ts",
      "description": "A progress meter provides feedback that the system is working and gives\nthe user an indication of how much time they will wait.\nThis indicator should be used when the system response time is longer and determinable.",
      "attributes": [
        {
          "name": "status",
          "description": "Progress Status\n- **Default** renders a meter with default status fill\n- **Error** renders a meter with an error status fill\n- **Warning** renders a meter with a warning status\n- **Success** renders a meter with a success status fill",
          "type": "status"
        },
        {
          "name": "knockout",
          "description": "Determines if the progress meter is displayed on a dark background (uses knockout colors for contrast)",
          "type": "boolean"
        },
        {
          "name": "max",
          "description": "The max number for the progress bar (defaulted to 100 to match percentages)",
          "type": "number",
          "default": "100"
        },
        {
          "name": "value",
          "description": "The the percentage of the bar that is filled in (defaulted to match percentages)\nI.E a value of 50 with a 100 max would result in half the meter being filled",
          "type": "number"
        },
        {
          "name": "fieldId",
          "description": "Progress Meter FieldId",
          "type": "string"
        },
        {
          "name": "name",
          "description": "Progress Meter name",
          "type": "string"
        },
        {
          "name": "label",
          "description": "Progress Meter label",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "status",
          "attribute": "status",
          "description": "Progress Status\n- **Default** renders a meter with default status fill\n- **Error** renders a meter with an error status fill\n- **Warning** renders a meter with a warning status\n- **Success** renders a meter with a success status fill",
          "type": "status"
        },
        {
          "name": "knockout",
          "attribute": "knockout",
          "description": "Determines if the progress meter is displayed on a dark background (uses knockout colors for contrast)",
          "type": "boolean"
        },
        {
          "name": "max",
          "attribute": "max",
          "description": "The max number for the progress bar (defaulted to 100 to match percentages)",
          "type": "number",
          "default": "100"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The the percentage of the bar that is filled in (defaulted to match percentages)\nI.E a value of 50 with a 100 max would result in half the meter being filled",
          "type": "number"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Progress Meter FieldId",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Progress Meter name",
          "type": "string"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Progress Meter label",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-progress-steps-item",
      "path": "./../components/progress-steps-item/progress-steps-item.ts",
      "description": "The Progress Steps Item component is used to display a single step in a multi-step process.\nIt should be used as a child component of `cre8-progress-steps`.\nThese Components serve a contextual purpose and don't provide any functionality.",
      "attributes": [
        {
          "name": "message",
          "description": "Optional message to display under the step name.",
          "type": "string"
        },
        {
          "name": "name",
          "description": "The name of the step.",
          "type": "string"
        },
        {
          "name": "state",
          "description": "The state of the step: 'complete', 'current', 'error',' incomplete', 'warning';",
          "type": "string"
        },
        {
          "name": "svg",
          "description": "An SVG string to use as the step icon.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "message",
          "attribute": "message",
          "description": "Optional message to display under the step name.",
          "type": "string"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The name of the step.",
          "type": "string"
        },
        {
          "name": "state",
          "attribute": "state",
          "description": "The state of the step: 'complete', 'current', 'error',' incomplete', 'warning';",
          "type": "string"
        },
        {
          "name": "svg",
          "attribute": "svg",
          "description": "An SVG string to use as the step icon.",
          "type": "string"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-progress-steps",
      "path": "./../components/progress-steps/progress-steps.ts",
      "description": "The Progress Steps component is used to display where a user is in a multistep process.\nIt clearly indicates the total number of steps, which steps are complete and incomplete,\nand which step you’re currently on. They help users estimate how long a task will take and can be\nused to track status on orders.\n\nThe Progress Steps component should be used as a parent component for `cre8-progress-steps-item` components.\nThese Components serve a contextual purpose and don't provide any functionality.\n\n# How to Use\n\nProgress Steps is used when there is ample horizontal space and two to six steps. It displays each step by name\nand number to help users understand exactly where they are in a process. It is the preferred option for desktop.\nProgress Steps should change to Compact Steps on mobile web to conserve space.\n\nProgress Steps can also be used to track order status. It provides a quick visual of how an order is progressing\nwith options to alert users of any problems along the way. When used for order status, Progress Steps should\nchange to Vertical Steps on mobile web to conserve space while allowing alerts and messages to remain visible.",
      "slots": [
        {
          "name": "",
          "description": "The Progress Steps Item components that represent the steps in the multistep process."
        }
      ]
    },
    {
      "name": "cre8-radio-field-item",
      "path": "./../components/radio-field-item/radio-field-item.ts",
      "description": "A Radio Field Item adds a radio button to a Radio Field. Radio buttons let a user choose only one of several\noptions. Do not use a single radio button, because once selected, it cannot be de-selected. If the user can only\nchoose one, none or many options, use Checkbox instead.",
      "attributes": [
        {
          "name": "ariaDescribedBy",
          "description": "Identifies the element that provides a detailed, extended description for the object.",
          "type": "string"
        },
        {
          "name": "checked",
          "description": "A Boolean attribute which, if present, sets the radio button as selected.",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with\nthe form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
          "type": "string | undefined"
        },
        {
          "name": "fieldNote",
          "description": "A FieldNote can be placed to provide guidance. It's frequently used to in the context of form fields for extra\ninformation or validation messages.",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteIconName",
          "description": "Sets the item fieldnote icon.\n\n- **check** renders a badge with success state treatment\n- **error** renders a badge with error state treatment",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteKnockout",
          "description": "Radio item fieldnote knockout",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIsError",
          "description": "Sets the error state of the fieldnote.",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "The isError attribute is used to indicate an error state related to the radio button.",
          "type": "boolean"
        },
        {
          "name": "isSuccess",
          "description": "The isSuccess attribute is used to indicate a success state related to the radio button.",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "The label attribute is used to assign a value to the label element corresponding to this radio button.",
          "type": "string | undefined"
        },
        {
          "name": "name",
          "description": "The name attribute is used to assign a value to the name attribute of the input element in the DOM.",
          "type": "string | undefined"
        },
        {
          "name": "required",
          "description": "Required attribute",
          "type": "boolean"
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Identifies the element that provides a detailed, extended description for the object.",
          "type": "string"
        },
        {
          "name": "checked",
          "attribute": "checked",
          "description": "A Boolean attribute which, if present, sets the radio button as selected.",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with\nthe form. The user can neither edit nor focus on the control, nor its form control descendants.",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
          "type": "string | undefined"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "A FieldNote can be placed to provide guidance. It's frequently used to in the context of form fields for extra\ninformation or validation messages.",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteIconName",
          "attribute": "fieldNoteIconName",
          "description": "Sets the item fieldnote icon.\n\n- **check** renders a badge with success state treatment\n- **error** renders a badge with error state treatment",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteKnockout",
          "attribute": "fieldNoteKnockout",
          "description": "Radio item fieldnote knockout",
          "type": "boolean"
        },
        {
          "name": "fieldNoteIsError",
          "attribute": "fieldNoteIsError",
          "description": "Sets the error state of the fieldnote.",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "The isError attribute is used to indicate an error state related to the radio button.",
          "type": "boolean"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "The isSuccess attribute is used to indicate a success state related to the radio button.",
          "type": "boolean"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The label attribute is used to assign a value to the label element corresponding to this radio button.",
          "type": "string | undefined"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The name attribute is used to assign a value to the name attribute of the input element in the DOM.",
          "type": "string | undefined"
        },
        {
          "name": "required",
          "attribute": "required",
          "description": "Required attribute",
          "type": "boolean"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "type": "string",
          "default": "\"radio\""
        },
        {
          "name": "field",
          "description": "Get the radio field item input",
          "type": "HTMLInputElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-radio-field",
      "path": "./../components/radio-field/radio-field.ts",
      "description": "Radio Field is the parent container for `radio-field-item`.\nIt is required to allow for grouping numerous radio fields that need additional context (in the form of `<legend>`).\nIt also provides accessibility roles, aria attributes and field note messaging on the group.\n\nSee [radio-field-item](?path=/story/cre8-components-radio-field-item--default) for more guidance on its usage.",
      "attributes": [
        {
          "name": "fieldNote",
          "description": "Radio Field Note",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Radio container fieldnote aria describe by",
          "type": "string"
        },
        {
          "name": "fieldNoteIconName",
          "description": "Radio container fieldnote icon name",
          "type": "string"
        },
        {
          "name": "fieldNoteKnockout",
          "description": "Radio container fieldnote knockout",
          "type": "boolean"
        },
        {
          "name": "isSuccess",
          "description": "Radio container fieldnote isSuccess",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Radio container fieldnote isError",
          "type": "boolean"
        },
        {
          "name": "label",
          "description": "Radio field legend label",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Radio Field Note",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Radio container fieldnote aria describe by",
          "type": "string"
        },
        {
          "name": "fieldNoteIconName",
          "attribute": "fieldNoteIconName",
          "description": "Radio container fieldnote icon name",
          "type": "string"
        },
        {
          "name": "fieldNoteKnockout",
          "attribute": "fieldNoteKnockout",
          "description": "Radio container fieldnote knockout",
          "type": "boolean"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Radio container fieldnote isSuccess",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Radio container fieldnote isError",
          "type": "boolean"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Radio field legend label",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content, which should be a set of `radio-field-item`s"
        }
      ]
    },
    {
      "name": "cre8-remove-tag",
      "path": "./../components/remove-tag/remove-tag.ts",
      "description": "Clicking a Remove Tag causes it to disappear from the page or field (in the case of Multi-Select).\nThese tags always display a \"Close\" icon.",
      "attributes": [
        {
          "name": "text",
          "description": "The tag text",
          "type": "string | undefined"
        },
        {
          "name": "color",
          "description": "The tag color scheme\n\n - **neutral** should be used when doing non-link actions such as filters or multi-select, within forms, etc.\n - **neutral-hybrid** should be used for when tags are doing an action like a button or a link\n - **branded** should be used like Neutral, but for marketing / actionable items",
          "type": "Color",
          "default": "\"neutral\""
        },
        {
          "name": "shape",
          "description": "The tag shape\n\n- **round** will give the tag a rounded border\n- **square** will give the tag a squared border",
          "type": "Shape",
          "default": "\"round\""
        },
        {
          "name": "disabled",
          "description": "Disabled state for remove tag",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "description": "The tag text",
          "type": "string | undefined"
        },
        {
          "name": "color",
          "attribute": "color",
          "description": "The tag color scheme\n\n - **neutral** should be used when doing non-link actions such as filters or multi-select, within forms, etc.\n - **neutral-hybrid** should be used for when tags are doing an action like a button or a link\n - **branded** should be used like Neutral, but for marketing / actionable items",
          "type": "Color",
          "default": "\"neutral\""
        },
        {
          "name": "shape",
          "attribute": "shape",
          "description": "The tag shape\n\n- **round** will give the tag a rounded border\n- **square** will give the tag a squared border",
          "type": "Shape",
          "default": "\"round\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Disabled state for remove tag",
          "type": "boolean | undefined"
        }
      ],
      "events": [
        {
          "name": "removeTagClicked"
        }
      ]
    },
    {
      "name": "cre8-section",
      "path": "./../components/section/section.ts",
      "description": "The section component acts as a block level HTML element that takes a 'headline' property\nthat renders the section's heading which wraps around any HTML template\nthat is found under this heading in the page layout.\n\n# How to Use\n1. Use the headline attribute to create the section header, or if you need a more custom header\n   there is a slot=\"header\" that you can target for inserting a custom template.\n2. For the main body contents, any html template can be placed inside the cre8-section component\n   and will automatically render below the header.\n\nNote: for a section with a dark background please control this with the internal Components' inverted attributes.",
      "attributes": [
        {
          "name": "headline",
          "description": "The Headline will be rendered as the Section Headline with the correct brand styling applied",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "headline",
          "attribute": "headline",
          "description": "The Headline will be rendered as the Section Headline with the correct brand styling applied",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The content of the section should go here.\nIt could be a cre8-text-passage, a cre8-card or any other block level html."
        }
      ]
    },
    {
      "name": "cre8-select-tile-list",
      "path": "./../components/select-tile-list/select-tile-list.ts",
      "description": "Select Tile List is a container design to hold multiple Select Tile Components.",
      "attributes": [
        {
          "name": "variant",
          "description": "Whether to show the tiles side by side (columns) or stacked vertically (rows).",
          "type": "\"columns\" | \"rows\"",
          "default": "\"columns\""
        },
        {
          "name": "label",
          "description": "Select Tile container label",
          "type": "string | undefined"
        },
        {
          "name": "fieldNote",
          "description": "Select Tile container fieldnote",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Select Tile container fieldnote aria describe by",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteIconName",
          "description": "Select Tile container fieldnote icon name",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteKnockout",
          "description": "Select Tile container fieldnote knockout",
          "type": "boolean | undefined"
        },
        {
          "name": "fieldNoteIsSuccess",
          "description": "Select Tile container fieldnote isSuccess",
          "type": "boolean | undefined"
        },
        {
          "name": "fieldNoteIsError",
          "description": "Select Tile container fieldnote isError",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Whether to show the tiles side by side (columns) or stacked vertically (rows).",
          "type": "\"columns\" | \"rows\"",
          "default": "\"columns\""
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "Select Tile container label",
          "type": "string | undefined"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Select Tile container fieldnote",
          "type": "string | undefined"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Select Tile container fieldnote aria describe by",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteIconName",
          "attribute": "fieldNoteIconName",
          "description": "Select Tile container fieldnote icon name",
          "type": "string | undefined"
        },
        {
          "name": "fieldNoteKnockout",
          "attribute": "fieldNoteKnockout",
          "description": "Select Tile container fieldnote knockout",
          "type": "boolean | undefined"
        },
        {
          "name": "fieldNoteIsSuccess",
          "attribute": "fieldNoteIsSuccess",
          "description": "Select Tile container fieldnote isSuccess",
          "type": "boolean | undefined"
        },
        {
          "name": "fieldNoteIsError",
          "attribute": "fieldNoteIsError",
          "description": "Select Tile container fieldnote isError",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "\"\"",
          "description": "The default slot norminally contains multiple `<select-tile />` Components."
        }
      ],
      "cssProperties": [
        {
          "name": "--cre8-select-tile-list-item-width",
          "description": "Width of each child. Not used for horizontal."
        }
      ]
    },
    {
      "name": "cre8-select-tile",
      "path": "./../components/select-tile/select-tile.ts",
      "description": "The Select Tile component is a short block of content inside a visual\ncontainer that can be used in place of checkboxes, radio buttons, and\nlinks.  It allows you to add more descriptive and visually appealing\ncontent for these actions while letting you compare different choices\neither side-by-side or on top of each other.\n\nTypically you could use the \"header\" slot for an icon, and the \"title\"\nand \"body\" slots for a content title and body text below it.\n\nThe css parts are shown here wrapped in ::part() because otherwise Storybook\nwon't render them and the slots if they have the same name.\nSee https://developer.mozilla.org/en-US/docs/Web/CSS/::part",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variants\n- **bare** renders a select-tile without a border and without padding around the content\n- **horizontal** renders a select-tile with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a select-tile with header, body, footer\n  oriented in a row rather than a column without a border and without padding around the content",
          "type": "\"bare\" | \"horizontal\" | \"horizontal-bare\" | undefined"
        },
        {
          "name": "variantBreakToVertical",
          "description": "Which breakpoint, if any, to switch to verticial.\nOnly useful for horizontal variants. Defaults to 'sm'.",
          "type": "\"sm\" | \"lg\" | \"none\" | \"md\" | \"sm-2\" | \"xl\" | \"xxl\"",
          "default": "\"sm\""
        },
        {
          "name": "checkPosition",
          "description": "Where does the checkmark or radio button go?\nIt disappears on 'none'. Only top-right is supported for vertical variants.",
          "type": "\"none\" | \"left\" | \"top-right\" | \"right\"",
          "default": "\"right\""
        },
        {
          "name": "radioVariant",
          "description": "In radio mode, whether to use the circle with the dot, or the rounded check.",
          "type": "\"dot\" | \"check\"",
          "default": "\"dot\""
        },
        {
          "name": "align",
          "description": "Align variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**center** renders a select-tile that has center aligned content/text</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"center\" | undefined"
        },
        {
          "name": "isError",
          "description": "Error State",
          "type": "boolean | undefined"
        },
        {
          "name": "disabled",
          "description": "Disabled State",
          "type": "boolean | undefined"
        },
        {
          "name": "required",
          "description": "Required attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "checked",
          "description": "Checked State.\nNote: the `checked` attribute sets the `defaultChecked` property, as well\nas sets the initial value for the `checked` property.",
          "type": "boolean | undefined"
        },
        {
          "name": "fieldId",
          "description": "Select Tile FieldId",
          "type": "string | undefined"
        },
        {
          "name": "name",
          "description": "Name of the form control.",
          "type": "string | undefined"
        },
        {
          "name": "isSuccess",
          "description": "Radio item fieldnote isSuccess",
          "type": "boolean | undefined"
        },
        {
          "name": "type",
          "description": "Should this Select Tile behave as a radio button or a checkbox?",
          "type": "\"checkbox\" | \"radio\"",
          "default": "\"radio\""
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "shadowRootOptions",
          "type": "{ delegatesFocus: boolean; mode: ShadowRootMode; slotAssignment?: SlotAssignmentMode | undefined; }",
          "default": "{\"delegatesFocus\":true}"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n- **bare** renders a select-tile without a border and without padding around the content\n- **horizontal** renders a select-tile with header, body, footer oriented in a row rather than a column\n- **horizontal-bare** renders a select-tile with header, body, footer\n  oriented in a row rather than a column without a border and without padding around the content",
          "type": "\"bare\" | \"horizontal\" | \"horizontal-bare\" | undefined"
        },
        {
          "name": "variantBreakToVertical",
          "attribute": "variantBreakToVertical",
          "description": "Which breakpoint, if any, to switch to verticial.\nOnly useful for horizontal variants. Defaults to 'sm'.",
          "type": "\"sm\" | \"lg\" | \"none\" | \"md\" | \"sm-2\" | \"xl\" | \"xxl\"",
          "default": "\"sm\""
        },
        {
          "name": "checkPosition",
          "attribute": "checkPosition",
          "description": "Where does the checkmark or radio button go?\nIt disappears on 'none'. Only top-right is supported for vertical variants.",
          "type": "\"none\" | \"left\" | \"top-right\" | \"right\"",
          "default": "\"right\""
        },
        {
          "name": "radioVariant",
          "attribute": "radioVariant",
          "description": "In radio mode, whether to use the circle with the dot, or the rounded check.",
          "type": "\"dot\" | \"check\"",
          "default": "\"dot\""
        },
        {
          "name": "align",
          "attribute": "align",
          "description": "Align variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**center** renders a select-tile that has center aligned content/text</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"center\" | undefined"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Error State",
          "type": "boolean | undefined"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Disabled State",
          "type": "boolean | undefined"
        },
        {
          "name": "required",
          "attribute": "required",
          "description": "Required attribute",
          "type": "boolean | undefined"
        },
        {
          "name": "checked",
          "attribute": "checked",
          "description": "Checked State.\nNote: the `checked` attribute sets the `defaultChecked` property, as well\nas sets the initial value for the `checked` property.",
          "type": "boolean | undefined"
        },
        {
          "name": "defaultChecked",
          "description": "The default checked state when the element first renders or is reset.\n\nNote: the attribute is named `checked` and the property is\nnamed `defaultChecked`. This is the same as a regular radio button.",
          "type": "boolean"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "Select Tile FieldId",
          "type": "string | undefined"
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "Name of the form control.",
          "type": "string | undefined"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Radio item fieldnote isSuccess",
          "type": "boolean | undefined"
        },
        {
          "name": "form",
          "description": "The form associated with this field\n\nTOOD: maybe this goes on Cre8FormElement",
          "type": "HTMLFormElement | null"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Should this Select Tile behave as a radio button or a checkbox?",
          "type": "\"checkbox\" | \"radio\"",
          "default": "\"radio\""
        },
        {
          "name": "field",
          "description": "Get the radio field item input",
          "type": "HTMLInputElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "change"
        },
        {
          "name": "input"
        }
      ],
      "slots": [
        {
          "name": "\"\"",
          "description": "The default slot goes into the center, main part of the Select Tile.\n  Consider using title and body instead."
        },
        {
          "name": "header",
          "description": "The top or left part of the Select Tile"
        },
        {
          "name": "footer",
          "description": "The bottom or right part of the Select Tile"
        },
        {
          "name": "title",
          "description": "The title part of the Select Tile, use with body slot and\n        instead of the default slot for appropriate typography."
        },
        {
          "name": "body",
          "description": "The \"body\" part of the Select Tile, which appears under\n         the title slot and receives apporpriate typography."
        }
      ],
      "cssParts": [
        {
          "name": "::part(select-tile)",
          "description": "The main wrapping element"
        },
        {
          "name": "::part(header)",
          "description": "The header element wrapping the left or top element"
        },
        {
          "name": "::part(footer)",
          "description": "The footer element wrapping the right element"
        },
        {
          "name": "::part(body)",
          "description": "The main body of the select-tile, wrapper around the default slot"
        },
        {
          "name": "::part(body-title)",
          "description": "The element that wraps the \"title\" slot"
        },
        {
          "name": "::part(body-body)",
          "description": "The element that wraps the \"body\" slot"
        }
      ]
    },
    {
      "name": "cre8-select",
      "path": "./../components/select/select.ts",
      "description": "The Select control is designed and built to be used for selecting between choices in a form.\nIt is not a Dropdown control which is generally used for displaying lists of choices\nthat act as links or actions, like filter options.\n\nConsider the use of a Select control carefully.\nWhen you have less than 5 options for the user to choose from,\nRadio or Checkbox inputs may be a better choice to display all of the options at once.\nUsers have to slow down to scan a list with more than 15 options,\nso using an option group to give the options hierarchy may help users find their choice faster.\nAlternately, a text input field might be a more appropriate control to use when there are too many options,\nespecially when used with typeahead/auto-complete.\n\n## How to use\n1. The collapsed default state always shows a default placeholder value or a selected value.\n2. Sort list items in a logical order, such as grouping highly related options together,\n   placing most common options first, using alphabetical or numeric orders or dates in chronological order.\n3. A list that includes 6+ items should show a scrollbar.\n4. Users should be able to use a keystroke to quickly jump\n   to selecting an option that begins with the entered letter.\n5. Utilize appropriate native controls for when a user is on a mobile device rather than our custom Select.\n6. Adhere to our common form field conventions and always include a Label,\n   provide short and clear error messages in context, avoid using the Read-only\n   and Disabled states as much as possible, and utilize the info/formatting tip\n   or helpful link rather than placeholder text.",
      "attributes": [
        {
          "name": "items",
          "description": "A mix of cre8SelectOption and cre8SelectOptionGroup definitions:\n- cre8SelectOption\n  - label: option label text - `string`\n  - value: option value - `number | string`\n- cre8SelectOptionGroup\n - optGroupLabel: optgroup label text - `string`\n - options: Array of multiple cre8SelectOption items - `cre8SelectOption[]`",
          "type": "(cre8SelectOption | cre8SelectOptionGroup)[]",
          "default": "[]"
        },
        {
          "name": "label",
          "description": "The required label that appears above the select",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "name",
          "description": "The name property on the select",
          "type": "string"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the select",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "description": "Optional field note text can be added to provide additional field guidance.",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "required",
          "description": "The required attribute on the select",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "description": "The disabled attribute on the select",
          "type": "boolean"
        },
        {
          "name": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "items",
          "attribute": "items",
          "description": "A mix of cre8SelectOption and cre8SelectOptionGroup definitions:\n- cre8SelectOption\n  - label: option label text - `string`\n  - value: option value - `number | string`\n- cre8SelectOptionGroup\n - optGroupLabel: optgroup label text - `string`\n - options: Array of multiple cre8SelectOption items - `cre8SelectOption[]`",
          "type": "(cre8SelectOption | cre8SelectOptionGroup)[]",
          "default": "[]"
        },
        {
          "name": "label",
          "attribute": "label",
          "description": "The required label that appears above the select",
          "type": "string",
          "default": "\"Label\""
        },
        {
          "name": "name",
          "attribute": "name",
          "description": "The name property on the select",
          "type": "string"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the select",
          "type": "string"
        },
        {
          "name": "fieldNote",
          "attribute": "fieldNote",
          "description": "Optional field note text can be added to provide additional field guidance.",
          "type": "string"
        },
        {
          "name": "ariaDescribedBy",
          "attribute": "ariaDescribedBy",
          "description": "Used to connect the field note in text field to the text menu for accessibility",
          "type": "string"
        },
        {
          "name": "validationAriaDescribedBy",
          "attribute": "validationAriaDescribedBy",
          "description": "Additional aria-describedby connection to id for additional success and error notes to be accessible",
          "type": "string"
        },
        {
          "name": "required",
          "attribute": "required",
          "description": "The required attribute on the select",
          "type": "boolean"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "The disabled attribute on the select",
          "type": "boolean"
        },
        {
          "name": "isError",
          "attribute": "isError",
          "description": "Changes the component's treatment to represent an error state",
          "type": "boolean"
        },
        {
          "name": "errorNote",
          "attribute": "errorNote",
          "description": "The error field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "isSuccess",
          "attribute": "isSuccess",
          "description": "Changes the component's treatment to represent a success state",
          "type": "boolean"
        },
        {
          "name": "successNote",
          "attribute": "successNote",
          "description": "The success field note that appears below the default field note",
          "type": "string"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "type": "\"select\"",
          "default": "\"select\""
        },
        {
          "name": "field",
          "description": "Select input querySelector",
          "type": "HTMLSelectElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "change"
        }
      ],
      "slots": [
        {
          "name": "fieldNote",
          "description": "Container for optional field note content"
        }
      ]
    },
    {
      "name": "cre8-skeleton-loader",
      "path": "./../components/skeleton-loader/skeleton-loader.ts",
      "description": "Skeleton Loader allows for the ability to create placeholder UI loading states.\nDevelopers are encouraged to pass into the Skeleton Loader their own parameters\nto create simple (or complex) loading screens.\n\n## How to Use\nSkeleton states are simplified versions of components used on an initial page load\nto indicate that the information on the page has not fully loaded yet.\nThey only appear for only a few seconds, disappearing once components and content populate the page.\nThese loaders use motion to convey that the page is not stuck and that data is still being loaded.\nThis can help to reduce user uncertainty. Skeleton objects should generally be visualized\nby simple primitives which mimic the original content in a recognizable way.\nIt is recommended to use a more elaborate form if that is needed to make the component recognizable.\n\nNever represent toast notifications, overflow menus, dropdown items, modals, and loaders with skeleton states.\nElements inside a modal may have a skeleton state, but the modal itself should not.\n\n**IMPORTANT!** This is not a loading element and will provide no value to a screen reader user,\nthis is a decorative element only!",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variant\n- **rectangle** renders a featureless rectangle as a placeholder for loading elements\n- **square** renders a featureless square as a placeholder for loading elements\n- **circle** renders a featureless circle as a placeholder for loading elements",
          "type": "\"rectangle\" | \"square\" | \"circle\"",
          "default": "\"rectangle\""
        },
        {
          "name": "height",
          "description": "Height inline style\n1. Used to set a height on the skeleton if specific size is needed",
          "type": "string"
        },
        {
          "name": "width",
          "description": "Width inline style\n1. Used to set a width on the skeleton if specific size is needed",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n- **rectangle** renders a featureless rectangle as a placeholder for loading elements\n- **square** renders a featureless square as a placeholder for loading elements\n- **circle** renders a featureless circle as a placeholder for loading elements",
          "type": "\"rectangle\" | \"square\" | \"circle\"",
          "default": "\"rectangle\""
        },
        {
          "name": "height",
          "attribute": "height",
          "description": "Height inline style\n1. Used to set a height on the skeleton if specific size is needed",
          "type": "string"
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "Width inline style\n1. Used to set a width on the skeleton if specific size is needed",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-split-button",
      "path": "./../components/split-button/split-button.ts",
      "attributes": [
        {
          "name": "disabled",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**sm** shrinks the button typography and overall size</li>\n<li>**lg** increases the button typography size and overall size</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"sm\" | \"lg\" | undefined"
        },
        {
          "name": "buttonText",
          "description": "Display text on the button",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "dropdownOpen",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**sm** shrinks the button typography and overall size</li>\n<li>**lg** increases the button typography size and overall size</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"sm\" | \"lg\" | undefined"
        },
        {
          "name": "buttonText",
          "attribute": "buttonText",
          "description": "Display text on the button",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "text-click"
        },
        {
          "name": "dropdown-click"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content , this will consist of the dropdown when the user clicks the caret"
        }
      ]
    },
    {
      "name": "cre8-submenu-item",
      "path": "./../components/submenu-item/submenu-item.ts",
      "attributes": [
        {
          "name": "href",
          "description": "The link URL",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "href",
          "attribute": "href",
          "description": "The link URL",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-submenu",
      "path": "./../components/submenu/submenu.ts",
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-tab-panel",
      "path": "./../components/tab-panel/tab-panel.ts",
      "attributes": [
        {
          "name": "skipFocusOnPanel",
          "description": "This will remove focus on panel element",
          "type": "boolean | undefined"
        },
        {
          "name": "isActive",
          "description": "Indicates if the panel is active\n<br/><br/> _*This property is dynamically set_",
          "type": "boolean | undefined"
        },
        {
          "name": "index",
          "description": "Used to align the tab panel with the tab\n<br/><br/> _*This property is dynamically set_",
          "type": "number | undefined"
        }
      ],
      "properties": [
        {
          "name": "skipFocusOnPanel",
          "attribute": "skipFocusOnPanel",
          "description": "This will remove focus on panel element",
          "type": "boolean | undefined"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "Indicates if the panel is active\n<br/><br/> _*This property is dynamically set_",
          "type": "boolean | undefined"
        },
        {
          "name": "index",
          "attribute": "index",
          "description": "Used to align the tab panel with the tab\n<br/><br/> _*This property is dynamically set_",
          "type": "number | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-tab",
      "path": "./../components/tab/tab.ts",
      "attributes": [
        {
          "name": "size",
          "description": "Tab sizes\n- **default** displays the tab text with cre8-typography-label-default\n- **sm** displays the tab text with cre8-typography-label-small and decrease padding\n\n_*This property is dynamically set_",
          "type": "\"sm\" | undefined"
        },
        {
          "name": "isActive",
          "description": "If is true, tab has active state and cooresponding tab panel is visible.\n\n_*This property is dynamically set_",
          "type": "boolean | undefined"
        },
        {
          "name": "index",
          "description": "Used to align the tab with the tab panel\n\n_*This property is dynamically set_",
          "type": "number | undefined"
        },
        {
          "name": "ariaLabelledBy",
          "description": "Used to connect tab trigger and tab panel for accessibility\n\n_*This property is dynamically set_",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "size",
          "attribute": "size",
          "description": "Tab sizes\n- **default** displays the tab text with cre8-typography-label-default\n- **sm** displays the tab text with cre8-typography-label-small and decrease padding\n\n_*This property is dynamically set_",
          "type": "\"sm\" | undefined"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "If is true, tab has active state and cooresponding tab panel is visible.\n\n_*This property is dynamically set_",
          "type": "boolean | undefined"
        },
        {
          "name": "index",
          "attribute": "index",
          "description": "Used to align the tab with the tab panel\n\n_*This property is dynamically set_",
          "type": "number | undefined"
        },
        {
          "name": "ariaLabelledBy",
          "attribute": "ariaLabelledBy",
          "description": "Used to connect tab trigger and tab panel for accessibility\n\n_*This property is dynamically set_",
          "type": "string | undefined"
        }
      ],
      "events": [
        {
          "name": "tabSelected"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-table-body",
      "path": "./../components/table-body/table-body.ts",
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-table-cell",
      "path": "./../components/table-cell/table-cell.ts",
      "attributes": [
        {
          "name": "colspan",
          "description": "Colspan attribute on td",
          "type": "number | undefined"
        },
        {
          "name": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table cell without a border</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"bare\" | undefined"
        },
        {
          "name": "dataHeader",
          "description": "Column header text for cell to display when table is using responsive variant",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "colspan",
          "attribute": "colspan",
          "description": "Colspan attribute on td",
          "type": "number | undefined"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table cell without a border</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"bare\" | undefined"
        },
        {
          "name": "dataHeader",
          "attribute": "dataHeader",
          "description": "Column header text for cell to display when table is using responsive variant",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-table-header-cell",
      "path": "./../components/table-header-cell/table-header-cell.ts",
      "attributes": [
        {
          "name": "colspan",
          "description": "Colspan attribute on th",
          "type": "number | undefined"
        },
        {
          "name": "width",
          "description": "Adds inline width style to th\nSets width of entire column",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "colspan",
          "attribute": "colspan",
          "description": "Colspan attribute on th",
          "type": "number | undefined"
        },
        {
          "name": "width",
          "attribute": "width",
          "description": "Adds inline width style to th\nSets width of entire column",
          "type": "string | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-table-header",
      "path": "./../components/table-header/table-header.ts",
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-table-object",
      "path": "./../components/table-object/table-object.ts",
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-table-row",
      "path": "./../components/table-row/table-row.ts",
      "attributes": [
        {
          "name": "isExpanded",
          "description": "Visually show additional expandable content",
          "type": "boolean | undefined"
        },
        {
          "name": "isExpandable",
          "description": "Indicates row has additional visually hidden related content",
          "type": "boolean | undefined"
        },
        {
          "name": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table row without a border</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"bare\" | undefined"
        },
        {
          "name": "expandedButtonText",
          "description": "Expanded button text",
          "type": "string",
          "default": "\"Collapse Table Row\""
        },
        {
          "name": "collapsedButtonText",
          "description": "Expand button text",
          "type": "string",
          "default": "\"Expand Table Row\""
        }
      ],
      "properties": [
        {
          "name": "isExpanded",
          "attribute": "isExpanded",
          "description": "Visually show additional expandable content",
          "type": "boolean | undefined"
        },
        {
          "name": "isExpandable",
          "attribute": "isExpandable",
          "description": "Indicates row has additional visually hidden related content",
          "type": "boolean | undefined"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**bare** renders a table row without a border</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"bare\" | undefined"
        },
        {
          "name": "expandedButtonText",
          "attribute": "expandedButtonText",
          "description": "Expanded button text",
          "type": "string",
          "default": "\"Collapse Table Row\""
        },
        {
          "name": "collapsedButtonText",
          "attribute": "collapsedButtonText",
          "description": "Expand button text",
          "type": "string",
          "default": "\"Expand Table Row\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-table",
      "path": "./../components/table/table.ts",
      "attributes": [
        {
          "name": "caption",
          "description": "Specifies the caption/title of the table, visible to all users.\nIncreases accessibility of table.",
          "type": "string | undefined"
        },
        {
          "name": "behavior",
          "description": "Behavior variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**responsive** stacks column headers with respective table cells on small screens</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"responsive\" | undefined"
        },
        {
          "name": "isHoverable",
          "description": "Hoverable rows variant\n1) Allows the table rows to be styled on hover",
          "type": "boolean | undefined"
        },
        {
          "name": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**striped** add zebra-striping to table rows within the `<tbody>`</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"striped\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "caption",
          "attribute": "caption",
          "description": "Specifies the caption/title of the table, visible to all users.\nIncreases accessibility of table.",
          "type": "string | undefined"
        },
        {
          "name": "behavior",
          "attribute": "behavior",
          "description": "Behavior variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**responsive** stacks column headers with respective table cells on small screens</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"responsive\" | undefined"
        },
        {
          "name": "isHoverable",
          "attribute": "isHoverable",
          "description": "Hoverable rows variant\n1) Allows the table rows to be styled on hover",
          "type": "boolean | undefined"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variants\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**striped** add zebra-striping to table rows within the `<tbody>`</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"striped\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-tabs",
      "path": "./../components/tabs/tabs.ts",
      "description": "Tabs are used to quickly navigate back and forth between views.\nThe Tab design and interaction varies depending on the requirements for your organization and project.\nStandardizing on the best individual controls will improve usability and reduce development and QA time.\n\nCreate a standard set of Tab controls:\nPrimary Tabs (for system navigation), Secondary Tabs (for sub navigation within a screen).\n\n## Usability Guidelines\n- The selected Tab should be visually differentiated from the other Tabs.\n  The deselected Tabs should still look enabled.\n  Dimming the other Tabs decreases the legibility of items that are actually active and clickable.\n- There must be a minimum of 2 Tabs.\n- Showing status in a Tab is non-standard (such as 0%, 10%).\n- Tab labels and content should be parallel, with the exception of a Summary or Overview Tab\n  which can be a rollup of content across other Tabs.\n- Keep the font size of the Tabs the same.\n  If the Tabs are a fixed width and one of the labels is too long,\n  don't resize the text to fit and consider wrapping text to a second line.\n- If possible, don't truncate text because it makes it harder to understand what's in the Tab.\n- Try not to use more than six Tabs to keep the UI uncluttered.\n- Do not stack Tabs on top of each other, and do not nest Tabs within Tabs.\n  Find alternate ways of navigating page hierarchy.",
      "attributes": [
        {
          "name": "size",
          "description": "Tab sizes\n- **default** displays the cre8-tab text with cre8-typography-label-default\n- **sm** displays the cre8-tab text with cre8-typography-label-small",
          "type": "\"sm\""
        },
        {
          "name": "fullWidth",
          "description": "Displays a set of tabs with a spanning the width of the element",
          "type": "boolean"
        },
        {
          "name": "activeIndex",
          "description": "Sets the initial active tab (e.g. 0 sets the first tab, 1 sets the second tab, etc.)",
          "type": "number",
          "default": "0"
        },
        {
          "name": "isStart",
          "description": "If position from left is greater than 0, set isStart to false. Otherwise set isStart to true.\n\n_*This property is dynamically set_",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "isEnd",
          "description": "If last child is fully in the viewport, set isEnd to true. Otherwise, set isEnd to false.\n\n_*This property is dynamically set_",
          "type": "boolean",
          "default": "false"
        }
      ],
      "properties": [
        {
          "name": "size",
          "attribute": "size",
          "description": "Tab sizes\n- **default** displays the cre8-tab text with cre8-typography-label-default\n- **sm** displays the cre8-tab text with cre8-typography-label-small",
          "type": "\"sm\""
        },
        {
          "name": "fullWidth",
          "attribute": "fullWidth",
          "description": "Displays a set of tabs with a spanning the width of the element",
          "type": "boolean"
        },
        {
          "name": "activeIndex",
          "attribute": "activeIndex",
          "description": "Sets the initial active tab (e.g. 0 sets the first tab, 1 sets the second tab, etc.)",
          "type": "number",
          "default": "0"
        },
        {
          "name": "activeTab",
          "description": "The active tab\n\n_*This property is dynamically set_",
          "type": "cre8Tab | undefined"
        },
        {
          "name": "isStart",
          "attribute": "isStart",
          "description": "If position from left is greater than 0, set isStart to false. Otherwise set isStart to true.\n\n_*This property is dynamically set_",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "isEnd",
          "attribute": "isEnd",
          "description": "If last child is fully in the viewport, set isEnd to true. Otherwise, set isEnd to false.\n\n_*This property is dynamically set_",
          "type": "boolean",
          "default": "false"
        },
        {
          "name": "isRTL",
          "description": "Query the document direction value\n\n_*This property is dynamically set_",
          "type": "boolean"
        },
        {
          "name": "handleScroll"
        },
        {
          "name": "handleResize"
        },
        {
          "name": "setIsStart"
        },
        {
          "name": "setIsEnd"
        },
        {
          "name": "emitEvent"
        },
        {
          "name": "tabId",
          "description": "Auto Increment id to sync tab and tab panel\n\n_*This property is dynamically set_",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "tabChange"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Default, unnamed slot container for each `cre8-tab` button"
        },
        {
          "name": "panel",
          "description": "Container for each `cre8-tab-panel` content item"
        }
      ]
    },
    {
      "name": "cre8-tag-list",
      "path": "./../components/tag-list/tag-list.ts",
      "description": "Tag List must have children which are Tag components that are of type `checkbox` or `radio`.\nThe Tags must use the `neutral` variant and the `round` shape when they are inside a Tag List.\nTag List has a label that should be used to describe the purpose of the list.",
      "attributes": [
        {
          "name": "label",
          "description": "Tag list legend label",
          "type": "string | undefined"
        },
        {
          "name": "fieldId",
          "description": "The unique id of the select",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "label",
          "attribute": "label",
          "description": "Tag list legend label",
          "type": "string | undefined"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The unique id of the select",
          "type": "string"
        }
      ]
    },
    {
      "name": "cre8-tag",
      "path": "./../components/tag/tag.ts",
      "description": "The tag component allows you to make selections, filter content, or trigger actions. While buttons are\nexpected to appear consistently and with familiar calls to actions, tags should appear dynamically\nas a group of multiple interactions elements. It is a flexible\ncomponent that comes in the following types:\n - **radio**  Clicking a Radio Button causes it to change color. These tags only allow\none option to be chosen and can be used in place of radio button when they need to be listed\nhorizontally\n\n - **checkbox** It allows for selecting options, It can be toggled on and off.",
      "attributes": [
        {
          "name": "text",
          "type": "string"
        },
        {
          "name": "variant",
          "description": "Color variant\n**neutral** renders the default, unselected tag\n**branded** renders a selected tag\n**neutral-hybrid** renders a tag when mouse is hovering tag",
          "type": "\"neutral\" | \"branded\" | \"neutral-hybrid\"",
          "default": "\"neutral\""
        },
        {
          "name": "shape",
          "description": "shape of the tag, supports square and round, and default not mentioned its a square",
          "type": "\"square\" | \"round\"",
          "default": "\"square\""
        },
        {
          "name": "isDisabled",
          "description": "Disabled attribute\nrenders a greyed out tag that the user cannot interact with",
          "type": "boolean | undefined"
        },
        {
          "name": "isSelected",
          "description": "Selected attribute\nrenders a selected tag",
          "type": "boolean | undefined"
        },
        {
          "name": "fieldId",
          "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
          "type": "string | undefined"
        },
        {
          "name": "type",
          "description": "Type of tag\n**checkbox** renders a checkbox tag\n**radio** renders a radio tag",
          "type": "\"checkbox\" | \"radio\""
        },
        {
          "name": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "text",
          "attribute": "text",
          "type": "string"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Color variant\n**neutral** renders the default, unselected tag\n**branded** renders a selected tag\n**neutral-hybrid** renders a tag when mouse is hovering tag",
          "type": "\"neutral\" | \"branded\" | \"neutral-hybrid\"",
          "default": "\"neutral\""
        },
        {
          "name": "shape",
          "attribute": "shape",
          "description": "shape of the tag, supports square and round, and default not mentioned its a square",
          "type": "\"square\" | \"round\"",
          "default": "\"square\""
        },
        {
          "name": "isDisabled",
          "attribute": "isDisabled",
          "description": "Disabled attribute\nrenders a greyed out tag that the user cannot interact with",
          "type": "boolean | undefined"
        },
        {
          "name": "isSelected",
          "attribute": "isSelected",
          "description": "Selected attribute\nrenders a selected tag",
          "type": "boolean | undefined"
        },
        {
          "name": "fieldId",
          "attribute": "fieldId",
          "description": "The fieldId attribute is assigned to the HTML input element of the radio button and the for attribute of the\ncorresponding label.",
          "type": "string | undefined"
        },
        {
          "name": "formAssociated",
          "type": "boolean",
          "default": "true"
        },
        {
          "name": "type",
          "attribute": "type",
          "description": "Type of tag\n**checkbox** renders a checkbox tag\n**radio** renders a radio tag",
          "type": "\"checkbox\" | \"radio\""
        },
        {
          "name": "field",
          "description": "Get the radio field item input",
          "type": "HTMLInputElement"
        },
        {
          "name": "value",
          "attribute": "value",
          "description": "The value of the form field.",
          "type": "string"
        }
      ],
      "events": [
        {
          "name": "change"
        }
      ]
    },
    {
      "name": "cre8-tertiary-nav-item",
      "path": "./../components/tertiary-nav-item/tertiary-nav-item.ts",
      "attributes": [
        {
          "name": "href",
          "description": "The href value of the tertiary nav link",
          "type": "string | undefined"
        },
        {
          "name": "isCurrent",
          "description": "The current state of the tertiary nav link",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "href",
          "attribute": "href",
          "description": "The href value of the tertiary nav link",
          "type": "string | undefined"
        },
        {
          "name": "isCurrent",
          "attribute": "isCurrent",
          "description": "The current state of the tertiary nav link",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-tertiary-nav",
      "path": "./../components/tertiary-nav/tertiary-nav.ts",
      "attributes": [
        {
          "name": "fullWidth",
          "description": "Allows the tertiary nav to take up the full width of it parent container",
          "type": "boolean | undefined"
        },
        {
          "name": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"tertiary\""
        }
      ],
      "properties": [
        {
          "name": "fullWidth",
          "attribute": "fullWidth",
          "description": "Allows the tertiary nav to take up the full width of it parent container",
          "type": "boolean | undefined"
        },
        {
          "name": "navAriaLabel",
          "attribute": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"tertiary\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-text-link",
      "path": "./../components/text-link/text-link.ts",
      "attributes": [
        {
          "name": "href",
          "description": "The link URL",
          "type": "string | undefined"
        },
        {
          "name": "variant",
          "description": "Style variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **display** applies display treatment to the text link (e.g. article title link)</li>\n<li> **secondary** applies secondary treatment to the text link (e.g. non-prominent links)</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"secondary\" | \"display\" | undefined"
        },
        {
          "name": "size",
          "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **sm** renders a smaller typography preset than the default</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"sm\" | undefined"
        },
        {
          "name": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        }
      ],
      "properties": [
        {
          "name": "href",
          "attribute": "href",
          "description": "The link URL",
          "type": "string | undefined"
        },
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **display** applies display treatment to the text link (e.g. article title link)</li>\n<li> **secondary** applies secondary treatment to the text link (e.g. non-prominent links)</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"secondary\" | \"display\" | undefined"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li> **sm** renders a smaller typography preset than the default</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"sm\" | undefined"
        },
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-text-passage",
      "path": "./../components/text-passage/text-passage.ts",
      "description": "The text-passage component acts a general wrapper element\nfor any text content that needs to be used in your project.\n\n# How to Use\n1. Code your text passage using any of the native html text elements (p, ol, ul, blockquote, cite, etc.)\n   or other cre8 Components like cre8-heading and wrap them with the cre8-text-passage tags.\n2. Choose between three sizes for your text content or apply inline styling if you need additional styling.\n3. For dark backgrounds, add the 'inverted' attribute to the <cre8-text-passage> tag.\n3. Your text-passage will render with brand-approved styling!\n\n\nNOTE: It is recommended that you use the cre8-heading component for any heading elements in your HTML template",
      "attributes": [
        {
          "name": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "description": "Size variant\n- **small** renders smaller typography than the default variant\n- **default** renders default typography variant\n- **large** renders larger typography than the default variant",
          "type": "\"large\" | \"small\" | \"default\" | undefined",
          "default": "\"default\""
        }
      ],
      "properties": [
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "size",
          "attribute": "size",
          "description": "Size variant\n- **small** renders smaller typography than the default variant\n- **default** renders default typography variant\n- **large** renders larger typography than the default variant",
          "type": "\"large\" | \"small\" | \"default\" | undefined",
          "default": "\"default\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    },
    {
      "name": "cre8-tooltip",
      "path": "./../components/tooltip/tooltip.ts",
      "description": "The purpose of tooltips is to provide a tip or hint about what a tool, icon, link, or other interaction does.\nIf you need to present a call to action with perhaps a button for the user to click, then use\n[Popover](/docs/cre8-components-popover--docs) instead.\n\n##Tooltip Styles\nThere are 4 alignment options for Tooltips: Top, Bottom, Right, and Left. Default placement is Bottom, below the\nelement it is describing. Top or Bottom alignment are the the preferred placement, particularly on screens that\nhave a more narrow viewport. Tooltips utilize Global styles and are not affected by brand themes.\n\n**With icon**\n- **iconRotateDegree** & **iconFlipDirection** props are optional.\n- They are used to set up the correct dirrection for icons, for example,\narrows, caret up or caret down.\n\n##Usability Considerations\nWith the exception of icons - which should always have alt text at a minimum - the UI should never rely on\nTooltips for clarity, especially because they are not always discovered by the user. If the user cannot\nintuitively understand the interface without Tooltips, the interface should be redesigned.\n\n##How to use\n- Use Tooltips to clarify the UI element the user is interacting with, not to add additional content on the page.\nAlso, do not simply restate content on the page, for example, the title of the field.\n- Tooltips should be short and to the point. Example: \"Click X to do X\" or \"Icon Description.\" If a succinct\ndescription is not possible, the interaction element should be redesigned.\n- In a mouse-driven UI, Tooltips are triggered on hover (mouseover) and dismissed (disappear)\nwhen the user mouses away from the element. In touch UIs, a Tooltip is triggered by tapping\nand holding an item. The Tooltip is displayed as long as the user continues to hold the element.\nTap and hold is a more advanced user behavior, and further reason for not relying on Tooltips.\nA novice user may never discover tap and hold for Tooltips.",
      "attributes": [
        {
          "name": "position",
          "description": "Positions the tooltip panel absolutely to the icon. Position overrides `isDynamic`.",
          "type": "\"default\"|\"top\"|\"left\"|\"right\""
        },
        {
          "name": "knockout",
          "description": "The knockout variant for the tooltip",
          "type": "boolean"
        },
        {
          "name": "isDynamic",
          "description": "The dynamic state for the tooltip. Position overrides isDynamic.",
          "type": "boolean"
        },
        {
          "name": "isActiveDynamic",
          "description": "The dynamic active state",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "description": "The active state for the tooltip",
          "type": "boolean"
        },
        {
          "name": "ariaDescribes",
          "description": "Accepts the ID string of the item the tooltip is referencing",
          "type": "string"
        },
        {
          "name": "svg",
          "description": "svg as a raw string\n- The icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "position",
          "attribute": "position",
          "description": "Positions the tooltip panel absolutely to the icon. Position overrides `isDynamic`.",
          "type": "\"default\"|\"top\"|\"left\"|\"right\""
        },
        {
          "name": "knockout",
          "attribute": "knockout",
          "description": "The knockout variant for the tooltip",
          "type": "boolean"
        },
        {
          "name": "isDynamic",
          "attribute": "isDynamic",
          "description": "The dynamic state for the tooltip. Position overrides isDynamic.",
          "type": "boolean"
        },
        {
          "name": "isActiveDynamic",
          "attribute": "isActiveDynamic",
          "description": "The dynamic active state",
          "type": "boolean"
        },
        {
          "name": "isActive",
          "attribute": "isActive",
          "description": "The active state for the tooltip",
          "type": "boolean"
        },
        {
          "name": "ariaDescribes",
          "attribute": "ariaDescribes",
          "description": "Accepts the ID string of the item the tooltip is referencing",
          "type": "string"
        },
        {
          "name": "svg",
          "attribute": "svg",
          "description": "svg as a raw string\n- The icon is defined by this prop.\n- Pass in a raw svg as a String for using <cre8-icon>",
          "type": "string | undefined"
        },
        {
          "name": "iconRotateDegree",
          "attribute": "iconRotateDegree",
          "description": "iconRotateDegree is used for <cre8-icon> to set the arrow in the correct direction",
          "type": "number | undefined",
          "default": "0"
        },
        {
          "name": "iconFlipDirection",
          "attribute": "iconFlipDirection",
          "description": "iconFlipDirection is used for <cre8-icon> to set the icon in the correct direction",
          "type": "string | undefined"
        },
        {
          "name": "isRTL",
          "description": "Query the document direction value\n<br/><br/> _*This property is dynamically set_",
          "type": "boolean"
        },
        {
          "name": "removeActive",
          "description": "Remove Active State\n1. If a specific event is fired, remove the active state.",
          "type": "() => void",
          "default": "\"() => {\\n      if (this.isActive) {\\n          this.toggleActive();\\n      }\\n  }\""
        }
      ],
      "events": [
        {
          "name": "open"
        },
        {
          "name": "close"
        }
      ],
      "slots": [
        {
          "name": "default",
          "description": "Default, unnamed slot container for Tooltip text"
        },
        {
          "name": "trigger",
          "description": "Named slot container for Tooltip element to trigger showing/hiding the Tooltip text"
        }
      ]
    },
    {
      "name": "cre8-utility-nav-item",
      "path": "./../components/utility-nav-item/utility-nav-item.ts",
      "attributes": [
        {
          "name": "hideText",
          "description": "Hide text toggle\n1) Visually hides the text so screenreaders can still read for accessibility when set to true.",
          "type": "boolean | undefined"
        },
        {
          "name": "href",
          "description": "URL of the utility nav item",
          "type": "string | undefined"
        },
        {
          "name": "iconName",
          "description": "Icon name",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "description": "Icon position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**before** places the icon before the text</li>\n<li>**after** places the icon after the text</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "text",
          "description": "Text of the utility nav item",
          "type": "string | undefined"
        }
      ],
      "properties": [
        {
          "name": "hideText",
          "attribute": "hideText",
          "description": "Hide text toggle\n1) Visually hides the text so screenreaders can still read for accessibility when set to true.",
          "type": "boolean | undefined"
        },
        {
          "name": "href",
          "attribute": "href",
          "description": "URL of the utility nav item",
          "type": "string | undefined"
        },
        {
          "name": "iconName",
          "attribute": "iconName",
          "description": "Icon name",
          "type": "string | undefined"
        },
        {
          "name": "iconPosition",
          "attribute": "iconPosition",
          "description": "Icon position\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**before** places the icon before the text</li>\n<li>**after** places the icon after the text</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"before\" | \"after\" | undefined",
          "default": "\"undefined\""
        },
        {
          "name": "text",
          "attribute": "text",
          "description": "Text of the utility nav item",
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "cre8-utility-nav",
      "path": "./../components/utility-nav/utility-nav.ts",
      "attributes": [
        {
          "name": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"utility\""
        }
      ],
      "properties": [
        {
          "name": "inverted",
          "attribute": "inverted",
          "description": "Inverted variant\n1) Used for dark backgrounds",
          "type": "boolean | undefined"
        },
        {
          "name": "navAriaLabel",
          "attribute": "navAriaLabel",
          "description": "aria-label attribute to designate at name for the nav. Can be override by user",
          "type": "string",
          "default": "\"utility\""
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The utility nav items"
        }
      ]
    },
    {
      "name": "cre8-vertical-card",
      "path": "./../components/vertical-card/vertical-card.ts",
      "attributes": [
        {
          "name": "variant",
          "description": "Style variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**secondary** renders a secondary vertical card color</li>\n<li>**tertiary** renders a tertiary vertical card color</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"secondary\" | \"tertiary\" | undefined"
        }
      ],
      "properties": [
        {
          "name": "variant",
          "attribute": "variant",
          "description": "Style variant\n<cre8-text-passage size=\"sm\">\n<ul>\n<li>**secondary** renders a secondary vertical card color</li>\n<li>**tertiary** renders a tertiary vertical card color</li>\n</ul>\n</cre8-text-passage>",
          "type": "\"secondary\" | \"tertiary\" | undefined"
        }
      ],
      "slots": [
        {
          "name": "",
          "description": "The component content"
        }
      ]
    }
  ]
}