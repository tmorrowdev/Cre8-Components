"use strict";(self.webpackChunk_cre8_dev_cre8_react=self.webpackChunk_cre8_dev_cre8_react||[]).push([[3247],{"./src/components/MultiSelect/MultiSelect.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Disabled:()=>Disabled,DisabledWithTags:()=>DisabledWithTags,Error:()=>Error,PreSelected:()=>PreSelected,Success:()=>Success,Wrapping:()=>Wrapping,__namedExportsOrder:()=>__namedExportsOrder,default:()=>MultiSelect_stories});var react=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),preview=__webpack_require__("./.storybook/preview.js"),_lit_react=__webpack_require__("./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js"),multi_select=__webpack_require__("./node_modules/.pnpm/@cre8_dev+cre8-wc@1.0.3_webpack@5.98.0/node_modules/@cre8_dev/cre8-wc/lib/components/multi-select/multi-select.js");const Cre8MultiSelect=(0,_lit_react.a)({react,tagName:"Cre8-multi-select",elementClass:multi_select.Q,events:{onSelectedItemsChange:"selectedItemsChange"}});try{Cre8MultiSelect.displayName="Cre8MultiSelect",Cre8MultiSelect.__docgenInfo={description:'Multiselect is used when multiple options can be chosen from a static dropdown\nThis component has a list of items in the dropdown that can be added as "selected tags"\nThe checkbox will always reflect the selected nature of the item and is not removed\nfrom the dropdown when clicked, the tags will be added and removed based on their state.\n\nEvent `selectedItemsChange` emits whenever a tag is added or remove from the list and the\ncurrent list after the change is given in the detail.',displayName:"Cre8MultiSelect",props:{onSelectedItemsChange:{defaultValue:null,description:"",name:"onSelectedItemsChange",required:!1,type:{name:"(e: Cre8DomEvent<Cre8MultiSelect, Cre8MultiSelect>) => void"}},render:{defaultValue:null,description:"Example render, should not be used",name:"render",required:!1,type:{name:"() => TemplateResult<1>"}},componentClassNames:{defaultValue:null,description:"Abstraction of `classnames` that automatically includes any style modifier\nas well as any set variants.\n\nIt is expected that `variant` would be overridden in a subclass with more\nspecific types, `@property() variant?: 'foo' | 'bar'`\n@param baseClassName",name:"componentClassNames",required:!1,type:{name:"(baseClassName: string, additionalClassNames?: {}) => string"}},slotEmpty:{defaultValue:null,description:"Check if a slot is empty\n@param slotName",name:"slotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},slotNotEmpty:{defaultValue:null,description:"Check if a slot is not empty\n@param slotName",name:"slotNotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},dispatch:{defaultValue:null,description:"Dispatch a custom event.",name:"dispatch",required:!1,type:{name:"({ e, eventName, detailObj, optionsObj, }: Cre8DispatchProps) => CustomEvent<any>"}},renderOptions:{defaultValue:null,description:"@category rendering",name:"renderOptions",required:!1,type:{name:"RenderOptions"}},connectedCallback:{defaultValue:null,description:"Invoked when the component is added to the document's DOM.\n\nIn `connectedCallback()` you should setup tasks that should only occur when\nthe element is connected to the document. The most common of these is\nadding event listeners to nodes external to the element, like a keydown\nevent handler added to the window.\n\n```ts\nconnectedCallback() {\n  super.connectedCallback();\n  addEventListener('keydown', this._handleKeydown);\n}\n```\n\nTypically, anything done in `connectedCallback()` should be undone when the\nelement is disconnected, in `disconnectedCallback()`.",name:"connectedCallback",required:!1,type:{name:"() => void"}},disconnectedCallback:{defaultValue:null,description:"Invoked when the component is removed from the document's DOM.\n\nThis callback is the main signal to the element that it may no longer be\nused. `disconnectedCallback()` should ensure that nothing is holding a\nreference to the element (such as event listeners added to nodes external\nto the element), so that it is free to be garbage collected.\n\n```ts\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\nAn element may be re-connected after being disconnected.",name:"disconnectedCallback",required:!1,type:{name:"() => void"}},renderRoot:{defaultValue:null,description:"Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.\n@category rendering",name:"renderRoot",required:!1,type:{name:"HTMLElement | ShadowRoot"}},isUpdatePending:{defaultValue:null,description:"True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.\n@category updates",name:"isUpdatePending",required:!1,type:{name:"boolean"}},hasUpdated:{defaultValue:null,description:"Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.\n@category updates",name:"hasUpdated",required:!1,type:{name:"boolean"}},addController:{defaultValue:null,description:"Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.\n@category controllers",name:"addController",required:!1,type:{name:"(controller: ReactiveController) => void"}},removeController:{defaultValue:null,description:"Removes a `ReactiveController` from the element.\n@category controllers",name:"removeController",required:!1,type:{name:"(controller: ReactiveController) => void"}},attributeChangedCallback:{defaultValue:null,description:"Synchronizes property values when attributes change.\n\nSpecifically, when an attribute is set, the corresponding property is set.\nYou should rarely need to implement this callback. If this method is\noverridden, `super.attributeChangedCallback(name, _old, value)` must be\ncalled.\n\nSee [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\non MDN for more information about the `attributeChangedCallback`.\n@category attributes",name:"attributeChangedCallback",required:!1,type:{name:"(name: string, _old: string, value: string) => void"}},requestUpdate:{defaultValue:null,description:"Requests an update which is processed asynchronously. This should be called\nwhen an element should update based on some state not triggered by setting\na reactive property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored.\n@param name name of requesting property\n@param oldValue old value of requesting property\n@param options property options to use instead of the previously\nconfigured options\n@category updates",name:"requestUpdate",required:!1,type:{name:"(name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration<unknown, unknown>) => void"}},updateComplete:{defaultValue:null,description:"Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.\n@return A promise of a boolean that resolves to true if the update completed\nwithout triggering another update.\n@category updates",name:"updateComplete",required:!1,type:{name:"Promise<boolean>"}},label:{defaultValue:null,description:"The required label that appears above the multiselect\n@attr {string}",name:"label",required:!1,type:{name:"string"}},firstUpdated:{defaultValue:null,description:"Invoked when the element is first updated. Implement to perform one time\nwork on the element after update.\n\n```ts\nfirstUpdated() {\n  this.renderRoot.getElementById('my-text-area').focus();\n}\n```\n\nSetting properties inside this method will trigger the element to update\nagain after this update cycle completes.",name:"firstUpdated",required:!1,type:{name:"() => void"}},fieldId:{defaultValue:null,description:"The unique id of the select\n@attr {string}",name:"fieldId",required:!1,type:{name:"string"}},dropdownOpen:{defaultValue:null,description:"",name:"dropdownOpen",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"The disabled attribute on the select\n@attr {boolean}",name:"disabled",required:!1,type:{name:"boolean"}},fieldNote:{defaultValue:null,description:"Optional field note text can be added to provide additional field guidance.\n@attr {string}",name:"fieldNote",required:!1,type:{name:"string"}},ariaDescribedBy:{defaultValue:null,description:"Used to connect the field note in text field to the text menu for accessibility\n@attr {string}",name:"ariaDescribedBy",required:!1,type:{name:"string"}},isError:{defaultValue:null,description:"Changes the component's treatment to represent an error state\n@attr {boolean}",name:"isError",required:!1,type:{name:"boolean"}},isSuccess:{defaultValue:null,description:"Changes the component's treatment to represent a success state\n@attr {boolean}",name:"isSuccess",required:!1,type:{name:"boolean"}},items:{defaultValue:null,description:'The list of string items the user can choose in the dropdown\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items="[]"`\n(this is only needed for Web Components and not the React version)\n@attr {string[]}',name:"items",required:!1,type:{name:"string[]"}},validationAriaDescribedBy:{defaultValue:null,description:"Additional aria-describedby connection to id for additional success and error notes to be accessible\n@attr {string}",name:"validationAriaDescribedBy",required:!1,type:{name:"string"}},errorNote:{defaultValue:null,description:"The error field note that appears below the default field note\n@attr {string}",name:"errorNote",required:!1,type:{name:"string"}},successNote:{defaultValue:null,description:"The success field note that appears below the default field note\n@attr {string}",name:"successNote",required:!1,type:{name:"string"}},selectedTagItems:{defaultValue:null,description:"",name:"selectedTagItems",required:!1,type:{name:"string[]"}},preselectedItems:{defaultValue:null,description:"The list of string items that are initially in the selected list of tags\nNote: This list MUST be a subset of the array of items to function.\ni.e. if items=['cat', 'dog', 'bird'], preselectedItems=['cat'] is valid\nwhile preselectedItems=['cat', 'goat'] is not and will break the component.\n\nNote: For passing props containing arrays and complex types, you should pass the props using a\nperiod in from of the prop like so: `.items=\"[]\"`\n(this is only needed for Web Components and not the React version)\n@attr {string[]}",name:"preselectedItems",required:!1,type:{name:"string[]"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/MultiSelect/MultiSelect.tsx#Cre8MultiSelect"]={docgenInfo:Cre8MultiSelect.__docgenInfo,name:"Cre8MultiSelect",path:"src/components/MultiSelect/MultiSelect.tsx#Cre8MultiSelect"})}catch(__react_docgen_typescript_loader_error){}var decorator=__webpack_require__("../../node_modules/.pnpm/@storybook+addon-actions@7.6.20/node_modules/@storybook/addon-actions/dist/decorator.mjs"),jsx_runtime=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");const MultiSelect_stories={title:"In Development/MultiSelect",component:Cre8MultiSelect,parameters:{status:{type:"inProgress"},controls:{exclude:new RegExp(`${preview.excludeRegexArray.join("|")}`)},actions:{handles:["selectedItemsChange"]},docs:{story:{height:"350px"}},decorators:[decorator.w]},render:args=>(0,jsx_runtime.jsx)(Cre8MultiSelect,{...args}),args:{id:"selectId",label:"Choose you favorite food:",items:["Bagel","Burger","Boat","Beefstick","Bacon"]}},Default={args:{}},Wrapping=args=>(0,jsx_runtime.jsx)("div",{style:{width:"320px"},children:(0,jsx_runtime.jsx)(Cre8MultiSelect,{items:["Bagel","Burger","Boat","Beefstick","Bacon"],label:"Wrapping"})});Wrapping.displayName="Wrapping";const PreSelected={args:{label:"PreSelected",items:["Car","Crumbs","Coco","Creampuff","Clock"],preselectedItems:["Car","Crumbs"]}},Disabled={args:{disabled:!0,label:"Disabled"}},DisabledWithTags={args:{disabled:!0,label:"Disabled",preselectedItems:["Brisket"]}},Error={args:{errorNote:"Short, clear error message.",isError:!0,label:"Error",items:["Doll","Dice","Doctor","Dinger","Derby"]}},Success={args:{isSuccess:!0,successNote:"Short, clear success message",label:"Success",items:["Emu","Eggplant","Envy","Essence"],preselectedItems:["Eevee"]}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {}\n}",...Default.parameters?.docs?.source}}},Wrapping.parameters={...Wrapping.parameters,docs:{...Wrapping.parameters?.docs,source:{originalSource:"args => <div style={{\n  width: '320px'\n}}>\n    <Cre8MultiSelect items={['Bagel', 'Burger', 'Boat', 'Beefstick', 'Bacon']} label=\"Wrapping\"></Cre8MultiSelect>\n  </div>",...Wrapping.parameters?.docs?.source}}},PreSelected.parameters={...PreSelected.parameters,docs:{...PreSelected.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'PreSelected',\n    items: ['Car', 'Crumbs', 'Coco', 'Creampuff', 'Clock'],\n    preselectedItems: ['Car', 'Crumbs']\n  }\n}",...PreSelected.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    disabled: true,\n    label: 'Disabled'\n  }\n}",...Disabled.parameters?.docs?.source}}},DisabledWithTags.parameters={...DisabledWithTags.parameters,docs:{...DisabledWithTags.parameters?.docs,source:{originalSource:"{\n  args: {\n    disabled: true,\n    label: 'Disabled',\n    preselectedItems: ['Brisket']\n  }\n}",...DisabledWithTags.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:"{\n  args: {\n    errorNote: \"Short, clear error message.\",\n    isError: true,\n    label: 'Error',\n    items: ['Doll', 'Dice', 'Doctor', 'Dinger', 'Derby']\n  }\n}",...Error.parameters?.docs?.source}}},Success.parameters={...Success.parameters,docs:{...Success.parameters?.docs,source:{originalSource:"{\n  args: {\n    isSuccess: true,\n    successNote: \"Short, clear success message\",\n    label: 'Success',\n    items: ['Emu', 'Eggplant', 'Envy', 'Essence'],\n    preselectedItems: ['Eevee']\n  }\n}",...Success.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Wrapping","PreSelected","Disabled","DisabledWithTags","Error","Success"]}}]);