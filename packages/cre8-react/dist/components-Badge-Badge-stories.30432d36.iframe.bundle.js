/*! For license information please see components-Badge-Badge-stories.30432d36.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_cre8_dev_cre8_react=self.webpackChunk_cre8_dev_cre8_react||[]).push([[291],{"./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>o});const e=new Set(["children","localName","ref","style","className"]),n=new WeakMap,t=(e,t,o,l,a)=>{const s=a?.[t];void 0===s?(e[t]=o,null==o&&t in HTMLElement.prototype&&e.removeAttribute(t)):o!==l&&((e,t,o)=>{let l=n.get(e);void 0===l&&n.set(e,l=new Map);let a=l.get(t);void 0!==o?void 0===a?(l.set(t,a={handleEvent:o}),e.addEventListener(t,a)):a.handleEvent=o:void 0!==a&&(l.delete(t),e.removeEventListener(t,a))})(e,s,o)},o=({react:n,tagName:o,elementClass:l,events:a,displayName:s})=>{const c=new Set(Object.keys(a??{})),r=n.forwardRef(((s,r)=>{const i=n.useRef(new Map),d=n.useRef(null),f={},u={};for(const[n,t]of Object.entries(s))e.has(n)?f["className"===n?"class":n]=t:c.has(n)||n in l.prototype?u[n]=t:f[n]=t;return n.useLayoutEffect((()=>{if(null===d.current)return;const e=new Map;for(const n in u)t(d.current,n,s[n],i.current.get(n),a),i.current.delete(n),e.set(n,s[n]);for(const[e,n]of i.current)t(d.current,e,void 0,n,a);i.current=e})),n.useLayoutEffect((()=>{d.current?.removeAttribute("defer-hydration")}),[]),f.suppressHydrationWarning=!0,n.createElement(o,{...f,ref:n.useCallback((e=>{d.current=e,"function"==typeof r?r(e):null!==r&&(r.current=e)}),[r])})}));return r.displayName=s??l.name,r}},"./src/components/Badge/Badge.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Attention:()=>Attention,AttentionLight:()=>AttentionLight,AttentionWhite:()=>AttentionWhite,Default:()=>Default,Error:()=>Error,ErrorLight:()=>ErrorLight,ErrorWhite:()=>ErrorWhite,IconVariant:()=>IconVariant,Info:()=>Info,InfoLight:()=>InfoLight,InfoWhite:()=>InfoWhite,Light:()=>Light,Success:()=>Success,SuccessLight:()=>SuccessLight,SuccessWhite:()=>SuccessWhite,Warning:()=>Warning,WarningLight:()=>WarningLight,WarningWhite:()=>WarningWhite,White:()=>White,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Badge_stories});var Badge=__webpack_require__("./src/components/Badge/Badge.tsx"),preview=__webpack_require__("./.storybook/preview.js");const Badge_stories={title:"Cre8 Components/Badge",component:Badge._,parameters:{status:{type:"inProgress"},controls:{exclude:new RegExp(`${preview.excludeRegexArray.join("|")}`)}},argTypes:{text:{control:"text"},status:{options:["neutral","error","warning","success","info","attention"],control:{type:"select"}},variant:{options:["default","light","white"],control:{type:"radio"}}}},Default={args:{text:"Badge"}},IconVariant={args:{text:"Icon Variant",svg:'<svg fill="currentColor" width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">\n<path d="M15.5709 5.43726C15.41 5.25493 15.2121 5.10891 14.9905 5.00892C14.7688 4.90892 14.5284 4.85723 14.2852 4.85728H10.2854V3.71446C10.2854 2.95673 9.98435 2.23003 9.44855 1.69423C8.91275 1.15843 8.18605 0.857422 7.42831 0.857422C7.32216 0.857346 7.21808 0.886843 7.12775 0.942606C7.03742 0.998368 6.96441 1.07819 6.9169 1.17313L4.21842 6.57151H1.14282C0.839723 6.57151 0.549043 6.69191 0.334723 6.90623C0.120404 7.12055 0 7.41123 0 7.71432V13.9998C0 14.3029 0.120404 14.5936 0.334723 14.8079C0.549043 15.0222 0.839723 15.1426 1.14282 15.1426H13.4281C13.8457 15.1428 14.2491 14.9905 14.5623 14.7143C14.8756 14.4381 15.0773 14.057 15.1295 13.6427L15.9866 6.78579C16.017 6.54438 15.9956 6.29928 15.9239 6.06676C15.8523 5.83425 15.7319 5.61966 15.5709 5.43726ZM1.14282 7.71432H3.99986V13.9998H1.14282V7.71432ZM14.8523 6.64293L13.9952 13.4998C13.9778 13.638 13.9106 13.765 13.8062 13.857C13.7018 13.9491 13.5673 13.9999 13.4281 13.9998H5.14268V7.27791L7.76473 2.0331C8.15335 2.11087 8.50302 2.32091 8.75422 2.62746C9.00543 2.93401 9.14265 3.31814 9.14254 3.71446V5.42869C9.14254 5.58024 9.20274 5.72558 9.3099 5.83274C9.41706 5.9399 9.5624 6.0001 9.71395 6.0001H14.2852C14.3663 6.00007 14.4465 6.0173 14.5204 6.05064C14.5943 6.08399 14.6603 6.13268 14.7139 6.19348C14.7675 6.25429 14.8076 6.32581 14.8315 6.40331C14.8554 6.4808 14.8625 6.56248 14.8523 6.64293Z"/>\n</svg>\n'}},Success={args:{text:"Success",status:"success"}},Warning={args:{text:"Warning",status:"warning"}},Error={args:{text:"Error",status:"error"}},Info={args:{text:"Info",status:"info"}},Attention={args:{text:"Attention",status:"attention"}},Light={args:{text:"Light",variant:"light"}},SuccessLight={args:{text:"Light",variant:"light",status:"success"}},WarningLight={args:{text:"WarningLight",variant:"light",status:"warning"}},ErrorLight={args:{text:"ErrorLight",variant:"light",status:"error"}},InfoLight={args:{text:"InfoLight",variant:"light",status:"info"}},AttentionLight={args:{text:"AttentionLight",variant:"light",status:"attention"}},White={args:{text:"White",variant:"white"}},SuccessWhite={args:{text:"SuccessWhite",variant:"white",status:"success"}},WarningWhite={args:{text:"WarningWhite",variant:"white",status:"warning"}},ErrorWhite={args:{text:"ErrorWhite",variant:"white",status:"error"}},InfoWhite={args:{text:"InfosWhite",variant:"white",status:"info"}},AttentionWhite={args:{text:"AttentionWhite",variant:"white",status:"attention"}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Badge'\n  }\n}",...Default.parameters?.docs?.source}}},IconVariant.parameters={...IconVariant.parameters,docs:{...IconVariant.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Icon Variant',\n    svg: svgFeedback\n  }\n}",...IconVariant.parameters?.docs?.source}}},Success.parameters={...Success.parameters,docs:{...Success.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Success',\n    status: 'success'\n  }\n}",...Success.parameters?.docs?.source}}},Warning.parameters={...Warning.parameters,docs:{...Warning.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Warning',\n    status: 'warning'\n  }\n}",...Warning.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Error',\n    status: 'error'\n  }\n}",...Error.parameters?.docs?.source}}},Info.parameters={...Info.parameters,docs:{...Info.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Info',\n    status: 'info'\n  }\n}",...Info.parameters?.docs?.source}}},Attention.parameters={...Attention.parameters,docs:{...Attention.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Attention',\n    status: 'attention'\n  }\n}",...Attention.parameters?.docs?.source}}},Light.parameters={...Light.parameters,docs:{...Light.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Light',\n    variant: 'light'\n  }\n}",...Light.parameters?.docs?.source}}},SuccessLight.parameters={...SuccessLight.parameters,docs:{...SuccessLight.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'Light',\n    variant: 'light',\n    status: 'success'\n  }\n}",...SuccessLight.parameters?.docs?.source}}},WarningLight.parameters={...WarningLight.parameters,docs:{...WarningLight.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'WarningLight',\n    variant: 'light',\n    status: 'warning'\n  }\n}",...WarningLight.parameters?.docs?.source}}},ErrorLight.parameters={...ErrorLight.parameters,docs:{...ErrorLight.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'ErrorLight',\n    variant: 'light',\n    status: 'error'\n  }\n}",...ErrorLight.parameters?.docs?.source}}},InfoLight.parameters={...InfoLight.parameters,docs:{...InfoLight.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'InfoLight',\n    variant: 'light',\n    status: 'info'\n  }\n}",...InfoLight.parameters?.docs?.source}}},AttentionLight.parameters={...AttentionLight.parameters,docs:{...AttentionLight.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'AttentionLight',\n    variant: 'light',\n    status: 'attention'\n  }\n}",...AttentionLight.parameters?.docs?.source}}},White.parameters={...White.parameters,docs:{...White.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'White',\n    variant: 'white'\n  }\n}",...White.parameters?.docs?.source}}},SuccessWhite.parameters={...SuccessWhite.parameters,docs:{...SuccessWhite.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'SuccessWhite',\n    variant: 'white',\n    status: 'success'\n  }\n}",...SuccessWhite.parameters?.docs?.source}}},WarningWhite.parameters={...WarningWhite.parameters,docs:{...WarningWhite.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'WarningWhite',\n    variant: 'white',\n    status: 'warning'\n  }\n}",...WarningWhite.parameters?.docs?.source}}},ErrorWhite.parameters={...ErrorWhite.parameters,docs:{...ErrorWhite.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'ErrorWhite',\n    variant: 'white',\n    status: 'error'\n  }\n}",...ErrorWhite.parameters?.docs?.source}}},InfoWhite.parameters={...InfoWhite.parameters,docs:{...InfoWhite.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'InfosWhite',\n    variant: 'white',\n    status: 'info'\n  }\n}",...InfoWhite.parameters?.docs?.source}}},AttentionWhite.parameters={...AttentionWhite.parameters,docs:{...AttentionWhite.parameters?.docs,source:{originalSource:"{\n  args: {\n    text: 'AttentionWhite',\n    variant: 'white',\n    status: 'attention'\n  }\n}",...AttentionWhite.parameters?.docs?.source}}};const __namedExportsOrder=["Default","IconVariant","Success","Warning","Error","Info","Attention","Light","SuccessLight","WarningLight","ErrorLight","InfoLight","AttentionLight","White","SuccessWhite","WarningWhite","ErrorWhite","InfoWhite","AttentionWhite"]},"./src/components/Badge/Badge.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>Cre8Badge});var _lit_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js"),_cre8_dev_cre8_wc_lib_components_badge_badge__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/@cre8_dev+cre8-wc@1.0.3_webpack@5.98.0/node_modules/@cre8_dev/cre8-wc/lib/components/badge/badge.js"),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");const Cre8Badge=(0,_lit_react__WEBPACK_IMPORTED_MODULE_0__.a)({react:react__WEBPACK_IMPORTED_MODULE_2__,tagName:"Cre8-badge",elementClass:_cre8_dev_cre8_wc_lib_components_badge_badge__WEBPACK_IMPORTED_MODULE_1__._g});try{Cre8Badge.displayName="Cre8Badge",Cre8Badge.__docgenInfo={description:"Status badges are used most often in tables or fat rows in a list. These components serve a contextual purpose and don't provide any functionality.\nBadges should be organized inside a dedicated table row communicating status such as pending, approved or rejected.",displayName:"Cre8Badge",props:{status:{defaultValue:null,description:"Status (a color variant prop)\n- **neutral** (default) renders a badge with a neutral state treatment\n- **success** renders a badge with success state treatment\n- **warning** renders a badge with warning state treatment\n- **error** renders a badge with error state treatment\n- **info** renders a badge with information state treatment\n- **attention** renders a badge with attention state treatment",name:"status",required:!1,type:{name:"string"}},text:{defaultValue:null,description:"The badge text",name:"text",required:!1,type:{name:"string"}},render:{defaultValue:null,description:"Example render, should not be used",name:"render",required:!1,type:{name:"() => TemplateResult<1>"}},variant:{defaultValue:null,description:"Background Style Variant\n\n- **dark|undefined** (default) renders a badge with a dark background\n- **light** renders a badge with a light background\n- **white** renders a badge with a white background",name:"variant",required:!1,type:{name:"string"}},componentClassNames:{defaultValue:null,description:"Abstraction of `classnames` that automatically includes any style modifier\nas well as any set variants.\n\nIt is expected that `variant` would be overridden in a subclass with more\nspecific types, `@property() variant?: 'foo' | 'bar'`\n@param baseClassName",name:"componentClassNames",required:!1,type:{name:"(baseClassName: string, additionalClassNames?: {}) => string"}},slotEmpty:{defaultValue:null,description:"Check if a slot is empty\n@param slotName",name:"slotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},slotNotEmpty:{defaultValue:null,description:"Check if a slot is not empty\n@param slotName",name:"slotNotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},dispatch:{defaultValue:null,description:"Dispatch a custom event.",name:"dispatch",required:!1,type:{name:"({ e, eventName, detailObj, optionsObj, }: Cre8DispatchProps) => CustomEvent<any>"}},renderOptions:{defaultValue:null,description:"@category rendering",name:"renderOptions",required:!1,type:{name:"RenderOptions"}},connectedCallback:{defaultValue:null,description:"Invoked when the component is added to the document's DOM.\n\nIn `connectedCallback()` you should setup tasks that should only occur when\nthe element is connected to the document. The most common of these is\nadding event listeners to nodes external to the element, like a keydown\nevent handler added to the window.\n\n```ts\nconnectedCallback() {\n  super.connectedCallback();\n  addEventListener('keydown', this._handleKeydown);\n}\n```\n\nTypically, anything done in `connectedCallback()` should be undone when the\nelement is disconnected, in `disconnectedCallback()`.\n@category lifecycle",name:"connectedCallback",required:!1,type:{name:"() => void"}},disconnectedCallback:{defaultValue:null,description:"Invoked when the component is removed from the document's DOM.\n\nThis callback is the main signal to the element that it may no longer be\nused. `disconnectedCallback()` should ensure that nothing is holding a\nreference to the element (such as event listeners added to nodes external\nto the element), so that it is free to be garbage collected.\n\n```ts\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\nAn element may be re-connected after being disconnected.\n@category lifecycle",name:"disconnectedCallback",required:!1,type:{name:"() => void"}},renderRoot:{defaultValue:null,description:"Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.\n@category rendering",name:"renderRoot",required:!1,type:{name:"HTMLElement | ShadowRoot"}},isUpdatePending:{defaultValue:null,description:"True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.\n@category updates",name:"isUpdatePending",required:!1,type:{name:"boolean"}},hasUpdated:{defaultValue:null,description:"Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.\n@category updates",name:"hasUpdated",required:!1,type:{name:"boolean"}},addController:{defaultValue:null,description:"Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.\n@category controllers",name:"addController",required:!1,type:{name:"(controller: ReactiveController) => void"}},removeController:{defaultValue:null,description:"Removes a `ReactiveController` from the element.\n@category controllers",name:"removeController",required:!1,type:{name:"(controller: ReactiveController) => void"}},attributeChangedCallback:{defaultValue:null,description:"Synchronizes property values when attributes change.\n\nSpecifically, when an attribute is set, the corresponding property is set.\nYou should rarely need to implement this callback. If this method is\noverridden, `super.attributeChangedCallback(name, _old, value)` must be\ncalled.\n\nSee [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\non MDN for more information about the `attributeChangedCallback`.\n@category attributes",name:"attributeChangedCallback",required:!1,type:{name:"(name: string, _old: string, value: string) => void"}},requestUpdate:{defaultValue:null,description:"Requests an update which is processed asynchronously. This should be called\nwhen an element should update based on some state not triggered by setting\na reactive property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored.\n@param name name of requesting property\n@param oldValue old value of requesting property\n@param options property options to use instead of the previously\nconfigured options\n@category updates",name:"requestUpdate",required:!1,type:{name:"(name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration<unknown, unknown>) => void"}},updateComplete:{defaultValue:null,description:"Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.\n@return A promise of a boolean that resolves to true if the update completed\nwithout triggering another update.\n@category updates",name:"updateComplete",required:!1,type:{name:"Promise<boolean>"}},svg:{defaultValue:null,description:"SVG as a raw string\n- For badges with icons, the icon is defined by this prop\n- Pass in a raw svg as a String. We use raw string loader for this but any method of getting raw svgs will do\n- Import example:`import svgFeedback from '@Cre8/cre8-icons/lib/icons/System/Regular/Feedback.svg?raw';`\n- [cre8-icons Github repo](https://git.express-scripts.com/ExpressScripts/cre8-icons) This is the Github\nrepo for Cre8 icons, which includes a link to the storybook as well as relavant information for new icons",name:"svg",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Badge/Badge.tsx#Cre8Badge"]={docgenInfo:Cre8Badge.__docgenInfo,name:"Cre8Badge",path:"src/components/Badge/Badge.tsx#Cre8Badge"})}catch(__react_docgen_typescript_loader_error){}}}]);