"use strict";(self.webpackChunk_cre8_dev_cre8_react=self.webpackChunk_cre8_dev_cre8_react||[]).push([[9889],{"./src/components/Pagination/Pagination.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Compact:()=>Compact,Default:()=>Default,HideLastAndFirstButtons:()=>HideLastAndFirstButtons,IconOnly:()=>IconOnly,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Pagination_stories});var decorator=__webpack_require__("../../node_modules/.pnpm/@storybook+addon-actions@7.6.20/node_modules/@storybook/addon-actions/dist/decorator.mjs"),preview=__webpack_require__("./.storybook/preview.js"),react=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),_lit_react=__webpack_require__("./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js"),pagination=__webpack_require__("./node_modules/.pnpm/@cre8_dev+cre8-wc@1.0.3_webpack@5.98.0/node_modules/@cre8_dev/cre8-wc/lib/components/pagination/pagination.js");const Cre8Pagination=(0,_lit_react.a)({react,tagName:"Cre8-pagination",elementClass:pagination.B});try{Cre8Pagination.displayName="Cre8Pagination",Cre8Pagination.__docgenInfo={description:'The Pagination component is used to split up a large amount of results by showing only\na certain amount on each page. You can cycle through the pages using Page Numbers,\nNext and Previous Buttons, or optional First Page and Last Page Buttons.\nThis component is also used by Table to cycle through rows of results. Pagination has four display options:\n\n**default**:  Can contain up to seven Page Numbers (ellipses included) at a time flanked by\nNext and Previous Buttons. When there are more than seven pages, numbers start getting\nreplaced by ellipses. Use this option when you have a lot of horizontal space in a layout.\nIt should not be used for mobile web layouts since its buttons are smaller than the minimum touch target of 44px.\n\n\n**compact** : Best used as a summary of where you are among pages or table rows\nflanked by Previous and Next Buttons. Use this option when you have limited horizontal\nspace but still need to show where users are among results. Great for mobile layouts.\n\n\n**icon-only** : Use this option in very tight spaces when it’s not required\nto show users where they are among results. Great for mobile layouts.\n\n## HOW TO USE\n\nSelect an option from the “Display” dropdown depending on layout width\nSelect where your current page is from the “Page” dropdown\nTo show less pages when using Full Numbers, use the “pageNumber” toggles\nTo hide the First Page and Last Page Buttons, turn off the “firstLastButton” toggle\nTo change the states of page numbers or buttons, click on each to see its “State” dropdown\nWhen using Compact Pagination, you can choose between “Page Numbers” and "Icon Only" formats\n\n\n## ACCESSIBILITY NOTE\n\nTo best orient people using screen readers, push focus to the top of\nthe list of results after any of the pagination buttons have been triggered,\n**except for the currently selected one**. Focus target could be a visual results heading,\nor the top heading of the results container of the page selected\nvia a programmatic selector, e.g. < section id=“results” aria-label="results-section" > or\n< div role= “group” aria-label=“results” >.',displayName:"Cre8Pagination",props:{render:{defaultValue:null,description:"Example render, should not be used",name:"render",required:!1,type:{name:"() => TemplateResult<1>"}},componentClassNames:{defaultValue:null,description:"Abstraction of `classnames` that automatically includes any style modifier\nas well as any set variants.\n\nIt is expected that `variant` would be overridden in a subclass with more\nspecific types, `@property() variant?: 'foo' | 'bar'`\n@param baseClassName",name:"componentClassNames",required:!1,type:{name:"(baseClassName: string, additionalClassNames?: {}) => string"}},slotEmpty:{defaultValue:null,description:"Check if a slot is empty\n@param slotName",name:"slotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},slotNotEmpty:{defaultValue:null,description:"Check if a slot is not empty\n@param slotName",name:"slotNotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},dispatch:{defaultValue:null,description:"Dispatch a custom event.",name:"dispatch",required:!1,type:{name:"({ e, eventName, detailObj, optionsObj, }: Cre8DispatchProps) => CustomEvent<any>"}},renderOptions:{defaultValue:null,description:"@category rendering",name:"renderOptions",required:!1,type:{name:"RenderOptions"}},connectedCallback:{defaultValue:null,description:"Invoked when the component is added to the document's DOM.\n\nIn `connectedCallback()` you should setup tasks that should only occur when\nthe element is connected to the document. The most common of these is\nadding event listeners to nodes external to the element, like a keydown\nevent handler added to the window.\n\n```ts\nconnectedCallback() {\n  super.connectedCallback();\n  addEventListener('keydown', this._handleKeydown);\n}\n```\n\nTypically, anything done in `connectedCallback()` should be undone when the\nelement is disconnected, in `disconnectedCallback()`.\n@category lifecycle",name:"connectedCallback",required:!1,type:{name:"() => void"}},disconnectedCallback:{defaultValue:null,description:"Invoked when the component is removed from the document's DOM.\n\nThis callback is the main signal to the element that it may no longer be\nused. `disconnectedCallback()` should ensure that nothing is holding a\nreference to the element (such as event listeners added to nodes external\nto the element), so that it is free to be garbage collected.\n\n```ts\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\nAn element may be re-connected after being disconnected.",name:"disconnectedCallback",required:!1,type:{name:"() => void"}},renderRoot:{defaultValue:null,description:"Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.\n@category rendering",name:"renderRoot",required:!1,type:{name:"HTMLElement | ShadowRoot"}},isUpdatePending:{defaultValue:null,description:"True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.\n@category updates",name:"isUpdatePending",required:!1,type:{name:"boolean"}},hasUpdated:{defaultValue:null,description:"Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.\n@category updates",name:"hasUpdated",required:!1,type:{name:"boolean"}},addController:{defaultValue:null,description:"Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.\n@category controllers",name:"addController",required:!1,type:{name:"(controller: ReactiveController) => void"}},removeController:{defaultValue:null,description:"Removes a `ReactiveController` from the element.\n@category controllers",name:"removeController",required:!1,type:{name:"(controller: ReactiveController) => void"}},attributeChangedCallback:{defaultValue:null,description:"Synchronizes property values when attributes change.\n\nSpecifically, when an attribute is set, the corresponding property is set.\nYou should rarely need to implement this callback. If this method is\noverridden, `super.attributeChangedCallback(name, _old, value)` must be\ncalled.\n\nSee [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\non MDN for more information about the `attributeChangedCallback`.\n@category attributes",name:"attributeChangedCallback",required:!1,type:{name:"(name: string, _old: string, value: string) => void"}},requestUpdate:{defaultValue:null,description:"Requests an update which is processed asynchronously. This should be called\nwhen an element should update based on some state not triggered by setting\na reactive property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored.\n@param name name of requesting property\n@param oldValue old value of requesting property\n@param options property options to use instead of the previously\nconfigured options\n@category updates",name:"requestUpdate",required:!1,type:{name:"(name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration<unknown, unknown>) => void"}},updateComplete:{defaultValue:null,description:"Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.\n@return A promise of a boolean that resolves to true if the update completed\nwithout triggering another update.\n@category updates",name:"updateComplete",required:!1,type:{name:"Promise<boolean>"}},display:{defaultValue:null,description:"(optional) prop that allows for a compact and icon-only variant both\nfor mobile screen-sizes and for use in certain contexts as guided by design,\nthe component size will show 'default' in the absence of a value on desktop and\n'compact' on smaller views.\n@attr 'compact' | 'icon-only' | 'default'\n@optional",name:"display",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"compact"'},{value:'"icon-only"'}]}},handleResize:{defaultValue:null,description:"",name:"handleResize",required:!1,type:{name:"() => void"}},handleKeydown:{defaultValue:null,description:"",name:"handleKeydown",required:!1,type:{name:"(page: number, buttonName?: string) => (e: KeyboardEvent) => void"}},_currentPage:{defaultValue:null,description:"",name:"_currentPage",required:!1,type:{name:"number"}},totalResults:{defaultValue:null,description:"Input the total number of elements are returned from consuming app e.g. search results\n@attr number\n@required",name:"totalResults",required:!1,type:{name:"number"}},pageSize:{defaultValue:null,description:"how many elements will displayVariant per page, indicated by business to typically be 20\n@attr number",name:"pageSize",required:!1,type:{name:"number"}},_pageSize:{defaultValue:null,description:"",name:"_pageSize",required:!1,type:{name:"number"}},visiblePages:{defaultValue:null,description:"Controls how many page buttons are displayVarianted on the page\nat once, if container size permits. recommended max = 5 pages\n@attr number",name:"visiblePages",required:!1,type:{name:"number"}},windowWidth:{defaultValue:null,description:"@state watches the width of the window and responds to show the accessibility approved variant.",name:"windowWidth",required:!1,type:{name:"number"}},buttons:{defaultValue:null,description:"",name:"buttons",required:!1,type:{name:"Cre8Button[]"}},hideLastAndFirstButtons:{defaultValue:null,description:"@optional",name:"hideLastAndFirstButtons",required:!1,type:{name:"boolean"}},currentPage:{defaultValue:null,description:"",name:"currentPage",required:!1,type:{name:"number"}},connectedCallBack:{defaultValue:null,description:"",name:"connectedCallBack",required:!1,type:{name:"() => void"}},maxVisiblePages:{defaultValue:null,description:"",name:"maxVisiblePages",required:!1,type:{name:"number"}},displayTypes:{defaultValue:null,description:"",name:"displayTypes",required:!1,type:{name:"() => HTMLTemplateResult"}},goToPage:{defaultValue:null,description:"",name:"goToPage",required:!1,type:{name:"(page: number, buttonName?: string) => any"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/Pagination/Pagination.tsx#Cre8Pagination"]={docgenInfo:Cre8Pagination.__docgenInfo,name:"Cre8Pagination",path:"src/components/Pagination/Pagination.tsx#Cre8Pagination"})}catch(__react_docgen_typescript_loader_error){}const Pagination_stories={title:"Cre8 Components/Pagination",component:Cre8Pagination,parameters:{status:{type:"inProgress"},controls:{exclude:new RegExp(`${preview.excludeRegexArray.join("|")}`)},action:{handles:["click","resize"]},layout:"centered"},decorators:[decorator.w],args:{currentPage:1,totalResults:300,pageSize:10,visiblePages:5,display:"default"},argTypes:{display:{control:{type:"select"},defaultValue:"default",options:["compact","icon-only","default"]}}},Default={args:{}},Compact={args:{display:"compact"}},IconOnly={args:{display:"icon-only"}},HideLastAndFirstButtons={args:{display:"default",hideLastAndFirstButtons:!0}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {}\n}",...Default.parameters?.docs?.source}}},Compact.parameters={...Compact.parameters,docs:{...Compact.parameters?.docs,source:{originalSource:"{\n  args: {\n    display: 'compact'\n  }\n}",...Compact.parameters?.docs?.source}}},IconOnly.parameters={...IconOnly.parameters,docs:{...IconOnly.parameters?.docs,source:{originalSource:"{\n  args: {\n    display: 'icon-only'\n  }\n}",...IconOnly.parameters?.docs?.source}}},HideLastAndFirstButtons.parameters={...HideLastAndFirstButtons.parameters,docs:{...HideLastAndFirstButtons.parameters?.docs,source:{originalSource:"{\n  args: {\n    display: 'default',\n    hideLastAndFirstButtons: true\n  }\n}",...HideLastAndFirstButtons.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Compact","IconOnly","HideLastAndFirstButtons"]}}]);