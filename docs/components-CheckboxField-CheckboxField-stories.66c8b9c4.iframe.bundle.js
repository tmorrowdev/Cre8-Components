"use strict";(self.webpackChunk_cre8_dev_cre8_react=self.webpackChunk_cre8_dev_cre8_react||[]).push([[731],{"./src/components/CheckboxField/CheckboxField.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>CheckboxField_stories});var react=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),preview=__webpack_require__("./.storybook/preview.js"),_lit_react=__webpack_require__("./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js"),checkbox_field=__webpack_require__("./node_modules/.pnpm/@cre8_dev+cre8-wc@1.0.3_webpack@5.98.0/node_modules/@cre8_dev/cre8-wc/lib/components/checkbox-field/checkbox-field.js");const Cre8CheckboxField=(0,_lit_react.a)({react,tagName:"Cre8-checkbox-field",elementClass:checkbox_field.C});try{Cre8CheckboxField.displayName="Cre8CheckboxField",Cre8CheckboxField.__docgenInfo={description:"",displayName:"Cre8CheckboxField",props:{render:{defaultValue:null,description:"Example render, should not be used",name:"render",required:!1,type:{name:"() => TemplateResult<1>"}},componentClassNames:{defaultValue:null,description:"Abstraction of `classnames` that automatically includes any style modifier\nas well as any set variants.\n\nIt is expected that `variant` would be overridden in a subclass with more\nspecific types, `@property() variant?: 'foo' | 'bar'`\n@param baseClassName",name:"componentClassNames",required:!1,type:{name:"(baseClassName: string, additionalClassNames?: {}) => string"}},slotEmpty:{defaultValue:null,description:"Check if a slot is empty\n@param slotName",name:"slotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},slotNotEmpty:{defaultValue:null,description:"Check if a slot is not empty\n@param slotName",name:"slotNotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},dispatch:{defaultValue:null,description:"Dispatch a custom event.",name:"dispatch",required:!1,type:{name:"({ e, eventName, detailObj, optionsObj, }: Cre8DispatchProps) => CustomEvent<any>"}},renderOptions:{defaultValue:null,description:"@category rendering",name:"renderOptions",required:!1,type:{name:"RenderOptions"}},connectedCallback:{defaultValue:null,description:"Invoked when the component is added to the document's DOM.\n\nIn `connectedCallback()` you should setup tasks that should only occur when\nthe element is connected to the document. The most common of these is\nadding event listeners to nodes external to the element, like a keydown\nevent handler added to the window.\n\n```ts\nconnectedCallback() {\n  super.connectedCallback();\n  addEventListener('keydown', this._handleKeydown);\n}\n```\n\nTypically, anything done in `connectedCallback()` should be undone when the\nelement is disconnected, in `disconnectedCallback()`.",name:"connectedCallback",required:!1,type:{name:"() => void"}},disconnectedCallback:{defaultValue:null,description:"Invoked when the component is removed from the document's DOM.\n\nThis callback is the main signal to the element that it may no longer be\nused. `disconnectedCallback()` should ensure that nothing is holding a\nreference to the element (such as event listeners added to nodes external\nto the element), so that it is free to be garbage collected.\n\n```ts\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\nAn element may be re-connected after being disconnected.\n@category lifecycle",name:"disconnectedCallback",required:!1,type:{name:"() => void"}},renderRoot:{defaultValue:null,description:"Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.\n@category rendering",name:"renderRoot",required:!1,type:{name:"HTMLElement | ShadowRoot"}},isUpdatePending:{defaultValue:null,description:"True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.\n@category updates",name:"isUpdatePending",required:!1,type:{name:"boolean"}},hasUpdated:{defaultValue:null,description:"Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.\n@category updates",name:"hasUpdated",required:!1,type:{name:"boolean"}},addController:{defaultValue:null,description:"Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.\n@category controllers",name:"addController",required:!1,type:{name:"(controller: ReactiveController) => void"}},removeController:{defaultValue:null,description:"Removes a `ReactiveController` from the element.\n@category controllers",name:"removeController",required:!1,type:{name:"(controller: ReactiveController) => void"}},attributeChangedCallback:{defaultValue:null,description:"Synchronizes property values when attributes change.\n\nSpecifically, when an attribute is set, the corresponding property is set.\nYou should rarely need to implement this callback. If this method is\noverridden, `super.attributeChangedCallback(name, _old, value)` must be\ncalled.\n\nSee [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\non MDN for more information about the `attributeChangedCallback`.\n@category attributes",name:"attributeChangedCallback",required:!1,type:{name:"(name: string, _old: string, value: string) => void"}},requestUpdate:{defaultValue:null,description:"Requests an update which is processed asynchronously. This should be called\nwhen an element should update based on some state not triggered by setting\na reactive property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored.\n@param name name of requesting property\n@param oldValue old value of requesting property\n@param options property options to use instead of the previously\nconfigured options\n@category updates",name:"requestUpdate",required:!1,type:{name:"(name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration<unknown, unknown>) => void"}},updateComplete:{defaultValue:null,description:"Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.\n@return A promise of a boolean that resolves to true if the update completed\nwithout triggering another update.\n@category updates",name:"updateComplete",required:!1,type:{name:"Promise<boolean>"}},label:{defaultValue:null,description:"Checkbox container legend label",name:"label",required:!1,type:{name:"string"}},fieldNote:{defaultValue:null,description:"Checkbox container fieldnote",name:"fieldNote",required:!1,type:{name:"string"}},ariaDescribedBy:{defaultValue:null,description:"Checkbox container fieldnote aria describe by",name:"ariaDescribedBy",required:!1,type:{name:"string"}},fieldNoteIconName:{defaultValue:null,description:"Checkbox container fieldnote icon name",name:"fieldNoteIconName",required:!1,type:{name:"string"}},fieldNoteKnockout:{defaultValue:null,description:"Checkbox container fieldnote knockout\n@attr {boolean}",name:"fieldNoteKnockout",required:!1,type:{name:"boolean"}},fieldNoteIsSuccess:{defaultValue:null,description:"Checkbox container fieldnote isSuccess\n@attr {boolean}",name:"fieldNoteIsSuccess",required:!1,type:{name:"boolean"}},fieldNoteIsError:{defaultValue:null,description:"Checkbox container fieldnote isError\n@attr {boolean}",name:"fieldNoteIsError",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/CheckboxField/CheckboxField.tsx#Cre8CheckboxField"]={docgenInfo:Cre8CheckboxField.__docgenInfo,name:"Cre8CheckboxField",path:"src/components/CheckboxField/CheckboxField.tsx#Cre8CheckboxField"})}catch(__react_docgen_typescript_loader_error){}var CheckboxFieldItem=__webpack_require__("./src/components/CheckboxFieldItem/CheckboxFieldItem.tsx"),jsx_runtime=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");const CheckboxField_stories={title:"Cre8 Components/CheckboxField",component:Cre8CheckboxField,parameters:{status:{type:"inProgress"},controls:{exclude:new RegExp(`${preview.excludeRegexArray.join("|")}|^fieldNoteKnockout$`)}}},Default={args:{label:"Legend",fieldNote:"This is a Field Note!",children:(0,jsx_runtime.jsxs)(react.Fragment,{children:[(0,jsx_runtime.jsx)(CheckboxFieldItem.t,{label:"Default"}),(0,jsx_runtime.jsx)(CheckboxFieldItem.t,{label:"Error",isError:!0}),(0,jsx_runtime.jsx)(CheckboxFieldItem.t,{label:"Disabled",disabled:!0,checked:!0})]})}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: \'Legend\',\n    fieldNote: \'This is a Field Note!\',\n    children: <React.Fragment>\n                <Cre8CheckboxFieldItem label="Default" />\n                <Cre8CheckboxFieldItem label="Error" isError />\n                <Cre8CheckboxFieldItem label="Disabled" disabled checked />\n            </React.Fragment>\n  }\n}',...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Default"]},"./src/components/CheckboxFieldItem/CheckboxFieldItem.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>Cre8CheckboxFieldItem});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),_lit_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js"),_cre8_dev_cre8_wc_lib_components_checkbox_field_item_checkbox_field_item__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/@cre8_dev+cre8-wc@1.0.3_webpack@5.98.0/node_modules/@cre8_dev/cre8-wc/lib/components/checkbox-field-item/checkbox-field-item.js");const Cre8CheckboxFieldItem=(0,_lit_react__WEBPACK_IMPORTED_MODULE_1__.a)({react:react__WEBPACK_IMPORTED_MODULE_0__,tagName:"Cre8-checkbox-field-item",elementClass:_cre8_dev_cre8_wc_lib_components_checkbox_field_item_checkbox_field_item__WEBPACK_IMPORTED_MODULE_2__.t,events:{onChange:"input"}});try{Cre8CheckboxFieldItem.displayName="Cre8CheckboxFieldItem",Cre8CheckboxFieldItem.__docgenInfo={description:"CheckboxFieldItem is the combination of Checkbox, Label and FieldNote. Checkbox can turn an option on or off.",displayName:"Cre8CheckboxFieldItem",props:{onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(e: Cre8DomEvent<Cre8CheckboxFieldItem, Cre8CheckboxFieldItem>) => void"}},render:{defaultValue:null,description:"Example render, should not be used",name:"render",required:!1,type:{name:"() => TemplateResult<1>"}},name:{defaultValue:null,description:"Checkbox name\n@attr {string}",name:"name",required:!1,type:{name:"string"}},componentClassNames:{defaultValue:null,description:"Abstraction of `classnames` that automatically includes any style modifier\nas well as any set variants.\n\nIt is expected that `variant` would be overridden in a subclass with more\nspecific types, `@property() variant?: 'foo' | 'bar'`\n@param baseClassName",name:"componentClassNames",required:!1,type:{name:"(baseClassName: string, additionalClassNames?: {}) => string"}},slotEmpty:{defaultValue:null,description:"Check if a slot is empty\n@param slotName",name:"slotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},slotNotEmpty:{defaultValue:null,description:"Check if a slot is not empty\n@param slotName",name:"slotNotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},dispatch:{defaultValue:null,description:"Dispatch a custom event.",name:"dispatch",required:!1,type:{name:"({ e, eventName, detailObj, optionsObj, }: Cre8DispatchProps) => CustomEvent<any>"}},renderOptions:{defaultValue:null,description:"@category rendering",name:"renderOptions",required:!1,type:{name:"RenderOptions"}},connectedCallback:{defaultValue:null,description:"Connected callback lifecycle\n1) Set the fieldID to a random string if not provided so form is always accessible\n2) If a fieldnote is added, set the aria-describedby property to the `ariaDescribedBy` property\nor a random string to always make the form field accessible.\n3) Set the form internal data to set that to the default checked state.\n4) Set the default value of the checkbox field item to the checked property",name:"connectedCallback",required:!1,type:{name:"() => void"}},disconnectedCallback:{defaultValue:null,description:"Invoked when the component is removed from the document's DOM.\n\nThis callback is the main signal to the element that it may no longer be\nused. `disconnectedCallback()` should ensure that nothing is holding a\nreference to the element (such as event listeners added to nodes external\nto the element), so that it is free to be garbage collected.\n\n```ts\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\nAn element may be re-connected after being disconnected.\n@category lifecycle",name:"disconnectedCallback",required:!1,type:{name:"() => void"}},renderRoot:{defaultValue:null,description:"Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.\n@category rendering",name:"renderRoot",required:!1,type:{name:"HTMLElement | ShadowRoot"}},isUpdatePending:{defaultValue:null,description:"True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.\n@category updates",name:"isUpdatePending",required:!1,type:{name:"boolean"}},hasUpdated:{defaultValue:null,description:"Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.\n@category updates",name:"hasUpdated",required:!1,type:{name:"boolean"}},addController:{defaultValue:null,description:"Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.\n@category controllers",name:"addController",required:!1,type:{name:"(controller: ReactiveController) => void"}},removeController:{defaultValue:null,description:"Removes a `ReactiveController` from the element.\n@category controllers",name:"removeController",required:!1,type:{name:"(controller: ReactiveController) => void"}},attributeChangedCallback:{defaultValue:null,description:"Synchronizes property values when attributes change.\n\nSpecifically, when an attribute is set, the corresponding property is set.\nYou should rarely need to implement this callback. If this method is\noverridden, `super.attributeChangedCallback(name, _old, value)` must be\ncalled.\n\nSee [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\non MDN for more information about the `attributeChangedCallback`.\n@category attributes",name:"attributeChangedCallback",required:!1,type:{name:"(name: string, _old: string, value: string) => void"}},requestUpdate:{defaultValue:null,description:"Requests an update which is processed asynchronously. This should be called\nwhen an element should update based on some state not triggered by setting\na reactive property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored.\n@param name name of requesting property\n@param oldValue old value of requesting property\n@param options property options to use instead of the previously\nconfigured options\n@category updates",name:"requestUpdate",required:!1,type:{name:"(name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration<unknown, unknown>) => void"}},updateComplete:{defaultValue:null,description:"Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.\n@return A promise of a boolean that resolves to true if the update completed\nwithout triggering another update.\n@category updates",name:"updateComplete",required:!1,type:{name:"Promise<boolean>"}},label:{defaultValue:null,description:"The checkbox label",name:"label",required:!1,type:{name:"string"}},firstUpdated:{defaultValue:null,description:"First update lifecycle hook\n1) super.firstUpdated also uses the firstUpdated from the Cre8FormElement",name:"firstUpdated",required:!1,type:{name:"() => void"}},type:{defaultValue:null,description:"",name:"type",required:!1,type:{name:'"checkbox"'}},fieldId:{defaultValue:null,description:"Checkbox FieldId\n@attr {string}",name:"fieldId",required:!1,type:{name:"string"}},field:{defaultValue:null,description:"Get the input element within the shadow root and set it to this.field",name:"field",required:!1,type:{name:"HTMLInputElement"}},formResetCallback:{defaultValue:null,description:"Form reset callback\n1) Set checked property to the default value and then set the input's checked attribute to that default value\n2) Set the input's checked attribute to that default value\n3) Set the element internals form data when the form is reset\n4) Change the new value to the old value on reset",name:"formResetCallback",required:!1,type:{name:"() => void"}},internals:{defaultValue:null,description:"@protected\n@internal An instance of element internals.\nContains properties and methods that allows the element\nto participate fully in the HTML form it's in.",name:"internals",required:!1,type:{name:"Cre8ElementInternals"}},internalValue:{defaultValue:null,description:"@protected\n@internal Stores the value for the `value` getter and setter.",name:"internalValue",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the form field.\nSets the value of the form field.\n1. Stores the new value so it can be retrieved by the getter.\n2. Sets the current value of the control.\n3. Updates the actual field.\n4. Rerenders the component.",name:"value",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"Disabled State\n@attr {boolean}",name:"disabled",required:!1,type:{name:"boolean"}},fieldNote:{defaultValue:null,description:"Checkbox FieldNote",name:"fieldNote",required:!1,type:{name:"string"}},ariaDescribedBy:{defaultValue:null,description:"Checkbox fieldnote ariaDescribeBy\n@attr {string}",name:"ariaDescribedBy",required:!1,type:{name:"string"}},fieldNoteIconName:{defaultValue:null,description:"Checkbox fieldnote icon name",name:"fieldNoteIconName",required:!1,type:{name:"string"}},isError:{defaultValue:null,description:"Changes the component's treatment to represent an error state\n@attr {boolean}",name:"isError",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:"Required property\n@attr {boolean}",name:"required",required:!1,type:{name:"boolean"}},checked:{defaultValue:null,description:"Checked State\n@attr {boolean}",name:"checked",required:!1,type:{name:"boolean"}},isSuccess:{defaultValue:null,description:"Changes the component's treatment to represent a success state\n@attr {boolean}",name:"isSuccess",required:!1,type:{name:"boolean"}},validationAriaDescribedBy:{defaultValue:null,description:"Additional aria-describedby connection to id for additional success and error notes to be accessible",name:"validationAriaDescribedBy",required:!1,type:{name:"string"}},errorNote:{defaultValue:null,description:"The error field note that appears below the default field note",name:"errorNote",required:!1,type:{name:"string"}},successNote:{defaultValue:null,description:"The success field note that appears below the default field note",name:"successNote",required:!1,type:{name:"string"}},errorText:{defaultValue:null,description:"Visually hidden text that always signifies that this is an error for screen reader usage\n@attr {string}",name:"errorText",required:!1,type:{name:"string"}},successText:{defaultValue:null,description:"Visually hidden text that always signifies that this is successful for screen reader usage",name:"successText",required:!1,type:{name:"string"}},initializeAria:{defaultValue:null,description:"Initialize aria attributes",name:"initializeAria",required:!1,type:{name:"() => void"}},fieldNoteAria:{defaultValue:null,description:"Aria describedby string based on field notes and error/success notes\n1) If both validationAriaDescribedBy (error/success note) and field note exists,\nrender both in the input's `aria-describedby` attribute\n2) Otherwise, if only validationAriaDescribedBy exists, then render only that as\nthe `aria-describedby` attribute (input without field note initially, but then error/success is added).\n3) Otherwise, render only the `ariaDescribedBy` property (field note only)",name:"fieldNoteAria",required:!1,type:{name:"() => string"}},renderSuccessErrorFieldNote:{defaultValue:null,description:"Render the success or error field notes\n1. If there is a successNote, then return the field note with the success message and state.\n2. If there is a errorNote, then return the field note with the error message and state.",name:"renderSuccessErrorFieldNote",required:!1,type:{name:"() => TemplateResult<1>"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/CheckboxFieldItem/CheckboxFieldItem.tsx#Cre8CheckboxFieldItem"]={docgenInfo:Cre8CheckboxFieldItem.__docgenInfo,name:"Cre8CheckboxFieldItem",path:"src/components/CheckboxFieldItem/CheckboxFieldItem.tsx#Cre8CheckboxFieldItem"})}catch(__react_docgen_typescript_loader_error){}}}]);