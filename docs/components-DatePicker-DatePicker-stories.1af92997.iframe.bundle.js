"use strict";(self.webpackChunk_cre8_dev_cre8_react=self.webpackChunk_cre8_dev_cre8_react||[]).push([[2573],{"./src/components/DatePicker/DatePicker.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,DefaultWithShortcuts:()=>DefaultWithShortcuts,Disabled:()=>Disabled,Error:()=>Error,Fieldnote:()=>Fieldnote,ReadOnly:()=>ReadOnly,Success:()=>Success,__namedExportsOrder:()=>__namedExportsOrder,default:()=>DatePicker_stories});var react=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),dist=__webpack_require__("../../node_modules/.pnpm/@storybook+addon-actions@7.6.20/node_modules/@storybook/addon-actions/dist/index.mjs"),_lit_react=__webpack_require__("./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js"),date_picker=__webpack_require__("./node_modules/.pnpm/@cre8_dev+cre8-wc@1.0.3_webpack@5.98.0/node_modules/@cre8_dev/cre8-wc/lib/components/date-picker/date-picker.js");const Cre8DatePicker=(0,_lit_react.a)({react,tagName:"Cre8-date-picker",elementClass:date_picker.J,events:{onChange:"input"}});try{Cre8DatePicker.displayName="Cre8DatePicker",Cre8DatePicker.__docgenInfo={description:"The Date Picker component renders a form group with label, control, help text and validation styling much\nlike the Field component but exclusively for type=date.\nCre8DatePicker inherts the Cre8Field component.",displayName:"Cre8DatePicker",props:{onChange:{defaultValue:null,description:"",name:"onChange",required:!1,type:{name:"(e: Cre8DomEvent<Cre8DatePicker, Cre8DatePicker>) => void"}},placeholder:{defaultValue:null,description:"The placeholder text that appears inside the input\n@attr {string}",name:"placeholder",required:!1,type:{name:"string"}},render:{defaultValue:null,description:"Example render, should not be used",name:"render",required:!1,type:{name:"() => TemplateResult<1>"}},name:{defaultValue:null,description:"The name property on the input\n@attr {string}",name:"name",required:!1,type:{name:"string"}},componentClassNames:{defaultValue:null,description:"Abstraction of `classnames` that automatically includes any style modifier\nas well as any set variants.\n\nIt is expected that `variant` would be overridden in a subclass with more\nspecific types, `@property() variant?: 'foo' | 'bar'`\n@param baseClassName",name:"componentClassNames",required:!1,type:{name:"(baseClassName: string, additionalClassNames?: {}) => string"}},slotEmpty:{defaultValue:null,description:"Check if a slot is empty\n@param slotName",name:"slotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},slotNotEmpty:{defaultValue:null,description:"Check if a slot is not empty\n@param slotName",name:"slotNotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},dispatch:{defaultValue:null,description:"Dispatch a custom event.",name:"dispatch",required:!1,type:{name:"({ e, eventName, detailObj, optionsObj, }: Cre8DispatchProps) => CustomEvent<any>"}},renderOptions:{defaultValue:null,description:"@category rendering",name:"renderOptions",required:!1,type:{name:"RenderOptions"}},connectedCallback:{defaultValue:null,description:"Invoked when the component is added to the document's DOM.\n\nIn `connectedCallback()` you should setup tasks that should only occur when\nthe element is connected to the document. The most common of these is\nadding event listeners to nodes external to the element, like a keydown\nevent handler added to the window.\n\n```ts\nconnectedCallback() {\n  super.connectedCallback();\n  addEventListener('keydown', this._handleKeydown);\n}\n```\n\nTypically, anything done in `connectedCallback()` should be undone when the\nelement is disconnected, in `disconnectedCallback()`.\n@category lifecycle",name:"connectedCallback",required:!1,type:{name:"() => void"}},disconnectedCallback:{defaultValue:null,description:"Invoked when the component is removed from the document's DOM.\n\nThis callback is the main signal to the element that it may no longer be\nused. `disconnectedCallback()` should ensure that nothing is holding a\nreference to the element (such as event listeners added to nodes external\nto the element), so that it is free to be garbage collected.\n\n```ts\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\nAn element may be re-connected after being disconnected.\n@category lifecycle",name:"disconnectedCallback",required:!1,type:{name:"() => void"}},renderRoot:{defaultValue:null,description:"Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.\n@category rendering",name:"renderRoot",required:!1,type:{name:"HTMLElement | ShadowRoot"}},isUpdatePending:{defaultValue:null,description:"True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.\n@category updates",name:"isUpdatePending",required:!1,type:{name:"boolean"}},hasUpdated:{defaultValue:null,description:"Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.\n@category updates",name:"hasUpdated",required:!1,type:{name:"boolean"}},addController:{defaultValue:null,description:"Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.\n@category controllers",name:"addController",required:!1,type:{name:"(controller: ReactiveController) => void"}},removeController:{defaultValue:null,description:"Removes a `ReactiveController` from the element.\n@category controllers",name:"removeController",required:!1,type:{name:"(controller: ReactiveController) => void"}},attributeChangedCallback:{defaultValue:null,description:"Synchronizes property values when attributes change.\n\nSpecifically, when an attribute is set, the corresponding property is set.\nYou should rarely need to implement this callback. If this method is\noverridden, `super.attributeChangedCallback(name, _old, value)` must be\ncalled.\n\nSee [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\non MDN for more information about the `attributeChangedCallback`.\n@category attributes",name:"attributeChangedCallback",required:!1,type:{name:"(name: string, _old: string, value: string) => void"}},requestUpdate:{defaultValue:null,description:"Requests an update which is processed asynchronously. This should be called\nwhen an element should update based on some state not triggered by setting\na reactive property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored.\n@param name name of requesting property\n@param oldValue old value of requesting property\n@param options property options to use instead of the previously\nconfigured options\n@category updates",name:"requestUpdate",required:!1,type:{name:"(name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration<unknown, unknown>) => void"}},updateComplete:{defaultValue:null,description:"Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.\n@return A promise of a boolean that resolves to true if the update completed\nwithout triggering another update.\n@category updates",name:"updateComplete",required:!1,type:{name:"Promise<boolean>"}},label:{defaultValue:null,description:"The required label that appears above the input\n@attr {string}",name:"label",required:!1,type:{name:"string"}},pattern:{defaultValue:null,description:"Pattern attribute defines a regular expression to validate against input\n@attr {string}",name:"pattern",required:!1,type:{name:"string"}},firstUpdated:{defaultValue:null,description:"First update lifecycle hook\n1) super.firstUpdated also uses the firstUpdated from the Cre8FormElement",name:"firstUpdated",required:!1,type:{name:"() => void"}},type:{defaultValue:null,description:"Type variants\n- **text** renders a standard text input\n- **email** renders a text input for an email format\n- **number** renders an input for number values only\n- **url** renders an input for urls only\n- **tel** renders an input for telephone number values only\n@attr {string}",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"text"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"date"'},{value:'"password"'}]}},fieldId:{defaultValue:null,description:"The unique id of the field\n<br/><br/> _*This property is dynamically set_\n@attr {string}",name:"fieldId",required:!1,type:{name:"string"}},field:{defaultValue:null,description:"",name:"field",required:!1,type:{name:"HTMLInputElement"}},formResetCallback:{defaultValue:null,description:"",name:"formResetCallback",required:!1,type:{name:"() => void"}},internals:{defaultValue:null,description:"@protected\n@internal An instance of element internals.\nContains properties and methods that allows the element\nto participate fully in the HTML form it's in.",name:"internals",required:!1,type:{name:"Cre8ElementInternals"}},internalValue:{defaultValue:null,description:"@protected\n@internal Stores the value for the `value` getter and setter.",name:"internalValue",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the form field.\nSets the value of the form field.\n1. Stores the new value so it can be retrieved by the getter.\n2. Sets the current value of the control.\n3. Updates the actual field.\n4. Rerenders the component.",name:"value",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"The disabled attribute on the input\n@attr {boolean}",name:"disabled",required:!1,type:{name:"boolean"}},fieldNote:{defaultValue:null,description:"The text that displays below in text field input\n@attr {string}",name:"fieldNote",required:!1,type:{name:"string"}},ariaDescribedBy:{defaultValue:null,description:"Used to connect the field note in text field to the text menu for accessibility\n@attr {string}",name:"ariaDescribedBy",required:!1,type:{name:"string"}},isError:{defaultValue:null,description:"Changes the component's treatment to represent an error state\n@attr {boolean}",name:"isError",required:!1,type:{name:"boolean"}},required:{defaultValue:null,description:"The required attribute on the input\n@attr {boolean}",name:"required",required:!1,type:{name:"boolean"}},isSuccess:{defaultValue:null,description:"Changes the component's treatment to represent a success state\n@attr {boolean}",name:"isSuccess",required:!1,type:{name:"boolean"}},validationAriaDescribedBy:{defaultValue:null,description:"Additional aria-describedby connection to id for additional success and error notes to be accessible\n@attr {string}",name:"validationAriaDescribedBy",required:!1,type:{name:"string"}},errorNote:{defaultValue:null,description:"The error field note that appears below the default field note\n@attr {string}",name:"errorNote",required:!1,type:{name:"string"}},successNote:{defaultValue:null,description:"The success field note that appears below the default field note\n@attr {string}",name:"successNote",required:!1,type:{name:"string"}},max:{defaultValue:null,description:"The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute.\n@attr {string | number}",name:"max",required:!1,type:{name:"string"}},autocomplete:{defaultValue:null,description:"Autocomplete attribute that allows input to expect certain types of information. Note: autocomplete is supported\nby most browsers, but the suggested 'completions' are also sourced from those browsers. Values come\nfrom past user stored data from past interactions in that browser, such as:\n\n 1. From past values entered by the user, but they may also come from pre-configured values. For\n instance, a browser might let the user save their name, address, phone number, and email addresses for\n autocomplete purposes.\n\n 2. Perhaps the browser offers the ability to save encrypted credit card information, for autocompletion\n following a an authentication procedure.\n See: [MDN web docs_](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n\n NOTE:: In order to provide autocompletion, user-agents might require input, select, textarea\n elements to:\n\n 1. Have a {{name}} and/or {{id}} attribute\n 2. Be descendants of a form element\n 3. The form to have a [submit button](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit)\n@attr {string}",name:"autocomplete",required:!1,type:{name:"enum",value:[{value:'"on"'},{value:'"off"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"name"'},{value:'"username"'},{value:'"new-password"'},{value:'"current-password"'},{value:'"address-line1"'},{value:'"address-line2"'},{value:'"country"'},{value:'"postal-code"'}]}},errorText:{defaultValue:null,description:"Visually hidden text that always signifies that this is an error for screen reader usage\n@attr {string}",name:"errorText",required:!1,type:{name:"string"}},min:{defaultValue:null,description:"The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute.\n@attr {string | number}",name:"min",required:!1,type:{name:"string"}},maxlength:{defaultValue:null,description:'The maxlength is an integer above 0 that indicates the maximum allowed characters to be entered. When using the\nmaxlength prop, you must also use the "required" prop to provide Constraint Validation on the input field.\nThis allows users to know why the input they attempted didn\'t render in the input field. see\n[MDN maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength#constraint_validation)\n@attr {string}',name:"maxlength",required:!1,type:{name:"number"}},successText:{defaultValue:null,description:"Visually hidden text that always signifies that this is successful for screen reader usage\n@attr {string}",name:"successText",required:!1,type:{name:"string"}},readonly:{defaultValue:null,description:"Readonly attribute\n@attr {boolean}",name:"readonly",required:!1,type:{name:"boolean"}},initializeAria:{defaultValue:null,description:"Initialize aria attributes",name:"initializeAria",required:!1,type:{name:"() => void"}},fieldNoteAria:{defaultValue:null,description:"Aria describedby string based on field notes and error/success notes\n1) If both validationAriaDescribedBy (error/success note) and field note exists,\nrender both in the input's `aria-describedby` attribute\n2) Otherwise, if only validationAriaDescribedBy exists, then render only that as\nthe `aria-describedby` attribute (input without field note initially, but then error/success is added).\n3) Otherwise, render only the `ariaDescribedBy` property (field note only)",name:"fieldNoteAria",required:!1,type:{name:"() => string"}},renderSuccessErrorFieldNote:{defaultValue:null,description:"Render the success or error field notes\n1. If there is a successNote, then return the field note with the success message and state.\n2. If there is a errorNote, then return the field note with the error message and state.",name:"renderSuccessErrorFieldNote",required:!1,type:{name:"() => TemplateResult<1>"}},showCalendar:{defaultValue:null,description:"",name:"showCalendar",required:!1,type:{name:"boolean"}},hasShortcuts:{defaultValue:null,description:"Quick Shortcuts Variant\n@attr {boolean}",name:"hasShortcuts",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/DatePicker/DatePicker.tsx#Cre8DatePicker"]={docgenInfo:Cre8DatePicker.__docgenInfo,name:"Cre8DatePicker",path:"src/components/DatePicker/DatePicker.tsx#Cre8DatePicker"})}catch(__react_docgen_typescript_loader_error){}var TextLink=__webpack_require__("./src/components/TextLink/TextLink.tsx"),preview=__webpack_require__("./.storybook/preview.js"),jsx_runtime=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js");const DatePicker_stories={title:"Cre8 Components/DatePicker",component:Cre8DatePicker,parameters:{status:{type:"inProgress"},actions:{handles:["input","change","blur"]},controls:{exclude:new RegExp(`${preview.excludeRegexArray.join("|")}`)},docs:{story:{height:"600px"}}},render:args=>(0,jsx_runtime.jsx)(Cre8DatePicker,{...args}),args:{placeholder:"",fieldNote:"This is a field note.",onChange:(0,dist.XI)("input"),onBlur:(0,dist.XI)("blur")}},Default={args:{label:"Example Date Picker",children:(0,jsx_runtime.jsxs)("div",{slot:"fieldNote",children:["Some optional help text or ",(0,jsx_runtime.jsx)(TextLink.e,{children:"helpful link"})]})}},DefaultWithShortcuts={args:{hasShortcuts:"true"}},Disabled={args:{label:"Disabled Example",value:"2024-05-15",disabled:!0}},ReadOnly={args:{label:"Readonly Example",value:"2024-05-15",readonly:!0}},Fieldnote={args:{label:"Fieldnote Example",fieldNote:"This is a field note."}},Error={args:{label:"Error Fieldnote Example",isError:!0,fieldNote:"This is a field note.",errorNote:"Short, clear error message"}},Success={args:{label:"Success Fieldnote Example",isSuccess:!0,fieldNote:"This is a field note.",successNote:"Short, clear success message"}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Example Date Picker',\n    children: <div slot=\"fieldNote\">\n        Some optional help text or <Cre8TextLink>helpful link</Cre8TextLink>\n      </div>\n  }\n}",...Default.parameters?.docs?.source}}},DefaultWithShortcuts.parameters={...DefaultWithShortcuts.parameters,docs:{...DefaultWithShortcuts.parameters?.docs,source:{originalSource:'{\n  args: {\n    hasShortcuts: "true"\n  }\n}',...DefaultWithShortcuts.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Disabled Example',\n    value: '2024-05-15',\n    disabled: true\n  }\n}",...Disabled.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Readonly Example',\n    value: '2024-05-15',\n    readonly: true\n  }\n}",...ReadOnly.parameters?.docs?.source}}},Fieldnote.parameters={...Fieldnote.parameters,docs:{...Fieldnote.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Fieldnote Example',\n    fieldNote: 'This is a field note.'\n  }\n}",...Fieldnote.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Error Fieldnote Example',\n    isError: true,\n    fieldNote: 'This is a field note.',\n    errorNote: 'Short, clear error message'\n  }\n}",...Error.parameters?.docs?.source}}},Success.parameters={...Success.parameters,docs:{...Success.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Success Fieldnote Example',\n    isSuccess: true,\n    fieldNote: 'This is a field note.',\n    successNote: 'Short, clear success message'\n  }\n}",...Success.parameters?.docs?.source}}};const __namedExportsOrder=["Default","DefaultWithShortcuts","Disabled","ReadOnly","Fieldnote","Error","Success"]},"./src/components/TextLink/TextLink.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e:()=>Cre8TextLink});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js"),_lit_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/@lit+react@1.0.7_@types+react@18.2.13/node_modules/@lit/react/index.js"),_cre8_dev_cre8_wc_lib_components_text_link_text_link__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/.pnpm/@cre8_dev+cre8-wc@1.0.3_webpack@5.98.0/node_modules/@cre8_dev/cre8-wc/lib/components/text-link/text-link.js");const Cre8TextLink=(0,_lit_react__WEBPACK_IMPORTED_MODULE_1__.a)({react:react__WEBPACK_IMPORTED_MODULE_0__,tagName:"Cre8-text-link",elementClass:_cre8_dev_cre8_wc_lib_components_text_link_text_link__WEBPACK_IMPORTED_MODULE_2__.e});try{Cre8TextLink.displayName="Cre8TextLink",Cre8TextLink.__docgenInfo={description:"",displayName:"Cre8TextLink",props:{size:{defaultValue:null,description:'Size variant\n<cre8-text-passage size="sm">\n<ul>\n<li> **sm** renders a smaller typography preset than the default</li>\n</ul>\n</cre8-text-passage>',name:"size",required:!1,type:{name:'"sm"'}},render:{defaultValue:null,description:"Example render, should not be used",name:"render",required:!1,type:{name:"() => TemplateResult<1>"}},variant:{defaultValue:null,description:'Style variant\n<cre8-text-passage size="sm">\n<ul>\n<li> **display** applies display treatment to the text link (e.g. article title link)</li>\n<li> **secondary** applies secondary treatment to the text link (e.g. non-prominent links)</li>\n</ul>\n</cre8-text-passage>',name:"variant",required:!1,type:{name:"enum",value:[{value:'"secondary"'},{value:'"display"'}]}},componentClassNames:{defaultValue:null,description:"Abstraction of `classnames` that automatically includes any style modifier\nas well as any set variants.\n\nIt is expected that `variant` would be overridden in a subclass with more\nspecific types, `@property() variant?: 'foo' | 'bar'`\n@param baseClassName",name:"componentClassNames",required:!1,type:{name:"(baseClassName: string, additionalClassNames?: {}) => string"}},slotEmpty:{defaultValue:null,description:"Check if a slot is empty\n@param slotName",name:"slotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},slotNotEmpty:{defaultValue:null,description:"Check if a slot is not empty\n@param slotName",name:"slotNotEmpty",required:!1,type:{name:"(slotName: string) => boolean"}},dispatch:{defaultValue:null,description:"Dispatch a custom event.",name:"dispatch",required:!1,type:{name:"({ e, eventName, detailObj, optionsObj, }: Cre8DispatchProps) => CustomEvent<any>"}},renderOptions:{defaultValue:null,description:"@category rendering",name:"renderOptions",required:!1,type:{name:"RenderOptions"}},connectedCallback:{defaultValue:null,description:"Invoked when the component is added to the document's DOM.\n\nIn `connectedCallback()` you should setup tasks that should only occur when\nthe element is connected to the document. The most common of these is\nadding event listeners to nodes external to the element, like a keydown\nevent handler added to the window.\n\n```ts\nconnectedCallback() {\n  super.connectedCallback();\n  addEventListener('keydown', this._handleKeydown);\n}\n```\n\nTypically, anything done in `connectedCallback()` should be undone when the\nelement is disconnected, in `disconnectedCallback()`.\n@category lifecycle",name:"connectedCallback",required:!1,type:{name:"() => void"}},disconnectedCallback:{defaultValue:null,description:"Invoked when the component is removed from the document's DOM.\n\nThis callback is the main signal to the element that it may no longer be\nused. `disconnectedCallback()` should ensure that nothing is holding a\nreference to the element (such as event listeners added to nodes external\nto the element), so that it is free to be garbage collected.\n\n```ts\ndisconnectedCallback() {\n  super.disconnectedCallback();\n  window.removeEventListener('keydown', this._handleKeydown);\n}\n```\n\nAn element may be re-connected after being disconnected.\n@category lifecycle",name:"disconnectedCallback",required:!1,type:{name:"() => void"}},renderRoot:{defaultValue:null,description:"Node or ShadowRoot into which element DOM should be rendered. Defaults\nto an open shadowRoot.\n@category rendering",name:"renderRoot",required:!1,type:{name:"HTMLElement | ShadowRoot"}},isUpdatePending:{defaultValue:null,description:"True if there is a pending update as a result of calling `requestUpdate()`.\nShould only be read.\n@category updates",name:"isUpdatePending",required:!1,type:{name:"boolean"}},hasUpdated:{defaultValue:null,description:"Is set to `true` after the first update. The element code cannot assume\nthat `renderRoot` exists before the element `hasUpdated`.\n@category updates",name:"hasUpdated",required:!1,type:{name:"boolean"}},addController:{defaultValue:null,description:"Registers a `ReactiveController` to participate in the element's reactive\nupdate cycle. The element automatically calls into any registered\ncontrollers during its lifecycle callbacks.\n\nIf the element is connected when `addController()` is called, the\ncontroller's `hostConnected()` callback will be immediately called.\n@category controllers",name:"addController",required:!1,type:{name:"(controller: ReactiveController) => void"}},removeController:{defaultValue:null,description:"Removes a `ReactiveController` from the element.\n@category controllers",name:"removeController",required:!1,type:{name:"(controller: ReactiveController) => void"}},attributeChangedCallback:{defaultValue:null,description:"Synchronizes property values when attributes change.\n\nSpecifically, when an attribute is set, the corresponding property is set.\nYou should rarely need to implement this callback. If this method is\noverridden, `super.attributeChangedCallback(name, _old, value)` must be\ncalled.\n\nSee [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\non MDN for more information about the `attributeChangedCallback`.\n@category attributes",name:"attributeChangedCallback",required:!1,type:{name:"(name: string, _old: string, value: string) => void"}},requestUpdate:{defaultValue:null,description:"Requests an update which is processed asynchronously. This should be called\nwhen an element should update based on some state not triggered by setting\na reactive property. In this case, pass no arguments. It should also be\ncalled when manually implementing a property setter. In this case, pass the\nproperty `name` and `oldValue` to ensure that any configured property\noptions are honored.\n@param name name of requesting property\n@param oldValue old value of requesting property\n@param options property options to use instead of the previously\nconfigured options\n@category updates",name:"requestUpdate",required:!1,type:{name:"(name?: PropertyKey, oldValue?: unknown, options?: PropertyDeclaration<unknown, unknown>) => void"}},updateComplete:{defaultValue:null,description:"Returns a Promise that resolves when the element has completed updating.\nThe Promise value is a boolean that is `true` if the element completed the\nupdate without triggering another update. The Promise result is `false` if\na property was set inside `updated()`. If the Promise is rejected, an\nexception was thrown during the update.\n\nTo await additional asynchronous work, override the `getUpdateComplete`\nmethod. For example, it is sometimes useful to await a rendered element\nbefore fulfilling this Promise. To do this, first await\n`super.getUpdateComplete()`, then any subsequent state.\n@return A promise of a boolean that resolves to true if the update completed\nwithout triggering another update.\n@category updates",name:"updateComplete",required:!1,type:{name:"Promise<boolean>"}},inverted:{defaultValue:null,description:"Inverted variant\n1) Used for dark backgrounds",name:"inverted",required:!1,type:{name:"boolean"}},href:{defaultValue:null,description:"The link URL",name:"href",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/TextLink/TextLink.tsx#Cre8TextLink"]={docgenInfo:Cre8TextLink.__docgenInfo,name:"Cre8TextLink",path:"src/components/TextLink/TextLink.tsx#Cre8TextLink"})}catch(__react_docgen_typescript_loader_error){}}}]);